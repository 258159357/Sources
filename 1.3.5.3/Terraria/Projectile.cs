// Decompiled with JetBrains decompiler
// Type: Terraria.Projectile
// Assembly: TerrariaServer, Version=1.3.5.3, Culture=neutral, PublicKeyToken=null
// MVID: AA3606A2-F3DB-4481-937B-7295FB97CD3E
// Assembly location: E:\TSHOCK\TerrariaServer.exe

using Microsoft.Xna.Framework;
using ReLogic.Utilities;
using System;
using System.Collections.Generic;
using Terraria.Audio;
using Terraria.DataStructures;
using Terraria.Enums;
using Terraria.GameContent;
using Terraria.GameContent.Achievements;
using Terraria.GameContent.Events;
using Terraria.GameContent.Shaders;
using Terraria.GameContent.UI;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Shaders;
using Terraria.ID;
using Terraria.Localization;
using Terraria.Utilities;
using Terraria.World.Generation;

namespace Terraria
{
  public class Projectile : Entity
  {
    public static uint[][] perIDStaticNPCImmunity = new uint[714][];
    public static int SentryLifeTime = 7200;
    public static int maxAI = 2;
    private static float[] _CompanionCubeScreamCooldown = new float[(int) byte.MaxValue];
    public float ownerHitCheckDistance = 1000f;
    public float scale = 1f;
    public int owner = (int) byte.MaxValue;
    public float[] ai = new float[Projectile.maxAI];
    public float[] localAI = new float[Projectile.maxAI];
    public float stepSpeed = 1f;
    public int spriteDirection = 1;
    public int penetrate = 1;
    private int[] localNPCImmunity = new int[200];
    public int maxPenetrate = 1;
    public Vector2[] oldPos = new Vector2[10];
    public float[] oldRot = new float[10];
    public int[] oldSpriteDirection = new int[10];
    public int[] playerImmune = new int[(int) byte.MaxValue];
    public string miscText = "";
    public int projUUID = -1;
    public int localNPCHitCooldown = -2;
    public int idStaticNPCHitCooldown = -1;
    public bool arrow;
    public int numHits;
    public bool bobber;
    public bool netImportant;
    public bool noDropItem;
    public bool counterweight;
    public float rotation;
    public int type;
    public int alpha;
    public bool sentry;
    public short glowMask;
    public float gfxOffY;
    public int aiStyle;
    public int timeLeft;
    public int soundDelay;
    public int damage;
    public bool hostile;
    public float knockBack;
    public bool friendly;
    private bool usesLocalNPCImmunity;
    private bool usesIDStaticNPCImmunity;
    public int identity;
    public float light;
    public bool netUpdate;
    public bool netUpdate2;
    public int netSpam;
    public bool minion;
    public float minionSlots;
    public int minionPos;
    public int restrikeDelay;
    public bool tileCollide;
    public int extraUpdates;
    public int numUpdates;
    public bool ignoreWater;
    public bool hide;
    public bool ownerHitCheck;
    public bool melee;
    public bool ranged;
    public bool thrown;
    public bool magic;
    public bool coldDamage;
    public bool noEnchantments;
    public bool trap;
    public bool npcProj;
    public int frameCounter;
    public int frame;
    public bool manualDirectionChange;

    public string Name
    {
      get
      {
        return Lang.GetProjectileName(this.type).Value;
      }
    }

    public bool WipableTurret
    {
      get
      {
        if (this.owner == Main.myPlayer && this.sentry)
          return !this.TurretShouldPersist();
        return false;
      }
    }

    public float Opacity
    {
      get
      {
        return (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
      }
      set
      {
        this.alpha = (int) MathHelper.Clamp((float) ((1.0 - (double) value) * (double) byte.MaxValue), 0.0f, (float) byte.MaxValue);
      }
    }

    public int MaxUpdates
    {
      get
      {
        return this.extraUpdates + 1;
      }
      set
      {
        this.extraUpdates = value - 1;
      }
    }

    public NPC OwnerMinionAttackTargetNPC
    {
      get
      {
        if (Main.player[this.owner].MinionAttackTargetNPC < 0)
          return (NPC) null;
        return Main.npc[Main.player[this.owner].MinionAttackTargetNPC];
      }
    }

    public static void InitializeStaticThings()
    {
      Projectile.perIDStaticNPCImmunity = new uint[714][];
      for (int index = 0; index < Projectile.perIDStaticNPCImmunity.Length; ++index)
        Projectile.perIDStaticNPCImmunity[index] = new uint[200];
      WorldGen.Hooks.OnWorldLoad += new Action(Projectile.ResetImmunity);
    }

    public static void ResetImmunity()
    {
      for (int index1 = 0; index1 < 714; ++index1)
      {
        for (int index2 = 0; index2 < 200; ++index2)
          Projectile.perIDStaticNPCImmunity[index1][index2] = 0U;
      }
    }

    public static bool IsNPCImmune(int projectileType, int npcIndex)
    {
      return Projectile.perIDStaticNPCImmunity[projectileType][npcIndex] <= Main.GameUpdateCount;
    }

    public bool TurretShouldPersist()
    {
      int type = this.type;
      switch (type)
      {
        case 663:
        case 665:
        case 667:
          return DD2Event.Ongoing;
        case 664:
        case 666:
          return false;
        default:
          if ((uint) (type - 677) <= 2U || (uint) (type - 688) <= 5U)
            goto case 663;
          else
            goto case 664;
      }
    }

    public void SetDefaults(int Type)
    {
      this.ownerHitCheckDistance = 1000f;
      this.counterweight = false;
      this.sentry = false;
      this.arrow = false;
      this.bobber = false;
      this.numHits = 0;
      this.netImportant = false;
      this.manualDirectionChange = false;
      this.localNPCHitCooldown = -2;
      this.idStaticNPCHitCooldown = -1;
      this.usesLocalNPCImmunity = false;
      this.usesIDStaticNPCImmunity = false;
      int newSize = 10;
      if (Type >= 0)
        newSize = ProjectileID.Sets.TrailCacheLength[Type];
      if (newSize != this.oldPos.Length)
      {
        Array.Resize<Vector2>(ref this.oldPos, newSize);
        Array.Resize<float>(ref this.oldRot, newSize);
        Array.Resize<int>(ref this.oldSpriteDirection, newSize);
      }
      for (int index = 0; index < this.oldPos.Length; ++index)
      {
        this.oldPos[index].X = 0.0f;
        this.oldPos[index].Y = 0.0f;
        this.oldRot[index] = 0.0f;
        this.oldSpriteDirection[index] = 0;
      }
      for (int index = 0; index < Projectile.maxAI; ++index)
      {
        this.ai[index] = 0.0f;
        this.localAI[index] = 0.0f;
      }
      for (int index = 0; index < (int) byte.MaxValue; ++index)
        this.playerImmune[index] = 0;
      for (int index = 0; index < 200; ++index)
        this.localNPCImmunity[index] = 0;
      this.noDropItem = false;
      this.minion = false;
      this.minionSlots = 0.0f;
      this.soundDelay = 0;
      this.spriteDirection = 1;
      this.melee = false;
      this.ranged = false;
      this.thrown = false;
      this.magic = false;
      this.ownerHitCheck = false;
      this.hide = false;
      this.lavaWet = false;
      this.wetCount = (byte) 0;
      this.wet = false;
      this.ignoreWater = false;
      this.hostile = false;
      this.netUpdate = false;
      this.netUpdate2 = false;
      this.netSpam = 0;
      this.numUpdates = 0;
      this.extraUpdates = 0;
      this.identity = 0;
      this.restrikeDelay = 0;
      this.light = 0.0f;
      this.penetrate = 1;
      this.tileCollide = true;
      this.position = Vector2.Zero;
      this.velocity = Vector2.Zero;
      this.aiStyle = 0;
      this.alpha = 0;
      this.glowMask = (short) -1;
      this.type = Type;
      this.active = true;
      this.rotation = 0.0f;
      this.scale = 1f;
      this.owner = (int) byte.MaxValue;
      this.timeLeft = 3600;
      this.friendly = false;
      this.damage = 0;
      this.knockBack = 0.0f;
      this.miscText = "";
      this.coldDamage = false;
      this.noEnchantments = false;
      this.trap = false;
      this.npcProj = false;
      this.projUUID = -1;
      this.frame = 0;
      this.frameCounter = 0;
      if (this.type == 1)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 2)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
      }
      else if (this.type == 3)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 4;
        this.thrown = true;
      }
      else if (this.type == 4)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 0.35f;
        this.penetrate = 5;
        this.ranged = true;
      }
      else if (this.type == 5)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 0.4f;
        this.penetrate = -1;
        this.timeLeft = 120;
        this.alpha = 100;
        this.ignoreWater = true;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 6)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.4f;
      }
      else if (this.type == 7 || this.type == 8)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 4;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 9)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = 2;
        this.alpha = 50;
        this.scale = 0.8f;
        this.tileCollide = false;
        this.melee = true;
      }
      else if (this.type == 10)
      {
        this.width = 64;
        this.height = 64;
        this.aiStyle = 6;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 11)
      {
        this.width = 48;
        this.height = 48;
        this.aiStyle = 6;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 12)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = 50;
        this.light = 1f;
      }
      else if (this.type == 13)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 14)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 15)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
      }
      else if (this.type == 16)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 9;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
      }
      else if (this.type == 17)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.ignoreWater = true;
      }
      else if (this.type == 18)
      {
        this.netImportant = true;
        this.width = 32;
        this.height = 32;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.alpha = 150;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 19)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.light = 1f;
        this.melee = true;
      }
      else if (this.type == 20)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.4f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 21)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.scale = 1.2f;
        this.friendly = true;
        this.thrown = true;
      }
      else if (this.type == 22)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 12;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 23)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
      }
      else if (this.type == 24)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.friendly = true;
        this.penetrate = 6;
        this.thrown = true;
      }
      else if (this.type == 25)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.8f;
      }
      else if (this.type == 26)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.8f;
      }
      else if (this.type == 27)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = this.timeLeft / 2;
        this.penetrate = 10;
        this.magic = true;
      }
      else if (this.type == 28)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 29)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 30)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.thrown = true;
      }
      else if (this.type == 31)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 32)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 33)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 3;
        this.friendly = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 34)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 9;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.penetrate = 1;
        this.magic = true;
      }
      else if (this.type == 35)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.8f;
      }
      else if (this.type == 36)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 2;
        this.light = 0.6f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.4f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 37)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 38)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 0;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
      }
      else if (this.type == 39)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 40)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 41)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
        this.light = 0.3f;
      }
      else if (this.type == 42)
      {
        this.knockBack = 8f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 43)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
      }
      else if (this.type == 44)
      {
        this.width = 48;
        this.height = 48;
        this.alpha = 100;
        this.light = 0.2f;
        this.aiStyle = 18;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = true;
        this.scale = 0.9f;
      }
      else if (this.type == 45)
      {
        this.width = 48;
        this.height = 48;
        this.alpha = 100;
        this.light = 0.2f;
        this.aiStyle = 18;
        this.friendly = true;
        this.penetrate = 5;
        this.tileCollide = true;
        this.scale = 0.9f;
        this.magic = true;
      }
      else if (this.type == 46)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 47)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 48)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 2;
        this.thrown = true;
      }
      else if (this.type == 49)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.2f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 50)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 51)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.friendly = true;
      }
      else if (this.type == 52)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 53)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft = this.timeLeft * 5;
        this.tileCollide = false;
      }
      else if (this.type == 54)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 2;
        this.thrown = true;
      }
      else if (this.type == 55)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 0;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
      }
      else if (this.type == 56)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 57)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 58)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.08f;
      }
      else if (this.type == 59)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.9f;
      }
      else if (this.type == 60)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.9f;
      }
      else if (this.type == 61)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.16f;
      }
      else if (this.type == 62)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.9f;
      }
      else if (this.type == 63)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 64)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.25f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 65)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 66)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.27f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 67)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 68)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 69)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 70)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 621)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 71)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 72)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 73 || this.type == 74)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
        this.light = 0.4f;
      }
      else if (this.type == 75)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 76 || this.type == 77 || this.type == 78)
      {
        if (this.type == 76)
        {
          this.width = 10;
          this.height = 22;
        }
        else if (this.type == 77)
        {
          this.width = 18;
          this.height = 24;
        }
        else
        {
          this.width = 22;
          this.height = 24;
        }
        this.aiStyle = 21;
        this.friendly = true;
        this.ranged = true;
        this.alpha = 100;
        this.light = 0.3f;
        this.penetrate = -1;
        this.timeLeft = 180;
        this.magic = true;
      }
      else if (this.type == 79)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 9;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
      }
      else if (this.type == 80)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 22;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.light = 0.5f;
        this.coldDamage = true;
      }
      else if (this.type == 81)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ranged = true;
      }
      else if (this.type == 82)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ranged = true;
      }
      else if (this.type == 83)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.7f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 84)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 85)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 23;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 3;
        this.extraUpdates = 2;
        this.ranged = true;
      }
      else if (this.type == 86)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 87)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 11;
        this.friendly = true;
        this.light = 0.9f;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 88)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 4;
        this.scale = 1.4f;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 89)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 90)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 24;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = 50;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.tileCollide = false;
      }
      else if (this.type == 91)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 92)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = 2;
        this.alpha = 50;
        this.scale = 0.8f;
        this.tileCollide = false;
        this.ranged = true;
      }
      else if (this.type == 93)
      {
        this.light = 0.15f;
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 2;
        this.magic = true;
      }
      else if (this.type == 94)
      {
        this.ignoreWater = true;
        this.width = 8;
        this.height = 8;
        this.aiStyle = 24;
        this.friendly = true;
        this.light = 0.5f;
        this.alpha = 50;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.magic = true;
        this.tileCollide = true;
        this.penetrate = 1;
      }
      else if (this.type == 95)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
        this.penetrate = 2;
      }
      else if (this.type == 96)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.hostile = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
        this.penetrate = -1;
        this.scale = 0.9f;
        this.scale = 1.3f;
      }
      else if (this.type == 97)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 98)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 99)
      {
        this.width = 31;
        this.height = 31;
        this.aiStyle = 25;
        this.friendly = true;
        this.hostile = true;
        this.ranged = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 100)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.8f;
        this.timeLeft = 2700;
        this.magic = true;
      }
      else if (this.type == 101)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 23;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 3;
        this.magic = true;
      }
      else if (this.type == 102)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 103)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
      }
      else if (this.type == 104)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 105)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.3f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 106)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.4f;
      }
      else if (this.type == 107)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.1f;
      }
      else if (this.type == 108)
      {
        this.width = 260;
        this.height = 260;
        this.aiStyle = 16;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 2;
        this.trap = true;
      }
      else if (this.type == 109)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.hostile = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.coldDamage = true;
        this.thrown = true;
      }
      else if (this.type == 110)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 111)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 112)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 113)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.light = 0.4f;
        this.coldDamage = true;
      }
      else if (this.type == 114)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.magic = true;
        this.penetrate = 3;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 115)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.hostile = true;
        this.magic = true;
        this.penetrate = -1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 116)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 117)
      {
        this.arrow = true;
        this.extraUpdates = 2;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 118)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.penetrate = 1;
        this.friendly = true;
        this.coldDamage = true;
      }
      else if (this.type == 119)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == 120)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.coldDamage = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 121)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 122)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 123)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 124)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == 125)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == 126)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == (int) sbyte.MaxValue)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 22;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 128)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.coldDamage = true;
      }
      else if (this.type == 129)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.tileCollide = false;
      }
      else if (this.type == 130)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.2f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 131)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 30;
        this.friendly = true;
        this.penetrate = 1;
        this.tileCollide = false;
        this.melee = true;
        this.light = 0.5f;
      }
      else if (this.type == 132)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.penetrate = 3;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 133)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 134)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 135)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 136)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 137)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 138)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 139)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 140)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 141)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 142)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 143)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 144)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 145)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 146)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 147)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 148)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 149)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 31;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 150 || this.type == 151 || this.type == 152)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 4;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 153)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 154)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 0.8f;
      }
      else if (this.type == 155)
      {
        this.netImportant = true;
        this.width = 44;
        this.height = 44;
        this.aiStyle = 32;
        this.friendly = true;
      }
      else if (this.type == 156)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 157)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 27;
        this.melee = true;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.scale = 1.2f;
      }
      else if (this.type == 158)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 159)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 160)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 161)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 162)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 4;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 163)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 164)
      {
        this.width = 128;
        this.height = 128;
        this.aiStyle = 16;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 2;
      }
      else if (this.type == 165)
      {
        this.netImportant = true;
        this.width = 12;
        this.height = 12;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 166)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.ranged = true;
        this.coldDamage = true;
      }
      else if (this.type == 167 || this.type == 168 || (this.type == 169 || this.type == 170))
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 34;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 45;
      }
      else if (this.type == 171 || this.type == 505 || this.type == 506)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 35;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 400;
      }
      else if (this.type == 172)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
        this.coldDamage = true;
      }
      else if (this.type == 173)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 27;
        this.melee = true;
        this.penetrate = 1;
        this.light = 0.2f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 174)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.coldDamage = true;
      }
      else if (this.type == 175)
      {
        this.width = 34;
        this.height = 34;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 176)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 177)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
        this.coldDamage = true;
      }
      else if (this.type == 178)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.timeLeft = 2;
      }
      else if (this.type == 179)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 180)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 181)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 3;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.extraUpdates = 3;
      }
      else if (this.type == 182)
      {
        this.light = 0.15f;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = 10;
        this.melee = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 183)
      {
        this.width = 14;
        this.height = 22;
        this.aiStyle = 14;
        this.penetrate = 1;
        this.ranged = true;
        this.timeLeft = 180;
        this.thrown = true;
        this.friendly = true;
      }
      else if (this.type == 184)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 185)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 900;
        this.trap = true;
      }
      else if (this.type == 186)
      {
        this.width = 10;
        this.height = 14;
        this.aiStyle = 37;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 300;
        this.trap = true;
      }
      else if (this.type == 187)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 38;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.trap = true;
      }
      else if (this.type == 188)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 23;
        this.friendly = true;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.trap = true;
      }
      else if (this.type == 189)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 4;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
        this.extraUpdates = 3;
      }
      else if (this.type == 190)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 39;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
      }
      else if (this.type >= 191 && this.type <= 194)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 1f;
        if (this.type == 192)
          this.scale = 1.025f;
        if (this.type == 193)
          this.scale = 1.05f;
        if (this.type == 194)
          this.scale = 1.075f;
      }
      else if (this.type == 195)
      {
        this.tileCollide = false;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
      }
      else if (this.type == 196)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.scale = 0.8f;
      }
      else if (this.type == 197)
      {
        this.netImportant = true;
        this.width = 42;
        this.height = 42;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 198)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 199)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 200)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 201)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
      }
      else if (this.type == 202)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
      }
      else if (this.type == 203)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
      }
      else if (this.type == 204)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
      }
      else if (this.type == 205)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
      }
      else if (this.type == 206)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 40;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 207)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 208)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 36;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 209)
      {
        this.width = 12;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.light = 0.5f;
      }
      else if (this.type == 210)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 30;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 211)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.light = 1f;
        this.ignoreWater = true;
      }
      else if (this.type == 212)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.12f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 213)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.92f;
      }
      else if (this.type == 214)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 215)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.27f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 216)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.93f;
      }
      else if (this.type == 217)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.12f;
      }
      else if (this.type == 218)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.28f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 219)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 0.95f;
      }
      else if (this.type == 220)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.2f;
      }
      else if (this.type == 221)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 41;
        this.friendly = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.penetrate = -1;
        this.scale = (float) (1.0 + (double) Main.rand.Next(30) * 0.00999999977648258);
        this.extraUpdates = 2;
      }
      else if (this.type == 222)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.3f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 223)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1f;
      }
      else if (this.type == 224)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.1f;
      }
      else if (this.type == 225)
      {
        this.arrow = true;
        this.penetrate = 2;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 226)
      {
        this.netImportant = true;
        this.width = 22;
        this.height = 42;
        this.aiStyle = 42;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.light = 0.4f;
        this.ignoreWater = true;
      }
      else if (this.type == 227)
      {
        this.netImportant = true;
        this.tileCollide = false;
        this.light = 0.1f;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 43;
        this.friendly = true;
        this.penetrate = 1;
        this.timeLeft = 180;
      }
      else if (this.type == 228)
      {
        this.tileCollide = false;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 44;
        this.friendly = true;
        this.scale = 1.1f;
        this.penetrate = -1;
      }
      else if (this.type == 229)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 44;
        this.friendly = true;
        this.penetrate = -1;
        this.light = 0.2f;
      }
      else if (this.type >= 230 && this.type <= 235)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 236)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 34;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 237)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
      }
      else if (this.type == 238)
      {
        this.tileCollide = false;
        this.ignoreWater = true;
        this.width = 54;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
      }
      else if (this.type == 239)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 40;
        this.aiStyle = 45;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = 300;
        this.scale = 1.1f;
        this.magic = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 240)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 241)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 242)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 7;
        this.scale = 1.18f;
        this.timeLeft = 600;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 243)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
      }
      else if (this.type == 244)
      {
        this.tileCollide = false;
        this.ignoreWater = true;
        this.width = 54;
        this.height = 28;
        this.aiStyle = 45;
        this.penetrate = -1;
      }
      else if (this.type == 245)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 40;
        this.aiStyle = 45;
        this.friendly = true;
        this.penetrate = 2;
        this.timeLeft = 300;
        this.scale = 1.1f;
        this.magic = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 246)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
      }
      else if (this.type == 247)
      {
        this.width = 34;
        this.height = 34;
        this.aiStyle = 15;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 248)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 1;
        this.friendly = true;
        this.melee = true;
      }
      else if (this.type == 249)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 2;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 250)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 46;
        this.penetrate = -1;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.scale = 1.25f;
      }
      else if (this.type == 251)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 46;
        this.friendly = true;
        this.penetrate = -1;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.light = 0.3f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.scale = 1.25f;
      }
      else if (this.type == 252)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.1f;
      }
      else if (this.type == 253)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.light = 0.8f;
        this.alpha = 100;
        this.magic = true;
      }
      else if (this.type == 254)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 47;
        this.magic = true;
        this.timeLeft = 660;
        this.light = 0.5f;
      }
      else if (this.type == (int) byte.MaxValue)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 48;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 100;
      }
      else if (this.type == 256)
      {
        this.netImportant = true;
        this.tileCollide = false;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1f;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 257)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.magic = true;
        this.coldDamage = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 258)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = 100;
        this.timeLeft = 300;
      }
      else if (this.type == 259)
      {
        this.ignoreWater = true;
        this.tileCollide = false;
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.3f;
        this.scale = 1.1f;
        this.magic = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 260)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 48;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 200;
        this.penetrate = -1;
      }
      else if (this.type == 261)
      {
        this.width = 32;
        this.height = 34;
        this.aiStyle = 14;
        this.friendly = true;
        this.penetrate = 6;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 262)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 263)
      {
        this.width = 34;
        this.height = 34;
        this.alpha = 100;
        this.light = 0.5f;
        this.aiStyle = 18;
        this.friendly = true;
        this.penetrate = 5;
        this.tileCollide = true;
        this.scale = 1f;
        this.melee = true;
        this.timeLeft = 180;
        this.coldDamage = true;
      }
      else if (this.type == 264)
      {
        this.ignoreWater = true;
        this.width = 4;
        this.height = 40;
        this.aiStyle = 45;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 120;
        this.scale = 1.1f;
        this.extraUpdates = 1;
      }
      else if (this.type == 265)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.penetrate = 4;
      }
      else if (this.type == 266)
      {
        this.netImportant = true;
        this.alpha = 75;
        this.width = 24;
        this.height = 16;
        this.aiStyle = 26;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 1f;
      }
      else if (this.type == 267)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 268)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 32;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 269)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 270)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.penetrate = 3;
      }
      else if (this.type == 271)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.scale = 1.2f;
      }
      else if (this.type == 272)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 3;
        this.friendly = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 273)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
      }
      else if (this.type == 274)
      {
        this.width = 42;
        this.height = 42;
        this.alpha = 100;
        this.light = 0.5f;
        this.aiStyle = 18;
        this.friendly = true;
        this.penetrate = 5;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.melee = true;
        this.timeLeft = 180;
      }
      else if (this.type == 275)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
      }
      else if (this.type == 276)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
      }
      else if (this.type == 277)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 38;
        this.height = 38;
        this.aiStyle = 14;
        this.hostile = true;
      }
      else if (this.type == 278)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.light = 1f;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 279)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.25f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 280)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 12;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 5;
        this.extraUpdates = 2;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 281)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 49;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
      }
      else if (this.type == 282)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 283)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.25f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 284)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 285)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 286)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 287)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.light = 0.5f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.3f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 288)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 12;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.ignoreWater = true;
        this.magic = true;
      }
      else if (this.type == 289)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.timeLeft = 2;
      }
      else if (this.type == 290)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 48;
        this.hostile = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 100;
        this.penetrate = -1;
      }
      else if (this.type == 291)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 50;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 292)
      {
        this.width = 130;
        this.height = 130;
        this.aiStyle = 50;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 293)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 51;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 294)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 48;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 100;
        this.timeLeft = 300;
        this.penetrate = -1;
      }
      else if (this.type == 295)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 50;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = true;
      }
      else if (this.type == 296)
      {
        this.width = 150;
        this.height = 150;
        this.aiStyle = 50;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 297)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 51;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 298)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 52;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 3;
      }
      else if (this.type == 299)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.magic = true;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 300)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 2;
        this.hostile = true;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 301)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.extraUpdates = 2;
      }
      else if (this.type == 302)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.light = 0.3f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 7;
        this.scale = 1.18f;
        this.timeLeft = 300;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 303)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
        this.ranged = true;
      }
      else if (this.type == 304)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.melee = true;
        this.light = 0.2f;
        this.ignoreWater = true;
        this.extraUpdates = 0;
      }
      else if (this.type == 305)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 52;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.extraUpdates = 10;
      }
      else if (this.type == 306)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.melee = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 307)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 36;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.melee = true;
        this.extraUpdates = 3;
      }
      else if (this.type == 308)
      {
        this.width = 80;
        this.height = 74;
        this.aiStyle = 53;
        this.timeLeft = Projectile.SentryLifeTime;
        this.light = 0.25f;
        this.ignoreWater = true;
        this.coldDamage = true;
        this.sentry = true;
      }
      else if (this.type == 309)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 1;
        this.friendly = true;
        this.extraUpdates = 3;
        this.coldDamage = true;
      }
      else if (this.type == 310)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 33;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 36000;
      }
      else if (this.type == 311)
      {
        this.width = 10;
        this.height = 12;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 312)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 32;
        this.height = 32;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 300;
      }
      else if (this.type == 313)
      {
        this.netImportant = true;
        this.width = 30;
        this.height = 30;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 314)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 40;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 315)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 316)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 1;
        this.timeLeft = 600;
        this.magic = true;
      }
      else if (this.type == 317)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 54;
        this.penetrate = 1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 1f;
      }
      else if (this.type == 318)
      {
        this.width = 12;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.thrown = true;
      }
      else if (this.type == 319)
      {
        this.netImportant = true;
        this.width = 36;
        this.height = 30;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 320)
      {
        this.width = 34;
        this.height = 34;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 321)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 55;
        this.friendly = true;
        this.melee = true;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 322)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 323)
      {
        this.penetrate = 10;
        this.extraUpdates = 3;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.ranged = true;
        this.scale = 0.8f;
      }
      else if (this.type == 324)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 38;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 325)
      {
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
        this.tileCollide = false;
      }
      else if (this.type >= 326 && this.type <= 328)
      {
        if (this.type == 326)
        {
          this.width = 14;
          this.height = 16;
        }
        else if (this.type == 327)
        {
          this.width = 12;
          this.height = 14;
        }
        else
        {
          this.width = 6;
          this.height = 12;
        }
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 360;
      }
      else if (this.type == 329)
      {
        this.width = 80;
        this.height = 80;
        this.light = 0.25f;
        this.aiStyle = 56;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 420;
      }
      else if (this.type == 330)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 6;
        this.thrown = true;
      }
      else if (this.type == 331)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 332)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
        this.light = 0.5f;
      }
      else if (this.type == 333)
      {
        this.width = 38;
        this.height = 38;
        this.aiStyle = 3;
        this.friendly = true;
        this.scale = 0.9f;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 334)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 335)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.melee = true;
      }
      else if (this.type == 336)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.scale = 0.8f;
        this.extraUpdates = 1;
      }
      else if (this.type == 337)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.coldDamage = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 338 || this.type == 339 || (this.type == 340 || this.type == 341))
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.penetrate = -1;
        this.friendly = true;
        this.ranged = true;
        this.scale = 0.9f;
      }
      else if (this.type == 342)
      {
        this.width = 22;
        this.height = 2;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.coldDamage = true;
      }
      else if (this.type == 343)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 57;
        this.friendly = true;
        this.melee = true;
        this.scale = 1.1f;
        this.penetrate = 3;
        this.coldDamage = true;
      }
      else if (this.type == 344)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 1;
        this.friendly = true;
        this.scale = 0.9f;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.coldDamage = true;
        this.tileCollide = false;
      }
      else if (this.type == 345)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.scale = 0.8f;
      }
      else if (this.type == 346)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 300;
      }
      else if (this.type == 347)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 2;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 348)
      {
        this.aiStyle = 1;
        this.width = 48;
        this.height = 48;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.coldDamage = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 349)
      {
        this.aiStyle = 1;
        this.width = 12;
        this.height = 12;
        this.hostile = true;
        this.penetrate = -1;
        this.coldDamage = true;
      }
      else if (this.type == 350)
      {
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.hostile = true;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft / 2;
      }
      else if (this.type == 351)
      {
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 58;
        this.hostile = true;
        this.tileCollide = false;
      }
      else if (this.type == 352)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft / 3;
      }
      else if (this.type == 353)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 28;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 354)
      {
        this.knockBack = 6f;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 10;
        this.friendly = true;
        this.penetrate = -1;
        this.extraUpdates = 1;
      }
      else if (this.type == 355)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.penetrate = 7;
      }
      else if (this.type == 356)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 59;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 3;
      }
      else if (this.type == 357)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 6;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 358)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 60;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.ignoreWater = true;
      }
      else if (this.type == 359)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 28;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
        this.coldDamage = true;
      }
      else if (this.type >= 360 && this.type <= 366 || (this.type == 381 || this.type == 382))
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 61;
        this.penetrate = -1;
        this.bobber = true;
      }
      else if (this.type == 367)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.scale = 1.1f;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 368)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 19;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 369)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 370)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 371)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
      }
      else if (this.type == 372)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 373)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 26;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 374)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 0;
        this.friendly = true;
        this.penetrate = 1;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.scale = this.scale * 0.9f;
      }
      else if (this.type == 375)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 26;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 376)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 0;
        this.friendly = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.timeLeft = 100;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
      }
      else if (this.type == 377)
      {
        this.width = 66;
        this.height = 50;
        this.aiStyle = 53;
        this.timeLeft = Projectile.SentryLifeTime;
        this.ignoreWater = true;
        this.sentry = true;
      }
      else if (this.type == 378)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 14;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = 60;
        this.scale = 0.9f;
      }
      else if (this.type == 379)
      {
        this.width = 14;
        this.height = 10;
        this.aiStyle = 63;
        this.friendly = true;
        this.timeLeft = 300;
        this.penetrate = 1;
      }
      else if (this.type == 380)
      {
        this.netImportant = true;
        this.width = 26;
        this.height = 26;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 383)
      {
        this.width = 34;
        this.height = 34;
        this.aiStyle = 3;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
      }
      else if (this.type == 384)
      {
        this.width = 150;
        this.height = 42;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 64;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 540;
      }
      else if (this.type == 385)
      {
        this.width = 30;
        this.height = 30;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 65;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 300;
      }
      else if (this.type == 386)
      {
        this.width = 150;
        this.height = 42;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 64;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 840;
      }
      else if (this.type == 387)
      {
        this.netImportant = true;
        this.width = 40;
        this.height = 20;
        this.aiStyle = 66;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 0.5f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.friendly = true;
      }
      else if (this.type == 388)
      {
        this.netImportant = true;
        this.width = 40;
        this.height = 20;
        this.aiStyle = 66;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 0.5f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.friendly = true;
      }
      else if (this.type == 389)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 3;
        this.light = 0.75f;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
      }
      else if (this.type == 390 || this.type == 391 || this.type == 392)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 26;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 0.75f;
        int type = this.type;
        if (this.type != 392)
          ;
      }
      else if (this.type == 393 || this.type == 394 || this.type == 395)
      {
        this.width = 20;
        this.height = 30;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 1f;
        int type = this.type;
        if (this.type != 395)
          ;
      }
      else if (this.type == 396)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
        this.alpha = 100;
      }
      else if (this.type == 397)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.thrown = true;
        this.tileCollide = false;
      }
      else if (this.type == 398)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 38;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 399)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 68;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.thrown = true;
        this.noEnchantments = true;
      }
      else if (this.type >= 400 && this.type <= 402)
      {
        if (this.type == 400)
        {
          this.width = 14;
          this.height = 16;
        }
        else if (this.type == 401)
        {
          this.width = 12;
          this.height = 14;
        }
        else
        {
          this.width = 6;
          this.height = 12;
        }
        this.penetrate = 3;
        this.aiStyle = 14;
        this.friendly = true;
        this.timeLeft = 360;
        this.ranged = true;
        this.noEnchantments = true;
      }
      else if (this.type == 403)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 404)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 69;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
      }
      else if (this.type == 405)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 70;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 90;
        this.melee = true;
        this.noEnchantments = true;
      }
      else if (this.type == 406)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 60;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.extraUpdates = 2;
        this.ignoreWater = true;
      }
      else if (this.type == 407)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 40;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 408)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 409)
      {
        this.width = 30;
        this.height = 30;
        this.penetrate = -1;
        this.aiStyle = 71;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 360;
        this.friendly = true;
        this.tileCollide = true;
        this.extraUpdates = 2;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 410)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 72;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 50;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type >= 411 && this.type <= 414)
      {
        switch (this.type)
        {
          default:
            this.width = 10;
            this.height = 10;
            this.aiStyle = 10;
            break;
        }
      }
      else if (this.type == 415 || this.type == 416 || (this.type == 417 || this.type == 418))
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 34;
        this.friendly = true;
        this.ranged = true;
        this.timeLeft = 45;
      }
      else if (this.type >= 419 && this.type <= 422)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 73;
        this.friendly = true;
      }
      else if (this.type == 423)
      {
        this.netImportant = true;
        this.width = 28;
        this.height = 28;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 1f;
        this.ignoreWater = true;
      }
      else if (this.type >= 424 && this.type <= 426)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 2;
      }
      else if (this.type == 427)
      {
        this.width = 22;
        this.height = 56;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 2;
      }
      else if (this.type == 428)
      {
        this.width = 26;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 3;
      }
      else if (this.type == 429)
      {
        this.width = 18;
        this.height = 56;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 7;
      }
      else if (this.type == 430)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 8;
      }
      else if (this.type == 431)
      {
        this.width = 28;
        this.height = 64;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 432)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
      }
      else if (this.type == 610)
      {
        this.width = 28;
        this.height = 64;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 179;
      }
      else if (this.type == 609)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.glowMask = (short) 180;
      }
      else if (this.type == 433)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 48;
        this.friendly = true;
        this.extraUpdates = 100;
        this.timeLeft = 100;
        this.ignoreWater = true;
      }
      else if (this.type == 434)
      {
        this.width = 1;
        this.height = 1;
        this.aiStyle = 74;
        this.friendly = true;
        this.extraUpdates = 100;
        this.penetrate = -1;
      }
      else if (this.type == 435)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ignoreWater = true;
      }
      else if (this.type == 436)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ignoreWater = true;
      }
      else if (this.type == 437)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.extraUpdates = 2;
        this.ignoreWater = true;
      }
      else if (this.type == 438)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 3;
        this.ignoreWater = true;
      }
      else if (this.type == 439)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 440)
      {
        this.width = 5;
        this.height = 5;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1f;
        this.timeLeft = 600;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 441)
      {
        this.width = 1;
        this.height = 1;
        this.aiStyle = 76;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 442)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.timeLeft = 600;
        this.ranged = true;
      }
      else if (this.type == 443)
      {
        this.width = 80;
        this.height = 80;
        this.aiStyle = 77;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.ranged = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 444)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 78;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.ranged = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 445)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.melee = true;
        this.ignoreWater = true;
        this.ownerHitCheck = true;
      }
      else if (this.type == 446)
      {
        this.netImportant = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
        this.light = 0.7f;
      }
      else if (this.type == 447)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 79;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 240;
      }
      else if (this.type == 448)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 80;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 449)
      {
        this.width = 5;
        this.height = 5;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
        this.scale = 1f;
        this.timeLeft = 600;
        this.ignoreWater = true;
      }
      else if (this.type == 450)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 360;
      }
      else if (this.type == 451)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 81;
        this.melee = true;
        this.penetrate = 3;
        this.light = 0.2f;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
      }
      else if (this.type == 452)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 82;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
      }
      else if (this.type == 453)
      {
        this.width = 1;
        this.height = 1;
        this.aiStyle = 76;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 454)
      {
        this.width = 46;
        this.height = 46;
        this.aiStyle = 83;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 455)
      {
        this.width = 36;
        this.height = 36;
        this.aiStyle = 84;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 456)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 85;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 459)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 1f;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 460)
      {
        this.width = 14;
        this.height = 18;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 461)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 84;
        this.friendly = true;
        this.magic = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.hide = true;
      }
      else if (this.type == 462)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 3;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 463)
      {
        this.width = 48;
        this.height = 48;
        this.aiStyle = 6;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 464)
      {
        this.width = 60;
        this.height = 60;
        this.aiStyle = 86;
        this.hostile = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
      }
      else if (this.type == 467)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 468)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 465)
      {
        this.width = 80;
        this.height = 80;
        this.aiStyle = 88;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 466)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 88;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = true;
        this.extraUpdates = 4;
        this.timeLeft = 120 * (this.extraUpdates + 1);
      }
      else if (this.type == 491)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 9;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
      }
      else if (this.type == 500)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft = this.timeLeft * 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 499)
      {
        this.netImportant = true;
        this.width = 34;
        this.height = 34;
        this.aiStyle = 26;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 469)
      {
        this.alpha = (int) byte.MaxValue;
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 470)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 471)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 2;
        this.scale = 1.2f;
        this.hostile = true;
        this.ranged = true;
      }
      else if (this.type == 472)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 0;
        this.hostile = true;
        this.penetrate = -1;
        this.aiStyle = 1;
        this.tileCollide = true;
        this.timeLeft = 50;
      }
      else if (this.type == 474)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 473)
      {
        this.netImportant = true;
        this.width = 8;
        this.height = 8;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft = this.timeLeft * 2;
      }
      else if (this.type == 475)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 35;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 400;
      }
      else if (this.type == 476)
      {
        this.width = 200;
        this.height = 200;
        this.aiStyle = -1;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 3;
      }
      else if (this.type == 477)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 7;
        this.extraUpdates = 1;
        this.ranged = true;
      }
      else if (this.type == 478)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.timeLeft = 300;
        this.ranged = true;
      }
      else if (this.type == 479)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 480)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 12;
        this.height = 12;
        this.penetrate = 3;
        this.aiStyle = 14;
        this.friendly = true;
        this.timeLeft = 120;
        this.ranged = true;
        this.noEnchantments = true;
      }
      else if (this.type == 481)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 13;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.melee = true;
        this.extraUpdates = 0;
      }
      else if (this.type == 482)
      {
        this.width = 16;
        this.height = 200;
        this.aiStyle = 87;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = 20;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 2700;
      }
      else if (this.type == 483)
      {
        this.arrow = true;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 14;
        this.friendly = true;
        this.melee = true;
      }
      else if (this.type == 484)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.melee = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 485)
      {
        this.arrow = true;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = -1;
      }
      else if (this.type >= 486 && this.type <= 489)
      {
        if (this.type == 486)
        {
          this.width = 12;
          this.height = 12;
        }
        else if (this.type == 487)
        {
          this.width = 22;
          this.height = 22;
        }
        else if (this.type == 488)
        {
          this.width = 12;
          this.height = 12;
          this.light = 0.3f;
        }
        else if (this.type == 489)
        {
          this.width = 20;
          this.height = 16;
        }
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 492)
      {
        this.netImportant = true;
        this.width = 18;
        this.height = 32;
        this.aiStyle = 90;
        this.friendly = true;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 490)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 89;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.timeLeft = 600;
        this.netImportant = true;
      }
      else if (this.type == 493 || this.type == 494)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 4;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.magic = true;
        this.light = 0.2f;
      }
      else if (this.type == 495)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.penetrate = 3;
      }
      else if (this.type == 496)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 40;
        this.height = 40;
        this.aiStyle = 91;
        this.friendly = true;
        this.magic = true;
        this.MaxUpdates = 3;
        this.penetrate = 3;
      }
      else if (this.type == 497)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 3;
        this.melee = true;
      }
      else if (this.type == 498)
      {
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 180;
      }
      else if (this.type == 501)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 2;
        this.scale = 1.1f;
        this.hostile = true;
        this.ranged = true;
      }
      else if (this.type == 502)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 8;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 5;
      }
      else if (this.type == 503)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 5;
        this.friendly = true;
        this.penetrate = 2;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.melee = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 504)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 2;
      }
      else if (this.type == 507)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.friendly = true;
        this.melee = true;
        this.penetrate = 3;
      }
      else if (this.type == 508)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 509)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 20;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ownerHitCheck = true;
        this.melee = true;
        this.scale = 1.2f;
      }
      else if (this.type == 510)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 1;
        this.magic = true;
      }
      else if (this.type == 511)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 92;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1.1f;
        this.magic = true;
      }
      else if (this.type == 512)
      {
        this.width = 40;
        this.height = 38;
        this.aiStyle = 92;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1.1f;
        this.magic = true;
      }
      else if (this.type == 513)
      {
        this.width = 30;
        this.height = 28;
        this.aiStyle = 92;
        this.friendly = true;
        this.penetrate = -1;
        this.scale = 1.1f;
        this.magic = true;
      }
      else if (this.type == 514)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 93;
        this.friendly = true;
        this.penetrate = 3;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
      }
      else if (this.type == 515)
      {
        this.netImportant = true;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 14;
        this.penetrate = -1;
        this.alpha = 75;
        this.light = 1f;
        this.timeLeft = this.timeLeft * 5;
      }
      else if (this.type == 516)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 517)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.thrown = true;
      }
      else if (this.type == 518)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 94;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 519)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
      }
      else if (this.type == 520)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 3;
        this.thrown = true;
      }
      else if (this.type == 521)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 522)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 523)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 95;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 524)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 96;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.ignoreWater = true;
        this.melee = true;
        this.extraUpdates = 5;
      }
      else if (this.type == 525)
      {
        this.width = 30;
        this.height = 24;
        this.aiStyle = 97;
        this.tileCollide = false;
        this.timeLeft = 10800;
      }
      else if (this.type == 526)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 98;
        this.tileCollide = false;
        this.timeLeft = 120;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type >= 527 && this.type <= 531)
      {
        this.knockBack = 12f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 17;
        this.penetrate = -1;
      }
      else if (this.type == 532)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.scale = 1f;
        this.friendly = true;
        this.thrown = true;
        this.penetrate = 3;
        this.extraUpdates = 1;
      }
      else if (this.type == 533)
      {
        this.netImportant = true;
        this.width = 20;
        this.height = 20;
        this.aiStyle = 66;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.minionSlots = 1f;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.friendly = true;
      }
      else if (this.type == 534)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
      }
      else if (this.type >= 541 && this.type <= 555)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
        if (this.type == 547)
          this.scale = 1.1f;
        if (this.type == 554)
          this.scale = 1.2f;
        if (this.type == 555)
          this.scale = 1.15f;
        if (this.type == 551 || this.type == 550)
          this.scale = 1.1f;
      }
      else if (this.type >= 562 && this.type <= 564)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
        if (this.type == 563)
          this.scale = 1.05f;
        if (this.type == 564)
          this.scale = 1.075f;
      }
      else if (this.type == 603)
      {
        this.extraUpdates = 0;
        this.width = 16;
        this.height = 16;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1.15f;
      }
      else if (this.type == 604)
      {
        this.extraUpdates = 0;
        this.width = 14;
        this.height = 14;
        this.aiStyle = 115;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1.2f;
      }
      else if (this.type >= 556 && this.type <= 561)
      {
        this.extraUpdates = 0;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 99;
        this.friendly = true;
        this.penetrate = -1;
        this.melee = true;
        this.scale = 1f;
        this.counterweight = true;
      }
      else if (this.type == 535)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 100;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 536)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 101;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 537)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 84;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 240;
        this.tileCollide = false;
      }
      else if (this.type == 538)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 14;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 120;
        this.extraUpdates = 1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 539)
      {
        this.width = 18;
        this.height = 30;
        this.aiStyle = 102;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 600;
      }
      else if (this.type == 540)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 103;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 300;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 565)
      {
        this.width = 28;
        this.height = 28;
        this.aiStyle = 104;
        this.penetrate = -1;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.scale = 0.8f;
      }
      else if (this.type == 566)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 36;
        this.friendly = true;
        this.penetrate = 4;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 660;
        this.extraUpdates = 3;
      }
      else if (this.type == 567 || this.type == 568)
      {
        if (this.type == 567)
        {
          this.width = 14;
          this.height = 14;
        }
        else
        {
          this.width = 16;
          this.height = 16;
        }
        this.aiStyle = 105;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 3600;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type >= 569 && this.type <= 571)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 106;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 3600;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 575)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 107;
        this.hostile = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = 420;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 573)
      {
        this.width = 18;
        this.height = 30;
        this.aiStyle = 102;
        this.hostile = true;
        this.penetrate = -1;
        this.timeLeft = 600;
      }
      else if (this.type == 574)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 102;
        this.hostile = true;
        this.timeLeft = 600;
        this.tileCollide = false;
      }
      else if (this.type == 572)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 576)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
      }
      else if (this.type == 577)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1.2f;
        this.timeLeft = 600;
      }
      else if (this.type == 578 || this.type == 579)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 108;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.hostile = true;
        this.hide = true;
      }
      else if (this.type == 580)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 88;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.tileCollide = true;
        this.extraUpdates = 4;
        this.timeLeft = 600;
      }
      else if (this.type == 581)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 582)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 109;
        this.friendly = true;
        this.penetrate = -1;
        this.MaxUpdates = 2;
      }
      else if (this.type == 583)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
        this.scale = 0.8f;
      }
      else if (this.type == 589)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 2;
        this.friendly = true;
      }
      else if (this.type == 584)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 110;
        this.friendly = true;
        this.scale = 0.8f;
        this.penetrate = 3;
      }
      else if (this.type == 585)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.penetrate = 3;
      }
      else if (this.type == 586)
      {
        this.width = 26;
        this.height = 26;
        this.aiStyle = 111;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 587)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.ranged = true;
      }
      else if (this.type == 588)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
        this.thrown = true;
      }
      else if (this.type == 590)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 112;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 900;
        this.tileCollide = false;
        this.ignoreWater = true;
      }
      else if (this.type == 591)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 101;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ignoreWater = true;
      }
      else if (this.type == 592)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 3;
        this.ignoreWater = true;
      }
      else if (this.type == 593)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 1;
        this.ignoreWater = true;
      }
      else if (this.type == 594)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
      }
      else if (this.type == 595)
      {
        this.width = 68;
        this.height = 64;
        this.aiStyle = 75;
        this.friendly = true;
        this.tileCollide = false;
        this.melee = true;
        this.penetrate = -1;
        this.ownerHitCheck = true;
      }
      else if (this.type == 596)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 107;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 180;
        this.tileCollide = false;
      }
      else if (this.type == 597)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 2;
        this.friendly = true;
      }
      else if (this.type == 598)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
      }
      else if (this.type == 599)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 2;
        this.friendly = true;
        this.penetrate = 6;
        this.thrown = true;
      }
      else if (this.type == 600)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ignoreWater = true;
      }
      else if (this.type == 601)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.extraUpdates = 30;
      }
      else if (this.type == 602)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 114;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.tileCollide = false;
        this.netImportant = true;
      }
      else if (this.type == 605)
      {
        this.alpha = (int) byte.MaxValue;
        this.width = 6;
        this.height = 6;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 606)
      {
        this.width = 5;
        this.height = 5;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
        this.scale = 1f;
        this.timeLeft = 600;
        this.ignoreWater = true;
      }
      else if (this.type == 607)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 116;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 608)
      {
        this.width = 160;
        this.height = 160;
        this.aiStyle = 117;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 3;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.hide = true;
      }
      else if (this.type == 611)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 75;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 612)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 117;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 613)
      {
        this.netImportant = true;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 62;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 1f;
        this.ignoreWater = true;
      }
      else if (this.type == 614)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 615)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 616)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.ranged = true;
        this.extraUpdates = 2;
        this.timeLeft = 90 * this.MaxUpdates;
      }
      else if (this.type == 617)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 118;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.hide = true;
        this.magic = true;
        this.penetrate = 3;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 618)
      {
        this.tileCollide = false;
        this.width = 18;
        this.height = 30;
        this.aiStyle = 119;
        this.penetrate = -1;
        this.timeLeft = 420;
        this.magic = true;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 619)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 620)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 29;
        this.alpha = (int) byte.MaxValue;
        this.magic = true;
        this.penetrate = 1;
        this.friendly = true;
      }
      else if (this.type == 622)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 2;
      }
      else if (this.type == 623)
      {
        this.netImportant = true;
        this.width = 50;
        this.height = 80;
        this.aiStyle = 120;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.friendly = true;
        this.minionSlots = 0.0f;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.netImportant = true;
      }
      else if (this.type == 624)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 117;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 60;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type >= 625 && this.type <= 628)
      {
        if (this.type == 625 || this.type == 628)
          this.netImportant = true;
        if (this.type == 626 || this.type == 627)
          this.minionSlots = 0.5f;
        this.width = 24;
        this.height = 24;
        this.aiStyle = 121;
        this.penetrate = -1;
        this.timeLeft = this.timeLeft * 5;
        this.minion = true;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.netImportant = true;
      }
      else if (this.type == 629)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 122;
        this.hostile = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 3600;
        this.tileCollide = false;
        this.penetrate = -1;
        this.extraUpdates = 2;
      }
      else if (this.type == 630 || this.type == 705)
      {
        this.width = 22;
        this.height = 22;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.hide = true;
        this.ranged = true;
        this.ignoreWater = true;
      }
      else if (this.type == 631)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 122;
        this.friendly = true;
        this.ranged = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 633)
      {
        this.width = 14;
        this.height = 18;
        this.aiStyle = 75;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 632)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 84;
        this.friendly = true;
        this.magic = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
      }
      else if (this.type == 634)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 2;
        this.magic = true;
      }
      else if (this.type == 635)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.extraUpdates = 3;
        this.magic = true;
      }
      else if (this.type == 636)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 113;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.MaxUpdates = 2;
      }
      else if (this.type == 637)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 16;
        this.friendly = true;
        this.penetrate = -1;
      }
      else if (this.type == 638)
      {
        this.width = 4;
        this.height = 4;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.extraUpdates = 5;
        this.timeLeft = 600;
        this.ranged = true;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.penetrate = -1;
      }
      else if (this.type == 639)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.MaxUpdates = 2;
        this.timeLeft = this.MaxUpdates * 45;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 4;
      }
      else if (this.type == 640)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.MaxUpdates = 3;
        this.timeLeft = 90;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = 4;
      }
      else if (this.type == 642)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 84;
        this.friendly = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 641)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 123;
        this.timeLeft = Projectile.SentryLifeTime;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.sentry = true;
      }
      else if (this.type == 643)
      {
        this.width = 32;
        this.height = 32;
        this.aiStyle = 123;
        this.timeLeft = Projectile.SentryLifeTime;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.alpha = (int) byte.MaxValue;
        this.sentry = true;
      }
      else if (this.type == 644)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 112;
        this.penetrate = 1;
        this.timeLeft = 900;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
      }
      else if (this.type == 645)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.extraUpdates = 5;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type >= 646 && this.type <= 649)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 650)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 124;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft = this.timeLeft * 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 651)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 125;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 652)
      {
        this.width = 18;
        this.height = 18;
        this.aiStyle = 7;
        this.friendly = true;
        this.penetrate = -1;
        this.tileCollide = false;
        this.timeLeft = this.timeLeft * 10;
      }
      else if (this.type == 653)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 67;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft = this.timeLeft * 5;
        this.friendly = true;
        this.ignoreWater = true;
        this.scale = 0.8f;
      }
      else if (this.type == 654)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 126;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 655)
      {
        this.width = 31;
        this.height = 31;
        this.aiStyle = 25;
        this.friendly = true;
        this.hostile = true;
        this.penetrate = -1;
        this.trap = true;
      }
      else if (this.type == 656)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = (int) sbyte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.timeLeft = 1200;
      }
      else if (this.type == 657)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = (int) sbyte.MaxValue;
        this.hostile = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.timeLeft = 1200;
      }
      else if (this.type == 658)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 128;
        this.penetrate = 1;
        this.timeLeft = 900;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.alpha = (int) byte.MaxValue;
        this.hostile = true;
      }
      else if (this.type == 659)
      {
        this.width = 8;
        this.height = 8;
        this.aiStyle = 129;
        this.friendly = true;
        this.magic = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.timeLeft = 180;
        this.tileCollide = false;
        this.penetrate = -1;
      }
      else if (this.type == 660)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
        this.ignoreWater = true;
      }
      else if (this.type == 661)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 40;
        this.extraUpdates = 1;
        this.ranged = true;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
      }
      else if (this.type == 662 || this.type == 685)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 663 || this.type == 665 || this.type == 667)
      {
        this.width = 30;
        this.height = 54;
        this.aiStyle = 130;
        this.timeLeft = Projectile.SentryLifeTime;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
        switch (this.type)
        {
          case 665:
            this.height = 58;
            this.width = 28;
            break;
          case 667:
            this.height = 60;
            this.width = 28;
            break;
        }
        this.sentry = true;
      }
      else if (this.type == 664 || this.type == 666 || this.type == 668)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 131;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 669)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 68;
        this.friendly = true;
        this.penetrate = 1;
        this.alpha = (int) byte.MaxValue;
        this.thrown = true;
        this.noEnchantments = true;
      }
      else if (this.type == 670)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 126;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 671)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 672)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 132;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 900;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 674 || this.type == 673)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 133;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 900;
        this.hostile = true;
        this.penetrate = -1;
        this.hide = true;
      }
      else if (this.type == 675)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 676)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 677 || this.type == 678 || this.type == 679)
      {
        this.width = 26;
        this.height = 54;
        this.aiStyle = 134;
        this.timeLeft = Projectile.SentryLifeTime;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
        this.sentry = true;
      }
      else if (this.type == 680)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.friendly = true;
        this.penetrate = 4;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 681)
      {
        this.width = 14;
        this.height = 14;
        this.aiStyle = 16;
        this.hostile = true;
        this.penetrate = -1;
        this.thrown = true;
      }
      else if (this.type == 682)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.hostile = true;
        this.ignoreWater = true;
        this.timeLeft = 30;
        this.scale = 1.2f;
      }
      else if (this.type == 683)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 135;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.hostile = true;
        this.penetrate = -1;
      }
      else if (this.type == 684)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 1;
        this.melee = true;
        this.penetrate = 5;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.tileCollide = false;
      }
      else if (this.type == 686)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 687)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 136;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = false;
        this.hostile = true;
      }
      else if (this.type == 688 || this.type == 689 || this.type == 690)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 137;
        this.friendly = true;
        this.usesLocalNPCImmunity = true;
        this.timeLeft = Projectile.SentryLifeTime;
        this.localNPCHitCooldown = 3;
        this.tileCollide = false;
        this.penetrate = -1;
        this.sentry = true;
      }
      else if (this.type == 691 || this.type == 692 || this.type == 693)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 138;
        this.friendly = true;
        this.timeLeft = Projectile.SentryLifeTime;
        this.tileCollide = false;
        this.penetrate = -1;
        this.hide = true;
        this.sentry = true;
      }
      else if (this.type == 694 || this.type == 695 || this.type == 696)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 139;
        this.friendly = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 30;
        this.alpha = (int) byte.MaxValue;
        this.width = 96;
        this.height = 96;
      }
      else if (this.type == 697)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 140;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 12;
        this.ownerHitCheck = true;
      }
      else if (this.type == 698)
      {
        this.width = 50;
        this.height = 200;
        this.aiStyle = 141;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 120;
        this.friendly = true;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.melee = true;
      }
      else if (this.type == 699)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 142;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesIDStaticNPCImmunity = true;
        this.idStaticNPCHitCooldown = 36;
        this.ownerHitCheck = true;
      }
      else if (this.type == 700)
      {
        this.width = 40;
        this.height = 40;
        this.aiStyle = 143;
        this.alpha = (int) byte.MaxValue;
        this.penetrate = -1;
        this.friendly = true;
        this.melee = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
        this.ignoreWater = true;
        this.tileCollide = false;
      }
      else if (this.type == 703 || this.type == 701 || this.type == 702)
      {
        this.width = 20;
        this.height = 20;
        this.aiStyle = 144;
        this.penetrate = -1;
        this.netImportant = true;
        this.timeLeft = this.timeLeft * 5;
        this.scale = 0.85f;
        this.friendly = true;
        this.ignoreWater = true;
        this.tileCollide = false;
        this.manualDirectionChange = true;
      }
      else if (this.type == 704)
      {
        this.width = 60;
        this.height = 210;
        this.aiStyle = 145;
        this.friendly = true;
        this.magic = true;
        this.tileCollide = false;
        this.penetrate = -1;
        this.usesLocalNPCImmunity = true;
        this.timeLeft = 600;
        this.localNPCHitCooldown = -1;
        this.ignoreWater = true;
      }
      else if (this.type == 706)
      {
        this.width = 66;
        this.height = 66;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 300;
        this.ranged = true;
        this.usesLocalNPCImmunity = true;
        this.penetrate = -1;
        this.localNPCHitCooldown = 10;
      }
      else if (this.type == 707)
      {
        this.width = 16;
        this.height = 16;
        this.aiStyle = 140;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 6;
        this.ownerHitCheck = true;
      }
      else if (this.type == 708)
      {
        this.width = 24;
        this.height = 24;
        this.aiStyle = 142;
        this.friendly = true;
        this.melee = true;
        this.penetrate = -1;
        this.alpha = (int) byte.MaxValue;
        this.hide = true;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = 6;
        this.ownerHitCheck = true;
      }
      else if (this.type == 709)
      {
        this.width = 12;
        this.height = 12;
        this.aiStyle = 1;
        this.friendly = true;
        this.melee = true;
        this.alpha = (int) byte.MaxValue;
        this.ignoreWater = true;
        this.extraUpdates = 1;
        this.noEnchantments = true;
        this.scale = 0.6f;
      }
      else if (this.type == 710)
      {
        this.arrow = true;
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.ranged = true;
        this.ignoreWater = true;
        this.extraUpdates = 1;
        this.timeLeft = this.extraUpdates * 60 * 5;
        this.usesLocalNPCImmunity = true;
        this.alpha = (int) byte.MaxValue;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 711)
      {
        this.width = 30;
        this.height = 30;
        this.aiStyle = 1;
        this.alpha = (int) byte.MaxValue;
        this.friendly = true;
        this.magic = true;
        this.extraUpdates = 1;
        this.scale = 0.7f;
        this.usesLocalNPCImmunity = true;
        this.localNPCHitCooldown = -1;
      }
      else if (this.type == 712)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 1;
        this.friendly = true;
        this.alpha = (int) byte.MaxValue;
        this.timeLeft = 600;
        this.magic = true;
        this.extraUpdates = 1;
      }
      else if (this.type == 713)
      {
        this.width = 10;
        this.height = 10;
        this.aiStyle = 146;
        this.alpha = (int) byte.MaxValue;
        this.tileCollide = false;
        this.ignoreWater = true;
        this.timeLeft = 900;
        this.hostile = true;
        this.penetrate = -1;
      }
      else
        this.active = false;
      this.width = (int) ((double) this.width * (double) this.scale);
      this.height = (int) ((double) this.height * (double) this.scale);
      this.maxPenetrate = this.penetrate;
    }

    public static int GetNextSlot()
    {
      int num = 1000;
      for (int index = 0; index < 1000; ++index)
      {
        if (!Main.projectile[index].active)
        {
          num = index;
          break;
        }
      }
      return num;
    }

    public static int NewProjectile(Vector2 position, Vector2 velocity, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0.0f, float ai1 = 0.0f)
    {
      return Projectile.NewProjectile(position.X, position.Y, velocity.X, velocity.Y, Type, Damage, KnockBack, Owner, ai0, ai1);
    }

    public static int NewProjectile(float X, float Y, float SpeedX, float SpeedY, int Type, int Damage, float KnockBack, int Owner = 255, float ai0 = 0.0f, float ai1 = 0.0f)
    {
      int number = 1000;
      for (int index = 0; index < 1000; ++index)
      {
        if (!Main.projectile[index].active)
        {
          number = index;
          break;
        }
      }
      if (number == 1000)
        return number;
      Projectile projectile = Main.projectile[number];
      projectile.SetDefaults(Type);
      projectile.position.X = X - (float) projectile.width * 0.5f;
      projectile.position.Y = Y - (float) projectile.height * 0.5f;
      projectile.owner = Owner;
      projectile.velocity.X = SpeedX;
      projectile.velocity.Y = SpeedY;
      projectile.damage = Damage;
      projectile.knockBack = KnockBack;
      projectile.identity = number;
      projectile.gfxOffY = 0.0f;
      projectile.stepSpeed = 1f;
      projectile.wet = Collision.WetCollision(projectile.position, projectile.width, projectile.height);
      if (projectile.ignoreWater)
        projectile.wet = false;
      projectile.honeyWet = Collision.honey;
      Main.projectileIdentity[Owner, number] = number;
      if (projectile.aiStyle == 1)
      {
        while ((double) projectile.velocity.X >= 16.0 || (double) projectile.velocity.X <= -16.0 || ((double) projectile.velocity.Y >= 16.0 || (double) projectile.velocity.Y < -16.0))
        {
          projectile.velocity.X *= 0.97f;
          projectile.velocity.Y *= 0.97f;
        }
      }
      if (Owner == Main.myPlayer)
      {
        if (Type == 206)
        {
          projectile.ai[0] = (float) Main.rand.Next(-100, 101) * 0.0005f;
          projectile.ai[1] = (float) Main.rand.Next(-100, 101) * 0.0005f;
        }
        else if (Type == 335)
          projectile.ai[1] = (float) Main.rand.Next(4);
        else if (Type == 358)
          projectile.ai[1] = (float) Main.rand.Next(10, 31) * 0.1f;
        else if (Type == 406)
        {
          projectile.ai[1] = (float) Main.rand.Next(10, 21) * 0.1f;
        }
        else
        {
          projectile.ai[0] = ai0;
          projectile.ai[1] = ai1;
        }
      }
      if (Type == 434)
      {
        projectile.ai[0] = projectile.position.X;
        projectile.ai[1] = projectile.position.Y;
      }
      if (Type > 0 && Type < 714)
      {
        if (ProjectileID.Sets.NeedsUUID[Type])
          projectile.projUUID = projectile.identity;
        if (ProjectileID.Sets.StardustDragon[Type])
        {
          int projUuid = Main.projectile[(int) projectile.ai[0]].projUUID;
          if (projUuid >= 0)
            projectile.ai[0] = (float) projUuid;
        }
      }
      if (Main.netMode != 0 && Owner == Main.myPlayer)
        NetMessage.SendData(27, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
      if (Owner == Main.myPlayer)
      {
        if (Type == 28)
          projectile.timeLeft = 180;
        if (Type == 516)
          projectile.timeLeft = 180;
        if (Type == 519)
          projectile.timeLeft = 180;
        if (Type == 29)
          projectile.timeLeft = 300;
        if (Type == 470)
          projectile.timeLeft = 300;
        if (Type == 637)
          projectile.timeLeft = 300;
        if (Type == 30)
          projectile.timeLeft = 180;
        if (Type == 517)
          projectile.timeLeft = 180;
        if (Type == 37)
          projectile.timeLeft = 180;
        if (Type == 75)
          projectile.timeLeft = 180;
        if (Type == 133)
          projectile.timeLeft = 180;
        if (Type == 136)
          projectile.timeLeft = 180;
        if (Type == 139)
          projectile.timeLeft = 180;
        if (Type == 142)
          projectile.timeLeft = 180;
        if (Type == 397)
          projectile.timeLeft = 180;
        if (Type == 419)
          projectile.timeLeft = 600;
        if (Type == 420)
          projectile.timeLeft = 600;
        if (Type == 421)
          projectile.timeLeft = 600;
        if (Type == 422)
          projectile.timeLeft = 600;
        if (Type == 588)
          projectile.timeLeft = 180;
        if (Type == 443)
          projectile.timeLeft = 300;
        if (Type == 681)
          projectile.timeLeft = 600;
        if (Type == 684)
          projectile.timeLeft = 60;
        if (Type == 706)
          projectile.timeLeft = 120;
        if (Type == 680 && Main.player[projectile.owner].setSquireT2)
          projectile.penetrate = 7;
      }
      if (Type == 249)
        projectile.frame = Main.rand.Next(5);
      return number;
    }

    public void StatusNPC(int i)
    {
      if (this.melee && (int) Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
      {
        int meleeEnchant = (int) Main.player[this.owner].meleeEnchant;
        int num1 = 1;
        if (meleeEnchant == num1)
          Main.npc[i].AddBuff(70, 60 * Main.rand.Next(5, 10), false);
        int num2 = 2;
        if (meleeEnchant == num2)
          Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
        int num3 = 3;
        if (meleeEnchant == num3)
          Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
        int num4 = 5;
        if (meleeEnchant == num4)
          Main.npc[i].AddBuff(69, 60 * Main.rand.Next(10, 20), false);
        int num5 = 6;
        if (meleeEnchant == num5)
          Main.npc[i].AddBuff(31, 60 * Main.rand.Next(1, 4), false);
        int num6 = 8;
        if (meleeEnchant == num6)
          Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 10), false);
        int num7 = 4;
        if (meleeEnchant == num7)
          Main.npc[i].AddBuff(72, 120, false);
      }
      if (this.type == 195)
      {
        if (Main.rand.Next(3) == 0)
          Main.npc[i].AddBuff(70, 60 * Main.rand.Next(10, 21), false);
        else
          Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 21), false);
      }
      if (this.type == 664 && Main.rand.Next(3) == 0)
        Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 6), false);
      if (this.type == 666 && Main.rand.Next(2) == 0)
        Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 9), false);
      if (this.type == 668 && Main.rand.Next(3) != 0)
        Main.npc[i].AddBuff(24, 60 * Main.rand.Next(6, 9), false);
      if (this.type == 567 || this.type == 568)
        Main.npc[i].AddBuff(20, 60 * Main.rand.Next(5, 11), false);
      if (this.type == 598)
        Main.npc[i].AddBuff(169, 900, false);
      if (this.type == 636)
        Main.npc[i].AddBuff(189, 300, false);
      if (this.type == 611)
        Main.npc[i].AddBuff(189, 300, false);
      if (this.type == 612)
        Main.npc[i].AddBuff(189, 300, false);
      if (this.type == 711)
        Main.npc[i].AddBuff(203, 600, false);
      if (this.type == 706)
        Main.npc[i].AddBuff(24, 480, false);
      if (this.type == 614)
        Main.npc[i].AddBuff(183, 900, false);
      if (this.type == 585)
        Main.npc[i].AddBuff(153, 60 * Main.rand.Next(5, 11), false);
      if (this.type == 583)
        Main.npc[i].AddBuff(20, 60 * Main.rand.Next(3, 6), false);
      if (this.type == 524)
        Main.npc[i].AddBuff(69, 60 * Main.rand.Next(3, 8), false);
      if (this.type == 504 && Main.rand.Next(3) == 0)
      {
        if (Main.rand.Next(3) == 0)
          Main.npc[i].AddBuff(24, Main.rand.Next(60, 180), false);
        else
          Main.npc[i].AddBuff(24, Main.rand.Next(30, 120), false);
      }
      if ((this.type == 694 || this.type == 695 || this.type == 696) && (Main.player[this.owner].setHuntressT2 && Main.rand.Next(2) == 0))
        Main.npc[i].AddBuff(204, Main.rand.Next(8, 18) * 30, false);
      if (this.type == 545 && Main.rand.Next(3) == 0)
        Main.npc[i].AddBuff(24, Main.rand.Next(60, 240), false);
      if (this.type == 553)
        Main.npc[i].AddBuff(24, Main.rand.Next(180, 480), false);
      if (this.type == 552 && Main.rand.Next(3) != 0)
        Main.npc[i].AddBuff(44, Main.rand.Next(120, 320), false);
      if (this.type == 495)
        Main.npc[i].AddBuff(153, Main.rand.Next(120, 300), false);
      if (this.type == 497)
        Main.npc[i].AddBuff(153, Main.rand.Next(60, 180), false);
      if (this.type == 496)
        Main.npc[i].AddBuff(153, Main.rand.Next(240, 480), false);
      if (this.type == 476)
        Main.npc[i].AddBuff(151, 30, false);
      if (this.type == 523)
        Main.npc[i].AddBuff(20, 60 * Main.rand.Next(10, 30), false);
      if (this.type == 478 || this.type == 480)
        Main.npc[i].AddBuff(39, 60 * Main.rand.Next(3, 7), false);
      if (this.type == 479)
        Main.npc[i].AddBuff(69, 60 * Main.rand.Next(7, 15), false);
      if (this.type == 379)
        Main.npc[i].AddBuff(70, 60 * Main.rand.Next(4, 7), false);
      if (this.type >= 390 && this.type <= 392)
        Main.npc[i].AddBuff(70, 60 * Main.rand.Next(2, 5), false);
      if (this.type == 374)
        Main.npc[i].AddBuff(20, 60 * Main.rand.Next(4, 7), false);
      if (this.type == 376)
        Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
      if (this.type >= 399 && this.type <= 402)
        Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
      if (this.type == 295 || this.type == 296)
        Main.npc[i].AddBuff(24, 60 * Main.rand.Next(8, 16), false);
      if ((this.melee || this.ranged) && (Main.player[this.owner].frostBurn && !this.noEnchantments))
        Main.npc[i].AddBuff(44, 60 * Main.rand.Next(5, 15), false);
      if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
      {
        if (Main.rand.Next(7) == 0)
          Main.npc[i].AddBuff(24, 360, false);
        else if (Main.rand.Next(3) == 0)
          Main.npc[i].AddBuff(24, 120, false);
        else
          Main.npc[i].AddBuff(24, 60, false);
      }
      if (this.type == 287)
        Main.npc[i].AddBuff(72, 120, false);
      if (this.type == 285)
      {
        if (Main.rand.Next(3) == 0)
          Main.npc[i].AddBuff(31, 180, false);
        else
          Main.npc[i].AddBuff(31, 60, false);
      }
      if (this.type == 2 && Main.rand.Next(3) == 0)
        Main.npc[i].AddBuff(24, 180, false);
      if (this.type == 172)
      {
        if (Main.rand.Next(3) == 0)
          Main.npc[i].AddBuff(44, 180, false);
      }
      else if (this.type == 15)
      {
        if (Main.rand.Next(2) == 0)
          Main.npc[i].AddBuff(24, 300, false);
      }
      else if (this.type == 253)
      {
        if (Main.rand.Next(2) == 0)
          Main.npc[i].AddBuff(44, 480, false);
      }
      else if (this.type == 19)
      {
        if (Main.rand.Next(5) == 0)
          Main.npc[i].AddBuff(24, 180, false);
      }
      else if (this.type == 33)
      {
        if (Main.rand.Next(5) == 0)
          Main.npc[i].AddBuff(20, 420, false);
      }
      else if (this.type == 34)
      {
        if (Main.rand.Next(2) == 0)
          Main.npc[i].AddBuff(24, Main.rand.Next(240, 480), false);
      }
      else if (this.type == 35)
      {
        if (Main.rand.Next(4) == 0)
          Main.npc[i].AddBuff(24, 180, false);
      }
      else if (this.type == 54)
      {
        if (Main.rand.Next(2) == 0)
          Main.npc[i].AddBuff(20, 600, false);
      }
      else if (this.type == 267)
      {
        if (Main.rand.Next(3) == 0)
          Main.npc[i].AddBuff(20, 3600, false);
        else
          Main.npc[i].AddBuff(20, 1800, false);
      }
      else if (this.type == 63)
      {
        if (Main.rand.Next(5) != 0)
          Main.npc[i].AddBuff(31, 60 * Main.rand.Next(2, 5), false);
      }
      else if (this.type == 85 || this.type == 188)
        Main.npc[i].AddBuff(24, 1200, false);
      else if (this.type == 95 || this.type == 103 || this.type == 104)
        Main.npc[i].AddBuff(39, 420, false);
      else if (this.type == 278 || this.type == 279 || this.type == 280)
        Main.npc[i].AddBuff(69, 600, false);
      else if (this.type == 282 || this.type == 283)
        Main.npc[i].AddBuff(70, 600, false);
      if (this.type == 163 || this.type == 310)
      {
        if (Main.rand.Next(3) == 0)
          Main.npc[i].AddBuff(24, 600, false);
        else
          Main.npc[i].AddBuff(24, 300, false);
      }
      else if (this.type == 98)
        Main.npc[i].AddBuff(20, 600, false);
      else if (this.type == 184)
        Main.npc[i].AddBuff(20, 900, false);
      else if (this.type == 265)
      {
        Main.npc[i].AddBuff(20, 1800, false);
      }
      else
      {
        if (this.type != 355)
          return;
        Main.npc[i].AddBuff(70, 1800, false);
      }
    }

    public void StatusPvP(int i)
    {
      if (this.melee && (int) Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
      {
        int meleeEnchant = (int) Main.player[this.owner].meleeEnchant;
        int num1 = 1;
        if (meleeEnchant == num1)
          Main.player[i].AddBuff(70, 60 * Main.rand.Next(5, 10), true);
        int num2 = 2;
        if (meleeEnchant == num2)
          Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
        int num3 = 3;
        if (meleeEnchant == num3)
          Main.player[i].AddBuff(24, 60 * Main.rand.Next(3, 7), true);
        int num4 = 5;
        if (meleeEnchant == num4)
          Main.player[i].AddBuff(69, 60 * Main.rand.Next(10, 20), true);
        int num5 = 6;
        if (meleeEnchant == num5)
          Main.player[i].AddBuff(31, 60 * Main.rand.Next(1, 4), true);
        int num6 = 8;
        if (meleeEnchant == num6)
          Main.player[i].AddBuff(20, 60 * Main.rand.Next(5, 10), true);
      }
      if (this.type == 295 || this.type == 296)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), true);
      if (this.type == 478 || this.type == 480)
        Main.player[i].AddBuff(39, 60 * Main.rand.Next(3, 7), true);
      if ((this.melee || this.ranged) && (Main.player[this.owner].frostBurn && !this.noEnchantments))
        Main.player[i].AddBuff(44, 60 * Main.rand.Next(1, 8), false);
      if (this.melee && Main.player[this.owner].magmaStone && !this.noEnchantments)
      {
        if (Main.rand.Next(4) == 0)
          Main.player[i].AddBuff(24, 360, true);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(24, 240, true);
        else
          Main.player[i].AddBuff(24, 120, true);
      }
      if (this.type == 2 && Main.rand.Next(3) == 0)
        Main.player[i].AddBuff(24, 180, false);
      if (this.type == 172)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(44, 240, false);
      }
      else if (this.type == 15)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(24, 300, false);
      }
      else if (this.type == 253)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(44, 480, false);
      }
      else if (this.type == 19)
      {
        if (Main.rand.Next(5) == 0)
          Main.player[i].AddBuff(24, 180, false);
      }
      else if (this.type == 33)
      {
        if (Main.rand.Next(5) == 0)
          Main.player[i].AddBuff(20, 420, false);
      }
      else if (this.type == 34)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(24, 240, false);
      }
      else if (this.type == 35)
      {
        if (Main.rand.Next(4) == 0)
          Main.player[i].AddBuff(24, 180, false);
      }
      else if (this.type == 54)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(20, 600, false);
      }
      else if (this.type == 267)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(20, 3600, true);
        else
          Main.player[i].AddBuff(20, 1800, true);
      }
      else if (this.type == 63)
      {
        if (Main.rand.Next(3) != 0)
          Main.player[i].AddBuff(31, 120, true);
      }
      else if (this.type == 85 || this.type == 188)
        Main.player[i].AddBuff(24, 1200, false);
      else if (this.type == 95 || this.type == 103 || this.type == 104)
        Main.player[i].AddBuff(39, 420, true);
      else if (this.type == 278 || this.type == 279 || this.type == 280)
        Main.player[i].AddBuff(69, 900, true);
      else if (this.type == 282 || this.type == 283)
        Main.player[i].AddBuff(70, 600, true);
      if (this.type == 163 || this.type == 310)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(24, 600, true);
        else
          Main.player[i].AddBuff(24, 300, true);
      }
      else if (this.type == 265)
      {
        Main.player[i].AddBuff(20, 1200, true);
      }
      else
      {
        if (this.type != 355)
          return;
        Main.player[i].AddBuff(70, 1800, true);
      }
    }

    public void ghostHurt(int dmg, Vector2 Position)
    {
      if (!this.magic)
        return;
      int Damage = this.damage / 2;
      if (dmg / 2 <= 1)
        return;
      int num1 = 1000;
      if ((double) Main.player[Main.myPlayer].ghostDmg > (double) num1)
        return;
      Main.player[Main.myPlayer].ghostDmg += (float) Damage;
      int[] numArray1 = new int[200];
      int maxValue1 = 0;
      int[] numArray2 = new int[200];
      int maxValue2 = 0;
      for (int index = 0; index < 200; ++index)
      {
        if (Main.npc[index].CanBeChasedBy((object) this, false))
        {
          float num2 = Math.Abs(Main.npc[index].position.X + (float) (Main.npc[index].width / 2) - this.position.X + (float) (this.width / 2)) + Math.Abs(Main.npc[index].position.Y + (float) (Main.npc[index].height / 2) - this.position.Y + (float) (this.height / 2));
          if ((double) num2 < 800.0)
          {
            if (Collision.CanHit(this.position, 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height) && (double) num2 > 50.0)
            {
              numArray1[maxValue2] = index;
              ++maxValue2;
            }
            else if (maxValue2 == 0)
            {
              numArray1[maxValue1] = index;
              ++maxValue1;
            }
          }
        }
      }
      if (maxValue1 == 0 && maxValue2 == 0)
        return;
      int num3 = maxValue2 <= 0 ? numArray1[Main.rand.Next(maxValue1)] : numArray1[Main.rand.Next(maxValue2)];
      double num4 = 4.0;
      float num5 = (float) Main.rand.Next(-100, 101);
      float num6 = (float) Main.rand.Next(-100, 101);
      double num7 = Math.Sqrt((double) num5 * (double) num5 + (double) num6 * (double) num6);
      float num8 = (float) (num4 / num7);
      float SpeedX = num5 * num8;
      float SpeedY = num6 * num8;
      Projectile.NewProjectile(Position.X, Position.Y, SpeedX, SpeedY, 356, Damage, 0.0f, this.owner, (float) num3, 0.0f);
    }

    public void ghostHeal(int dmg, Vector2 Position)
    {
      float num1 = 0.2f - (float) this.numHits * 0.05f;
      if ((double) num1 <= 0.0)
        return;
      float ai1 = (float) dmg * num1;
      if ((int) ai1 <= 0 || (double) Main.player[Main.myPlayer].lifeSteal <= 0.0)
        return;
      Main.player[Main.myPlayer].lifeSteal -= ai1;
      if (!this.magic)
        return;
      float num2 = 0.0f;
      int num3 = this.owner;
      for (int index = 0; index < (int) byte.MaxValue; ++index)
      {
        if (Main.player[index].active && !Main.player[index].dead && (!Main.player[this.owner].hostile && !Main.player[index].hostile || Main.player[this.owner].team == Main.player[index].team) && ((double) Math.Abs(Main.player[index].position.X + (float) (Main.player[index].width / 2) - this.position.X + (float) (this.width / 2)) + (double) Math.Abs(Main.player[index].position.Y + (float) (Main.player[index].height / 2) - this.position.Y + (float) (this.height / 2)) < 1200.0 && (double) (Main.player[index].statLifeMax2 - Main.player[index].statLife) > (double) num2))
        {
          num2 = (float) (Main.player[index].statLifeMax2 - Main.player[index].statLife);
          num3 = index;
        }
      }
      Projectile.NewProjectile(Position.X, Position.Y, 0.0f, 0.0f, 298, 0, 0.0f, this.owner, (float) num3, ai1);
    }

    public void vampireHeal(int dmg, Vector2 Position)
    {
      float ai1 = (float) dmg * 0.075f;
      if ((int) ai1 == 0 || (double) Main.player[Main.myPlayer].lifeSteal <= 0.0)
        return;
      Main.player[Main.myPlayer].lifeSteal -= ai1;
      int owner = this.owner;
      Projectile.NewProjectile(Position.X, Position.Y, 0.0f, 0.0f, 305, 0, 0.0f, this.owner, (float) owner, ai1);
    }

    public void StatusPlayer(int i)
    {
      if (this.type == 472)
        Main.player[i].AddBuff(149, Main.rand.Next(30, 150), true);
      if (this.type == 467)
        Main.player[i].AddBuff(24, Main.rand.Next(30, 150), true);
      if (this.type == 581)
      {
        if (Main.expertMode)
          Main.player[i].AddBuff(164, Main.rand.Next(300, 540), true);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(164, Main.rand.Next(360, 720), true);
      }
      if (this.type == 687)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(7, 11), true);
      if (this.type == 258 && Main.rand.Next(2) == 0)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(5, 8), true);
      if (this.type == 572 && Main.rand.Next(3) != 0)
        Main.player[i].AddBuff(20, Main.rand.Next(120, 240), true);
      if (this.type == 276)
      {
        if (Main.expertMode)
          Main.player[i].AddBuff(20, Main.rand.Next(120, 540), true);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(20, Main.rand.Next(180, 420), true);
      }
      if (this.type == 436 && Main.rand.Next(5) >= 2)
        Main.player[i].AddBuff(31, 300, true);
      if (this.type == 435 && Main.rand.Next(3) != 0)
        Main.player[i].AddBuff(144, 300, true);
      if (this.type == 682)
        Main.player[i].AddBuff(196, 300, true);
      if (this.type == 437)
        Main.player[i].AddBuff(144, 60 * Main.rand.Next(4, 9), true);
      if (this.type == 348)
      {
        if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(46, 600, true);
        else
          Main.player[i].AddBuff(46, 300, true);
        if (Main.rand.Next(3) != 0)
        {
          if (Main.rand.Next(16) == 0)
            Main.player[i].AddBuff(47, 60, true);
          else if (Main.rand.Next(12) == 0)
            Main.player[i].AddBuff(47, 40, true);
          else if (Main.rand.Next(8) == 0)
            Main.player[i].AddBuff(47, 20, true);
        }
      }
      if (this.type == 349)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(46, 600, true);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(46, 300, true);
      }
      if (this.type >= 399 && this.type <= 402)
        Main.npc[i].AddBuff(24, 60 * Main.rand.Next(3, 7), false);
      if (this.type == 55)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(20, 600, true);
        else if (Main.expertMode)
          Main.player[i].AddBuff(20, Main.rand.Next(60, 300), true);
      }
      if (this.type == 44 && Main.rand.Next(3) == 0)
        Main.player[i].AddBuff(22, 900, true);
      if (this.type == 293)
        Main.player[i].AddBuff(80, 60 * Main.rand.Next(2, 7), true);
      if (this.type == 82 && Main.rand.Next(3) == 0)
        Main.player[i].AddBuff(24, 420, true);
      if (this.type == 285)
      {
        if (Main.rand.Next(3) == 0)
          Main.player[i].AddBuff(31, 180, true);
        else
          Main.player[i].AddBuff(31, 60, true);
      }
      if (this.type == 96 || this.type == 101)
      {
        if (Main.rand.Next(6) == 0)
          Main.player[i].AddBuff(39, 480, true);
        else if (Main.rand.Next(4) == 0)
          Main.player[i].AddBuff(39, 300, true);
        else if (Main.rand.Next(2) == 0)
          Main.player[i].AddBuff(39, 180, true);
      }
      else if (this.type == 288)
        Main.player[i].AddBuff(69, 900, true);
      else if (this.type == 253 && Main.rand.Next(2) == 0)
        Main.player[i].AddBuff(44, 600, true);
      if (this.type == 291 || this.type == 292)
        Main.player[i].AddBuff(24, 60 * Main.rand.Next(8, 16), true);
      if (this.type == 98)
        Main.player[i].AddBuff(20, 600, true);
      if (this.type == 184)
        Main.player[i].AddBuff(20, 900, true);
      if (this.type == 290)
        Main.player[i].AddBuff(32, 60 * Main.rand.Next(5, 16), true);
      if (this.type == 174)
      {
        Main.player[i].AddBuff(46, 1200, true);
        if (!Main.player[i].frozen && Main.rand.Next(20) == 0)
          Main.player[i].AddBuff(47, 90, true);
        else if (!Main.player[i].frozen && Main.expertMode && Main.rand.Next(20) == 0)
          Main.player[i].AddBuff(47, 60, true);
      }
      if (this.type == 257)
      {
        Main.player[i].AddBuff(46, 2700, true);
        if (!Main.player[i].frozen && Main.rand.Next(5) == 0)
          Main.player[i].AddBuff(47, 60, true);
      }
      if (this.type == 177)
      {
        Main.player[i].AddBuff(46, 1500, true);
        if (!Main.player[i].frozen && Main.rand.Next(10) == 0)
          Main.player[i].AddBuff(47, Main.rand.Next(30, 120), true);
      }
      if (this.type != 176)
        return;
      if (Main.rand.Next(4) == 0)
      {
        Main.player[i].AddBuff(20, 1200, true);
      }
      else
      {
        if (Main.rand.Next(2) != 0)
          return;
        Main.player[i].AddBuff(20, 300, true);
      }
    }

    public bool CanHit(Entity ent)
    {
      if ((double) this.Distance(ent.Center) > (double) this.ownerHitCheckDistance)
        return false;
      if (!Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, ent.position, ent.width, ent.height) && !Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2), (float) ((double) Main.player[this.owner].gravDir * (double) -Main.player[this.owner].height / 3.0)), 0, 0, ent.Center + new Vector2(0.0f, (float) (-ent.height / 3)), 0, 0) && !Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2), (float) ((double) Main.player[this.owner].gravDir * (double) -Main.player[this.owner].height / 3.0)), 0, 0, ent.Center, 0, 0))
        return Collision.CanHitLine(Main.player[this.owner].Center + new Vector2((float) (Main.player[this.owner].direction * Main.player[this.owner].width / 2), 0.0f), 0, 0, ent.Center + new Vector2(0.0f, (float) (ent.height / 3)), 0, 0);
      return true;
    }

    public void Damage()
    {
      if (this.type == 18 || this.type == 72 || (this.type == 86 || this.type == 87) || (this.aiStyle == 31 || this.aiStyle == 32 || (this.type == 226 || this.type == 378)) || (this.type == 613 || this.type == 650 || this.type == 434 && (double) this.localAI[0] != 0.0 || (this.type == 439 || this.type == 444)) || (this.type == 451 && ((int) ((double) this.ai[0] - 1.0) / this.penetrate == 0 || (double) this.ai[1] < 5.0) && (double) this.ai[0] != 0.0 || (this.type == 500 || this.type == 653 || (this.type == 460 || this.type == 633) || (this.type == 600 || this.type == 601 || (this.type == 602 || this.type == 535)))) || (this.type == 631 && (double) this.localAI[1] == 0.0 || this.type == 651 || (this.aiStyle == 137 && (double) this.ai[0] != 0.0 || this.aiStyle == 138) || (this.aiStyle == 93 && (double) this.ai[0] != 0.0 && (double) this.ai[0] != 2.0 || this.aiStyle == 10 && (double) this.localAI[1] == -1.0)) || Main.projPet[this.type] && this.type != 266 && (this.type != 407 && this.type != 317) && ((this.type != 388 || (double) this.ai[0] != 2.0) && (this.type < 390 || this.type > 392)) && ((this.type < 393 || this.type > 395) && (this.type != 533 || (double) this.ai[0] < 6.0 || (double) this.ai[0] > 8.0)) && (this.type < 625 || this.type > 628))
        return;
      Microsoft.Xna.Framework.Rectangle myRect = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
      if (this.type == 85 || this.type == 101)
      {
        int num = 30;
        myRect.X -= num;
        myRect.Y -= num;
        myRect.Width += num * 2;
        myRect.Height += num * 2;
      }
      if (this.type == 188)
      {
        int num = 20;
        myRect.X -= num;
        myRect.Y -= num;
        myRect.Width += num * 2;
        myRect.Height += num * 2;
      }
      if (this.aiStyle == 29)
      {
        int num = 4;
        myRect.X -= num;
        myRect.Y -= num;
        myRect.Width += num * 2;
        myRect.Height += num * 2;
      }
      if (this.friendly && this.owner == Main.myPlayer && !this.npcProj)
      {
        if (this.aiStyle == 16 && this.type != 338 && (this.type != 339 && this.type != 340) && this.type != 341 && (this.timeLeft <= 1 || this.type == 108 || this.type == 164) || this.type == 286 && (double) this.localAI[1] == -1.0)
        {
          int player = Main.myPlayer;
          if (Main.player[player].active && !Main.player[player].dead && !Main.player[player].immune && (!this.ownerHitCheck || this.CanHit((Entity) Main.player[player])))
          {
            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.player[player].position.X, (int) Main.player[player].position.Y, Main.player[player].width, Main.player[player].height);
            if (myRect.Intersects(rectangle))
            {
              if ((double) Main.player[player].position.X + (double) (Main.player[player].width / 2) < (double) this.position.X + (double) (this.width / 2))
                this.direction = -1;
              else
                this.direction = 1;
              int Damage = Main.DamageVar((float) this.damage);
              this.StatusPlayer(player);
              Main.player[player].Hurt(PlayerDeathReason.ByProjectile(this.owner, this.whoAmI), Damage, this.direction, true, false, false, -1);
              if (this.trap)
              {
                Main.player[player].trapDebuffSource = true;
                if (Main.player[player].dead)
                  AchievementsHelper.HandleSpecialEvent(Main.player[player], 4);
              }
            }
          }
        }
        this.CutTiles();
      }
      if (this.owner == Main.myPlayer)
      {
        if (this.damage > 0)
        {
          for (int index1 = 0; index1 < 200; ++index1)
          {
            bool flag1 = !this.usesLocalNPCImmunity && !this.usesIDStaticNPCImmunity || this.usesLocalNPCImmunity && this.localNPCImmunity[index1] == 0 || this.usesIDStaticNPCImmunity && Projectile.IsNPCImmune(this.type, index1);
            if (((!Main.npc[index1].active ? 0 : (!Main.npc[index1].dontTakeDamage ? 1 : 0)) & (flag1 ? 1 : 0)) != 0 && (this.friendly && (!Main.npc[index1].friendly || this.type == 318 || Main.npc[index1].type == 22 && this.owner < (int) byte.MaxValue && Main.player[this.owner].killGuide || Main.npc[index1].type == 54 && this.owner < (int) byte.MaxValue && Main.player[this.owner].killClothier) || this.hostile && Main.npc[index1].friendly && !Main.npc[index1].dontTakeDamageFromHostiles) && (this.owner < 0 || Main.npc[index1].immune[this.owner] == 0 || this.maxPenetrate == 1))
            {
              bool flag2 = false;
              if (this.type == 11 && (Main.npc[index1].type == 47 || Main.npc[index1].type == 57))
                flag2 = true;
              else if (this.type == 31 && Main.npc[index1].type == 69)
                flag2 = true;
              else if (Main.npc[index1].trapImmune && this.trap)
                flag2 = true;
              else if (Main.npc[index1].immortal && this.npcProj)
                flag2 = true;
              if (!flag2 && (Main.npc[index1].noTileCollide || !this.ownerHitCheck || this.CanHit((Entity) Main.npc[index1])))
              {
                bool flag3;
                if (Main.npc[index1].type == 414)
                {
                  Microsoft.Xna.Framework.Rectangle rect = Main.npc[index1].getRect();
                  int num = 8;
                  rect.X -= num;
                  rect.Y -= num;
                  rect.Width += num * 2;
                  rect.Height += num * 2;
                  flag3 = this.Colliding(myRect, rect);
                }
                else
                  flag3 = this.Colliding(myRect, Main.npc[index1].getRect());
                if (flag3)
                {
                  if (this.type == 604)
                    Main.player[this.owner].Counterweight(Main.npc[index1].Center, this.damage, this.knockBack);
                  if (Main.npc[index1].reflectingProjectiles && this.CanReflect())
                  {
                    Main.npc[index1].ReflectProjectile(this.whoAmI);
                    return;
                  }
                  int num1 = this.damage;
                  if (this.type > 0 && this.type < 714 && ProjectileID.Sets.StardustDragon[this.type])
                  {
                    float num2 = Utils.Clamp<float>((float) (((double) this.scale - 1.0) * 100.0), 0.0f, 50f);
                    num1 = (int) ((double) num1 * (1.0 + (double) num2 * 0.230000004172325));
                  }
                  int Damage1 = Main.DamageVar((float) num1);
                  bool flag4 = !this.npcProj && !this.trap;
                  if (this.trap && NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[index1].type])
                    Damage1 /= 2;
                  if (this.type == 604)
                  {
                    this.friendly = false;
                    this.ai[1] = 1000f;
                  }
                  if ((this.type == 400 || this.type == 401 || this.type == 402) && (Main.npc[index1].type >= 13 && Main.npc[index1].type <= 15))
                  {
                    Damage1 = (int) ((double) Damage1 * 0.65);
                    if (this.penetrate > 1)
                      this.penetrate = this.penetrate - 1;
                  }
                  if (this.type == 710)
                  {
                    Point result;
                    if (!WorldUtils.Find(this.Center.ToTileCoordinates(), Searches.Chain((GenSearch) new Searches.Down(12), (GenCondition) new Conditions.IsSolid()), out result))
                      Damage1 = (int) ((double) Damage1 * 1.5);
                  }
                  if (this.type == 504)
                    this.ai[0] += (float) ((60.0 - (double) this.ai[0]) / 2.0);
                  if (this.aiStyle == 3 && this.type != 301)
                  {
                    if ((double) this.ai[0] == 0.0)
                    {
                      this.velocity.X = -this.velocity.X;
                      this.velocity.Y = -this.velocity.Y;
                      this.netUpdate = true;
                    }
                    this.ai[0] = 1f;
                  }
                  else if (this.type == 582)
                  {
                    if ((double) this.ai[0] != 0.0)
                      this.direction = this.direction * -1;
                  }
                  else if (this.type == 612)
                    this.direction = Main.player[this.owner].direction;
                  else if (this.type == 624)
                  {
                    float num2 = 1f;
                    if ((double) Main.npc[index1].knockBackResist > 0.0)
                      num2 = 1f / Main.npc[index1].knockBackResist;
                    this.knockBack = 4f * num2;
                    if ((double) Main.npc[index1].Center.X < (double) this.Center.X)
                      this.direction = 1;
                    else
                      this.direction = -1;
                  }
                  else if (this.aiStyle == 16)
                  {
                    if (this.timeLeft > 3)
                      this.timeLeft = 3;
                    if ((double) Main.npc[index1].position.X + (double) (Main.npc[index1].width / 2) < (double) this.position.X + (double) (this.width / 2))
                      this.direction = -1;
                    else
                      this.direction = 1;
                  }
                  else if (this.aiStyle == 68)
                  {
                    if (this.timeLeft > 3)
                      this.timeLeft = 3;
                    if ((double) Main.npc[index1].position.X + (double) (Main.npc[index1].width / 2) < (double) this.position.X + (double) (this.width / 2))
                      this.direction = -1;
                    else
                      this.direction = 1;
                  }
                  else if (this.aiStyle == 50)
                  {
                    if ((double) Main.npc[index1].position.X + (double) (Main.npc[index1].width / 2) < (double) this.position.X + (double) (this.width / 2))
                      this.direction = -1;
                    else
                      this.direction = 1;
                  }
                  if (this.type == 509)
                  {
                    int num2 = Main.rand.Next(2, 6);
                    for (int index2 = 0; index2 < num2; ++index2)
                    {
                      Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                      vector2 += this.velocity * 3f;
                      vector2.Normalize();
                      vector2 *= (float) Main.rand.Next(35, 81) * 0.1f;
                      int Damage2 = (int) ((double) this.damage * 0.5);
                      Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2.X, vector2.Y, 504, Damage2, this.knockBack * 0.2f, this.owner, 0.0f, 0.0f);
                    }
                  }
                  if (this.type == 598 || this.type == 636 || this.type == 614)
                  {
                    this.ai[0] = 1f;
                    this.ai[1] = (float) index1;
                    this.velocity = (Main.npc[index1].Center - this.Center) * 0.75f;
                    this.netUpdate = true;
                  }
                  if (this.type >= 511 && this.type <= 513)
                    this.timeLeft = 0;
                  if (this.type == 659)
                    this.timeLeft = 0;
                  if (this.type == 524)
                  {
                    this.netUpdate = true;
                    this.ai[0] += 50f;
                  }
                  if ((this.type == 688 || this.type == 689 || this.type == 690) && (Main.npc[index1].type != 68 && Main.npc[index1].defense < 999))
                    Damage1 += Main.npc[index1].defense / 2;
                  if (this.aiStyle == 39)
                  {
                    if ((double) this.ai[1] == 0.0)
                    {
                      this.ai[1] = (float) (index1 + 1);
                      this.netUpdate = true;
                    }
                    if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) < (double) this.position.X + (double) (this.width / 2))
                      this.direction = 1;
                    else
                      this.direction = -1;
                  }
                  if (this.type == 41 && this.timeLeft > 1)
                    this.timeLeft = 1;
                  bool crit = false;
                  if (flag4)
                  {
                    if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
                      crit = true;
                    if (this.ranged && Main.rand.Next(1, 101) <= Main.player[this.owner].rangedCrit)
                      crit = true;
                    if (this.magic && Main.rand.Next(1, 101) <= Main.player[this.owner].magicCrit)
                      crit = true;
                    if (this.thrown && Main.rand.Next(1, 101) <= Main.player[this.owner].thrownCrit)
                      crit = true;
                    if ((uint) (this.type - 688) <= 2U)
                    {
                      if (Main.player[this.owner].setMonkT3)
                      {
                        if (Main.rand.Next(4) == 0)
                          crit = true;
                      }
                      else if (Main.player[this.owner].setMonkT2 && Main.rand.Next(6) == 0)
                        crit = true;
                    }
                  }
                  if (this.aiStyle == 99)
                  {
                    Main.player[this.owner].Counterweight(Main.npc[index1].Center, this.damage, this.knockBack);
                    if ((double) Main.npc[index1].Center.X < (double) Main.player[this.owner].Center.X)
                      this.direction = -1;
                    else
                      this.direction = 1;
                    if ((double) this.ai[0] >= 0.0)
                    {
                      Vector2 vector2 = this.Center - Main.npc[index1].Center;
                      vector2.Normalize();
                      float num2 = 16f;
                      this.velocity = this.velocity * -0.5f;
                      this.velocity = this.velocity + vector2 * num2;
                      this.netUpdate = true;
                      this.localAI[0] += 20f;
                      if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height))
                      {
                        this.localAI[0] += 40f;
                        Damage1 = (int) ((double) Damage1 * 0.75);
                      }
                    }
                  }
                  if (this.aiStyle == 93)
                  {
                    if ((double) this.ai[0] == 0.0)
                    {
                      this.ai[1] = 0.0f;
                      this.ai[0] = (float) (-index1 - 1);
                      this.velocity = Main.npc[index1].Center - this.Center;
                    }
                    Damage1 = (double) this.ai[0] != 2.0 ? (int) ((double) Damage1 * 0.15) : (int) ((double) Damage1 * 1.35);
                  }
                  if (flag4)
                  {
                    int num2 = Item.NPCtoBanner(Main.npc[index1].BannerID());
                    if (num2 >= 0)
                      Main.player[Main.myPlayer].lastCreatureHit = num2;
                  }
                  if (Main.netMode != 2 & flag4)
                  {
                    int banner = Item.NPCtoBanner(Main.npc[index1].BannerID());
                    if (banner > 0 && Main.player[this.owner].NPCBannerBuff[banner])
                      Damage1 = !Main.expertMode ? (int) ((double) Damage1 * (double) ItemID.Sets.BannerStrength[Item.BannerToItem(banner)].NormalDamageDealt) : (int) ((double) Damage1 * (double) ItemID.Sets.BannerStrength[Item.BannerToItem(banner)].ExpertDamageDealt);
                  }
                  if (Main.expertMode)
                  {
                    if ((this.type == 30 || this.type == 28 || (this.type == 29 || this.type == 470) || (this.type == 517 || this.type == 588 || this.type == 637)) && (Main.npc[index1].type >= 13 && Main.npc[index1].type <= 15))
                      Damage1 /= 5;
                    if (this.type == 280 && (Main.npc[index1].type >= 134 && Main.npc[index1].type <= 136 || Main.npc[index1].type == 139))
                      Damage1 = (int) ((double) Damage1 * 0.75);
                  }
                  if (Main.netMode != 2 && Main.npc[index1].type == 439 && (this.type >= 0 && this.type <= 714) && ProjectileID.Sets.Homing[this.type])
                    Damage1 = (int) ((double) Damage1 * 0.75);
                  if (this.type == 497 && this.penetrate != 1)
                  {
                    this.ai[0] = 25f;
                    float num2 = this.velocity.Length();
                    Vector2 vector2 = Main.npc[index1].Center - this.Center;
                    vector2.Normalize();
                    this.velocity = -(vector2 * num2) * 0.9f;
                    this.netUpdate = true;
                  }
                  if (this.type == 323 && (Main.npc[index1].type == 158 || Main.npc[index1].type == 159))
                    Damage1 *= 10;
                  if (this.type == 294)
                    this.damage = (int) ((double) this.damage * 0.8);
                  if (this.type == 477 && this.penetrate > 1)
                  {
                    int[] numArray = new int[10];
                    int maxValue = 0;
                    int num2 = 700;
                    int num3 = 20;
                    for (int index2 = 0; index2 < 200; ++index2)
                    {
                      if (index2 != index1 && Main.npc[index2].CanBeChasedBy((object) this, false))
                      {
                        float num4 = (this.Center - Main.npc[index2].Center).Length();
                        if ((double) num4 > (double) num3 && (double) num4 < (double) num2 && Collision.CanHitLine(this.Center, 1, 1, Main.npc[index2].Center, 1, 1))
                        {
                          numArray[maxValue] = index2;
                          ++maxValue;
                          if (maxValue >= 9)
                            break;
                        }
                      }
                    }
                    if (maxValue > 0)
                    {
                      int index2 = Main.rand.Next(maxValue);
                      Vector2 vector2 = Main.npc[numArray[index2]].Center - this.Center;
                      float num4 = this.velocity.Length();
                      vector2.Normalize();
                      this.velocity = vector2 * num4;
                      this.netUpdate = true;
                    }
                  }
                  if (this.type == 261)
                  {
                    float num2 = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y);
                    if ((double) num2 < 1.0)
                      num2 = 1f;
                    Damage1 = (int) ((double) Damage1 * (double) num2 / 8.0);
                  }
                  if (flag4 && this.melee && Main.player[this.owner].parryDamageBuff)
                  {
                    Damage1 *= 5;
                    Main.player[this.owner].parryDamageBuff = false;
                    Main.player[this.owner].ClearBuff(198);
                  }
                  this.StatusNPC(index1);
                  if (flag4 && this.type != 221 && (this.type != 227 && this.type != 614))
                    Main.player[this.owner].OnHit(Main.npc[index1].Center.X, Main.npc[index1].Center.Y, (Entity) Main.npc[index1]);
                  if (this.type == 317)
                  {
                    this.ai[1] = -1f;
                    this.netUpdate = true;
                  }
                  int hitDirection = this.direction;
                  if (this.type == 697 || this.type == 699 || (this.type == 707 || this.type == 708))
                    hitDirection = (double) Main.player[this.owner].Center.X < (double) Main.npc[index1].Center.X ? 1 : -1;
                  if (flag4 && !this.hostile && Main.player[this.owner].armorPenetration > 0)
                    Damage1 += Main.npc[index1].checkArmorPenetration(Main.player[this.owner].armorPenetration);
                  int dmg = !flag4 ? (int) Main.npc[index1].StrikeNPCNoInteraction(Damage1, this.knockBack, hitDirection, crit, false, false) : (int) Main.npc[index1].StrikeNPC(Damage1, this.knockBack, hitDirection, crit, false, false);
                  if (flag4 && Main.player[this.owner].accDreamCatcher)
                    Main.player[this.owner].addDPS(dmg);
                  if (flag4 && !Main.npc[index1].immortal)
                  {
                    if (this.type == 304 && dmg > 0 && (Main.npc[index1].lifeMax > 5 && !Main.player[this.owner].moonLeech))
                      this.vampireHeal(dmg, new Vector2(Main.npc[index1].Center.X, Main.npc[index1].Center.Y));
                    if ((double) Main.npc[index1].value > 0.0 && Main.player[this.owner].coins && Main.rand.Next(5) == 0)
                    {
                      int Type = 71;
                      if (Main.rand.Next(10) == 0)
                        Type = 72;
                      if (Main.rand.Next(100) == 0)
                        Type = 73;
                      int number = Item.NewItem((int) Main.npc[index1].position.X, (int) Main.npc[index1].position.Y, Main.npc[index1].width, Main.npc[index1].height, Type, 1, false, 0, false, false);
                      Main.item[number].stack = Main.rand.Next(1, 11);
                      Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                      Main.item[number].velocity.X = (float) Main.rand.Next(10, 31) * 0.2f * (float) this.direction;
                      if (Main.netMode == 1)
                        NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    }
                    if (dmg > 0 && Main.npc[index1].lifeMax > 5 && (this.friendly && !this.hostile) && this.aiStyle != 59)
                    {
                      if (Main.npc[index1].canGhostHeal)
                      {
                        if (Main.player[this.owner].ghostHeal && !Main.player[this.owner].moonLeech)
                          this.ghostHeal(dmg, new Vector2(Main.npc[index1].Center.X, Main.npc[index1].Center.Y));
                        if (Main.player[this.owner].ghostHurt)
                          this.ghostHurt(dmg, new Vector2(Main.npc[index1].Center.X, Main.npc[index1].Center.Y));
                        if (Main.player[this.owner].setNebula && Main.player[this.owner].nebulaCD == 0 && Main.rand.Next(3) == 0)
                        {
                          Main.player[this.owner].nebulaCD = 30;
                          int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 3453, 3454, 3455 });
                          int number = Item.NewItem((int) Main.npc[index1].position.X, (int) Main.npc[index1].position.Y, Main.npc[index1].width, Main.npc[index1].height, Type, 1, false, 0, false, false);
                          Main.item[number].velocity.Y = (float) Main.rand.Next(-20, 1) * 0.2f;
                          Main.item[number].velocity.X = (float) Main.rand.Next(10, 31) * 0.2f * (float) this.direction;
                          if (Main.netMode == 1)
                            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                        }
                      }
                      if (this.melee && Main.player[this.owner].beetleOffense && !Main.npc[index1].immortal)
                      {
                        if (Main.player[this.owner].beetleOrbs == 0)
                          Main.player[this.owner].beetleCounter += (float) (dmg * 3);
                        else if (Main.player[this.owner].beetleOrbs == 1)
                          Main.player[this.owner].beetleCounter += (float) (dmg * 2);
                        else
                          Main.player[this.owner].beetleCounter += (float) dmg;
                        Main.player[this.owner].beetleCountdown = 0;
                      }
                      if (this.arrow && this.type != 631 && Main.player[this.owner].phantasmTime > 0)
                      {
                        Vector2 Source = Main.player[this.owner].position + Main.player[this.owner].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f);
                        Vector2 vector2 = Main.npc[index1].DirectionFrom(Source) * 6f;
                        int Damage2 = (int) ((double) this.damage * 0.300000011920929);
                        Projectile.NewProjectile(Source.X, Source.Y, vector2.X, vector2.Y, 631, Damage2, 0.0f, this.owner, (float) index1, 0.0f);
                        Projectile.NewProjectile(Source.X, Source.Y, vector2.X, vector2.Y, 631, Damage2, 0.0f, this.owner, (float) index1, 15f);
                        Projectile.NewProjectile(Source.X, Source.Y, vector2.X, vector2.Y, 631, Damage2, 0.0f, this.owner, (float) index1, 30f);
                      }
                    }
                  }
                  if (flag4 && this.melee && (int) Main.player[this.owner].meleeEnchant == 7)
                    Projectile.NewProjectile(Main.npc[index1].Center.X, Main.npc[index1].Center.Y, Main.npc[index1].velocity.X, Main.npc[index1].velocity.Y, 289, 0, 0.0f, this.owner, 0.0f, 0.0f);
                  if (Main.netMode != 0)
                  {
                    if (crit)
                      NetMessage.SendData(28, -1, -1, (NetworkText) null, index1, (float) Damage1, this.knockBack, (float) this.direction, 1, 0, 0);
                    else
                      NetMessage.SendData(28, -1, -1, (NetworkText) null, index1, (float) Damage1, this.knockBack, (float) this.direction, 0, 0, 0);
                  }
                  if (this.type >= 390 && this.type <= 392)
                    this.localAI[1] = 20f;
                  if (this.usesIDStaticNPCImmunity)
                  {
                    Main.npc[index1].immune[this.owner] = 0;
                    Projectile.perIDStaticNPCImmunity[this.type][index1] = Main.GameUpdateCount + (uint) this.idStaticNPCHitCooldown;
                  }
                  else if (this.type == 434)
                    this.numUpdates = 0;
                  else if (this.type == 598 || this.type == 636 || this.type == 614)
                  {
                    this.damage = 0;
                    int length = 6;
                    if (this.type == 614)
                      length = 10;
                    if (this.type == 636)
                      length = 8;
                    Point[] pointArray = new Point[length];
                    int num2 = 0;
                    for (int x = 0; x < 1000; ++x)
                    {
                      if (x != this.whoAmI && Main.projectile[x].active && (Main.projectile[x].owner == Main.myPlayer && Main.projectile[x].type == this.type) && ((double) Main.projectile[x].ai[0] == 1.0 && (double) Main.projectile[x].ai[1] == (double) index1))
                      {
                        pointArray[num2++] = new Point(x, Main.projectile[x].timeLeft);
                        if (num2 >= pointArray.Length)
                          break;
                      }
                    }
                    if (num2 >= pointArray.Length)
                    {
                      int index2 = 0;
                      for (int index3 = 1; index3 < pointArray.Length; ++index3)
                      {
                        if (pointArray[index3].Y < pointArray[index2].Y)
                          index2 = index3;
                      }
                      Main.projectile[pointArray[index2].X].Kill();
                    }
                  }
                  else if (this.type == 632)
                    Main.npc[index1].immune[this.owner] = 5;
                  else if (this.type == 514)
                    Main.npc[index1].immune[this.owner] = 1;
                  else if (this.type == 611)
                  {
                    if ((double) this.localAI[1] <= 0.0)
                      Projectile.NewProjectile(Main.npc[index1].Center.X, Main.npc[index1].Center.Y, 0.0f, 0.0f, 612, this.damage, 10f, this.owner, 0.0f, (float) (0.850000023841858 + (double) Main.rand.NextFloat() * 1.14999997615814));
                    this.localAI[1] = 4f;
                  }
                  else if (this.type == 595)
                    Main.npc[index1].immune[this.owner] = 5;
                  else if (this.type >= 625 && this.type <= 628)
                    Main.npc[index1].immune[this.owner] = 6;
                  else if (this.type == 286)
                    Main.npc[index1].immune[this.owner] = 5;
                  else if (this.type == 514)
                    Main.npc[index1].immune[this.owner] = 3;
                  else if (this.type == 443)
                    Main.npc[index1].immune[this.owner] = 8;
                  else if (this.type >= 424 && this.type <= 426)
                    Main.npc[index1].immune[this.owner] = 5;
                  else if (this.type == 634 || this.type == 635)
                    Main.npc[index1].immune[this.owner] = 5;
                  else if (this.type == 659)
                    Main.npc[index1].immune[this.owner] = 5;
                  else if (this.type == 246)
                    Main.npc[index1].immune[this.owner] = 7;
                  else if (this.type == 249)
                    Main.npc[index1].immune[this.owner] = 7;
                  else if (this.type == 190)
                    Main.npc[index1].immune[this.owner] = 8;
                  else if (this.type == 409)
                    Main.npc[index1].immune[this.owner] = 6;
                  else if (this.type == 407)
                    Main.npc[index1].immune[this.owner] = 20;
                  else if (this.type == 311)
                    Main.npc[index1].immune[this.owner] = 7;
                  else if (this.type == 582)
                  {
                    Main.npc[index1].immune[this.owner] = 7;
                    if ((double) this.ai[0] != 1.0)
                    {
                      this.ai[0] = 1f;
                      this.netUpdate = true;
                    }
                  }
                  else
                  {
                    if (this.type == 451)
                    {
                      if ((double) this.ai[0] == 0.0)
                        this.ai[0] += (float) this.penetrate;
                      else
                        this.ai[0] -= (float) (this.penetrate + 1);
                      this.ai[1] = 0.0f;
                      this.netUpdate = true;
                      break;
                    }
                    if (this.type == 661)
                    {
                      this.localNPCImmunity[index1] = 8;
                      Main.npc[index1].immune[this.owner] = 0;
                    }
                    else if (this.usesLocalNPCImmunity && this.localNPCHitCooldown != -2)
                    {
                      Main.npc[index1].immune[this.owner] = 0;
                      this.localNPCImmunity[index1] = this.localNPCHitCooldown;
                    }
                    else if (this.penetrate != 1)
                      Main.npc[index1].immune[this.owner] = 10;
                  }
                  if (this.type == 710)
                    this.BetsySharpnel(index1);
                  if (this.penetrate > 0 && this.type != 317)
                  {
                    if (this.type == 357)
                      this.damage = (int) ((double) this.damage * 0.9);
                    this.penetrate = this.penetrate - 1;
                    if (this.penetrate == 0)
                      break;
                  }
                  if (this.aiStyle == 7)
                  {
                    this.ai[0] = 1f;
                    this.damage = 0;
                    this.netUpdate = true;
                  }
                  else if (this.aiStyle == 13)
                  {
                    this.ai[0] = 1f;
                    this.netUpdate = true;
                  }
                  else if (this.aiStyle == 69)
                  {
                    this.ai[0] = 1f;
                    this.netUpdate = true;
                  }
                  else if (this.type == 607)
                  {
                    this.ai[0] = 1f;
                    this.netUpdate = true;
                    this.friendly = false;
                  }
                  else if (this.type == 638 || this.type == 639 || this.type == 640)
                  {
                    this.localNPCImmunity[index1] = -1;
                    Main.npc[index1].immune[this.owner] = 0;
                    this.damage = (int) ((double) this.damage * 0.96);
                  }
                  else if (this.type == 617)
                  {
                    this.localNPCImmunity[index1] = 8;
                    Main.npc[index1].immune[this.owner] = 0;
                  }
                  else if (this.type == 656)
                  {
                    this.localNPCImmunity[index1] = 8;
                    Main.npc[index1].immune[this.owner] = 0;
                    ++this.localAI[0];
                  }
                  else if (this.type == 618)
                  {
                    this.localNPCImmunity[index1] = 20;
                    Main.npc[index1].immune[this.owner] = 0;
                  }
                  else if (this.type == 642)
                  {
                    this.localNPCImmunity[index1] = 10;
                    Main.npc[index1].immune[this.owner] = 0;
                  }
                  else if (this.type == 611 || this.type == 612)
                  {
                    this.localNPCImmunity[index1] = 6;
                    Main.npc[index1].immune[this.owner] = 4;
                  }
                  else if (this.type == 645)
                  {
                    this.localNPCImmunity[index1] = -1;
                    Main.npc[index1].immune[this.owner] = 0;
                    if ((double) this.ai[1] != -1.0)
                    {
                      this.ai[0] = 0.0f;
                      this.ai[1] = -1f;
                      this.netUpdate = true;
                    }
                  }
                  this.numHits = this.numHits + 1;
                  if (this.type == 697)
                  {
                    if ((double) this.ai[0] >= 42.0)
                      this.localAI[1] = 1f;
                  }
                  else if (this.type == 699)
                    this.SummonMonkGhast();
                  else if (this.type == 706)
                    this.damage = (int) ((double) this.damage * 0.949999988079071);
                }
              }
            }
          }
        }
        if (this.damage > 0 && Main.player[Main.myPlayer].hostile)
        {
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (index != this.owner && Main.player[index].active && (!Main.player[index].dead && !Main.player[index].immune) && (Main.player[index].hostile && this.playerImmune[index] <= 0 && (Main.player[Main.myPlayer].team == 0 || Main.player[Main.myPlayer].team != Main.player[index].team)) && ((!this.ownerHitCheck || this.CanHit((Entity) Main.player[index])) && this.Colliding(myRect, Main.player[index].getRect())))
            {
              if (this.aiStyle == 3)
              {
                if ((double) this.ai[0] == 0.0)
                {
                  this.velocity.X = -this.velocity.X;
                  this.velocity.Y = -this.velocity.Y;
                  this.netUpdate = true;
                }
                this.ai[0] = 1f;
              }
              else if (this.aiStyle == 16)
              {
                if (this.timeLeft > 3)
                  this.timeLeft = 3;
                if ((double) Main.player[index].position.X + (double) (Main.player[index].width / 2) < (double) this.position.X + (double) (this.width / 2))
                  this.direction = -1;
                else
                  this.direction = 1;
              }
              else if (this.aiStyle == 68)
              {
                if (this.timeLeft > 3)
                  this.timeLeft = 3;
                if ((double) Main.player[index].position.X + (double) (Main.player[index].width / 2) < (double) this.position.X + (double) (this.width / 2))
                  this.direction = -1;
                else
                  this.direction = 1;
              }
              PlayerDeathReason playerDeathReason = PlayerDeathReason.ByProjectile(this.owner, this.whoAmI);
              if (this.type == 41 && this.timeLeft > 1)
                this.timeLeft = 1;
              bool flag = false;
              if (this.melee && Main.rand.Next(1, 101) <= Main.player[this.owner].meleeCrit)
                flag = true;
              int num = Main.DamageVar((float) this.damage);
              if (!Main.player[index].immune)
                this.StatusPvP(index);
              if (this.type != 221 && this.type != 227 && this.type != 614)
                Main.player[this.owner].OnHit(Main.player[index].Center.X, Main.player[index].Center.Y, (Entity) Main.player[index]);
              int dmg = (int) Main.player[index].Hurt(playerDeathReason, num, this.direction, true, false, flag, -1);
              if (dmg > 0 && Main.player[this.owner].ghostHeal && (this.friendly && !this.hostile))
                this.ghostHeal(dmg, new Vector2(Main.player[index].Center.X, Main.player[index].Center.Y));
              if (this.type == 304 && dmg > 0)
                this.vampireHeal(dmg, new Vector2(Main.player[index].Center.X, Main.player[index].Center.Y));
              if (this.melee && (int) Main.player[this.owner].meleeEnchant == 7)
                Projectile.NewProjectile(Main.player[index].Center.X, Main.player[index].Center.Y, Main.player[index].velocity.X, Main.player[index].velocity.Y, 289, 0, 0.0f, this.owner, 0.0f, 0.0f);
              if (Main.netMode != 0)
                NetMessage.SendPlayerHurt(index, playerDeathReason, num, this.direction, flag, true, 0, -1, -1);
              this.playerImmune[index] = 40;
              if (this.penetrate > 0)
              {
                this.penetrate = this.penetrate - 1;
                if (this.penetrate == 0)
                  break;
              }
              if (this.aiStyle == 7)
              {
                this.ai[0] = 1f;
                this.damage = 0;
                this.netUpdate = true;
              }
              else if (this.aiStyle == 13)
              {
                this.ai[0] = 1f;
                this.netUpdate = true;
              }
              else if (this.aiStyle == 69)
              {
                this.ai[0] = 1f;
                this.netUpdate = true;
              }
            }
          }
        }
      }
      if (this.type == 10 && Main.netMode != 1)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active && Main.npc[index].type == 534)
          {
            Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
            if (myRect.Intersects(rectangle))
              Main.npc[index].Transform(441);
          }
        }
      }
      if (this.type == 11 && Main.netMode != 1)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active)
          {
            if (Main.npc[index].type == 46 || Main.npc[index].type == 303)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (myRect.Intersects(rectangle))
                Main.npc[index].Transform(47);
            }
            else if (Main.npc[index].type == 55)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (myRect.Intersects(rectangle))
                Main.npc[index].Transform(57);
            }
            else if (Main.npc[index].type == 148 || Main.npc[index].type == 149)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (myRect.Intersects(rectangle))
                Main.npc[index].Transform(168);
            }
          }
        }
      }
      if (this.type == 463 && Main.netMode != 1)
      {
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].active)
          {
            if (Main.npc[index].type == 46 || Main.npc[index].type == 303)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (myRect.Intersects(rectangle))
                Main.npc[index].Transform(464);
            }
            else if (Main.npc[index].type == 55)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (myRect.Intersects(rectangle))
                Main.npc[index].Transform(465);
            }
            else if (Main.npc[index].type == 148 || Main.npc[index].type == 149)
            {
              Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (myRect.Intersects(rectangle))
                Main.npc[index].Transform(470);
            }
          }
        }
      }
      if (Main.netMode == 2 || !this.hostile || (Main.myPlayer >= (int) byte.MaxValue || this.damage <= 0))
        return;
      int cooldownCounter = -1;
      if (this.type == 455 || this.type == 452 || (this.type == 454 || this.type == 462))
        cooldownCounter = 1;
      int player1 = Main.myPlayer;
      if (!Main.player[player1].active || Main.player[player1].dead || Main.player[player1].immune && cooldownCounter == -1 || !this.Colliding(myRect, Main.player[player1].getRect()))
        return;
      int direction = this.direction;
      int hitDirection1 = (double) Main.player[player1].position.X + (double) (Main.player[player1].width / 2) >= (double) this.position.X + (double) (this.width / 2) ? 1 : -1;
      if (!Main.player[player1].CanParryAgainst(Main.player[player1].Hitbox, this.Hitbox, this.velocity))
      {
        int num = Main.DamageVar((float) this.damage);
        if (!Main.player[player1].immune)
          this.StatusPlayer(player1);
        if (Main.player[player1].resistCold && this.coldDamage)
          num = (int) ((double) num * 0.699999988079071);
        if (Main.expertMode)
          num = (int) ((double) num * (double) Main.expertDamage);
        Main.player[player1].Hurt(PlayerDeathReason.ByProjectile(-1, this.whoAmI), num * 2, hitDirection1, false, false, false, cooldownCounter);
        if (this.trap)
        {
          Main.player[player1].trapDebuffSource = true;
          if (Main.player[player1].dead)
            AchievementsHelper.HandleSpecialEvent(Main.player[player1], 4);
        }
      }
      if (1 == 0)
        return;
      if (this.type == 435 || this.type == 682)
        this.penetrate = this.penetrate - 1;
      if (this.type == 436)
        this.penetrate = this.penetrate - 1;
      if (this.type == 681)
        this.timeLeft = 0;
      if (this.type != 437)
        return;
      this.penetrate = this.penetrate - 1;
    }

    private void SummonMonkGhast()
    {
      if ((double) this.localAI[0] > 0.0)
        return;
      this.localAI[0] = 1000f;
      List<NPC> npcList = new List<NPC>();
      for (int index = 0; index < 200; ++index)
      {
        NPC npc = Main.npc[index];
        if (npc.CanBeChasedBy((object) this, false) && (double) this.Distance(npc.Center) < 800.0)
          npcList.Add(npc);
      }
      Vector2 center = this.Center;
      Vector2 vector2_1 = Vector2.Zero;
      if (npcList.Count > 0)
      {
        NPC npc = npcList[Main.rand.Next(npcList.Count)];
        center = npc.Center;
        vector2_1 = npc.velocity;
      }
      int num = Main.rand.Next(2) * 2 - 1;
      Vector2 vector2_2 = new Vector2((float) num * (4f + (float) Main.rand.Next(3)), 0.0f);
      Vector2 position = center + new Vector2((float) (-num * 120), 0.0f);
      Vector2 velocity = vector2_2 + (center + vector2_1 * 15f - position).SafeNormalize(Vector2.Zero) * 2f;
      Projectile.NewProjectile(position, velocity, 700, this.damage, 0.0f, this.owner, 0.0f, 0.0f);
    }

    private void CutTiles()
    {
      if (!this.CanCutTiles())
        return;
      int num1 = (int) ((double) this.position.X / 16.0);
      int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 1;
      int num3 = (int) ((double) this.position.Y / 16.0);
      int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 1;
      if (num1 < 0)
        num1 = 0;
      if (num2 > Main.maxTilesX)
        num2 = Main.maxTilesX;
      if (num3 < 0)
        num3 = 0;
      if (num4 > Main.maxTilesY)
        num4 = Main.maxTilesY;
      AchievementsHelper.CurrentlyMining = true;
      for (int index1 = num1; index1 < num2; ++index1)
      {
        for (int index2 = num3; index2 < num4; ++index2)
        {
          if (Main.tile[index1, index2] != null && Main.tileCut[(int) Main.tile[index1, index2].type] && WorldGen.CanCutTile(index1, index2, TileCuttingContext.AttackProjectile))
          {
            WorldGen.KillTile(index1, index2, false, false, false);
            if (Main.netMode != 0)
              NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) index1, (float) index2, 0.0f, 0, 0, 0);
          }
        }
      }
      if (this.type == 461 || this.type == 632 || this.type == 642)
      {
        DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CutTiles));
      }
      else if (this.type == 611)
      {
        DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
        Utils.PlotTileLine(this.Center, this.Center + this.velocity, (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CutTiles));
      }
      else if (this.type == 697 || this.type == 707)
      {
        float num5 = 40f;
        if (this.type == 707)
          num5 = 60f;
        float f = this.rotation - 0.7853982f * (float) Math.Sign(this.velocity.X);
        DelegateMethods.tilecut_0 = TileCuttingContext.AttackProjectile;
        Utils.PlotTileLine(this.Center + f.ToRotationVector2() * -num5, this.Center + f.ToRotationVector2() * num5, (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CutTiles));
      }
      AchievementsHelper.CurrentlyMining = false;
    }

    private bool CanCutTiles()
    {
      if (this.aiStyle == 45 || this.aiStyle == 137 || (this.aiStyle == 92 || this.aiStyle == 105) || (this.aiStyle == 106 || this.type == 463 || (this.type == 69 || this.type == 70)) || (this.type == 621 || this.type == 10 || (this.type == 11 || this.type == 379) || (this.type == 407 || this.type == 476 || this.type == 623)))
        return false;
      if (this.type >= 625)
        return this.type > 628;
      return true;
    }

    public bool Colliding(Microsoft.Xna.Framework.Rectangle myRect, Microsoft.Xna.Framework.Rectangle targetRect)
    {
      if (this.type == 598 && targetRect.Width > 8 && targetRect.Height > 8)
        targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
      else if (this.type == 614 && targetRect.Width > 8 && targetRect.Height > 8)
        targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
      else if (this.type == 636 && targetRect.Width > 8 && targetRect.Height > 8)
        targetRect.Inflate(-targetRect.Width / 8, -targetRect.Height / 8);
      else if (this.type == 607)
      {
        myRect.X += (int) this.velocity.X;
        myRect.Y += (int) this.velocity.Y;
      }
      else if (this.type == 661)
      {
        if ((double) Vector2.Distance(myRect.Center.ToVector2(), targetRect.Center.ToVector2()) > 500.0 || !Collision.CanHitLine(myRect.Center.ToVector2(), 0, 0, targetRect.Center.ToVector2(), 0, 0))
          return false;
      }
      else if (this.aiStyle == 137)
        return myRect.Intersects(targetRect) && (double) targetRect.Distance(this.Center) < (double) (this.height / 2 - 20) && (this.AI_137_CanHit(targetRect.Center.ToVector2()) || this.AI_137_CanHit(targetRect.TopLeft() + new Vector2((float) (targetRect.Width / 2), 0.0f)));
      if (myRect.Intersects(targetRect))
        return true;
      if (this.type == 461)
      {
        float collisionPoint = 0.0f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 697 || this.type == 707)
      {
        float f = this.rotation - 0.7853982f * (float) Math.Sign(this.velocity.X);
        float collisionPoint = 0.0f;
        float num = 50f;
        if (this.type == 707)
          num = 110f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center + f.ToRotationVector2() * -num, this.Center + f.ToRotationVector2() * num, 23f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 699)
      {
        float f = (float) ((double) this.rotation - 0.785398185253143 * (double) Math.Sign(this.velocity.X) + (this.spriteDirection == -1 ? 3.14159274101257 : 0.0));
        float collisionPoint = 0.0f;
        float num = -95f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + f.ToRotationVector2() * num, 23f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 642)
      {
        float collisionPoint = 0.0f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 30f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 632)
      {
        float collisionPoint = 0.0f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 455)
      {
        float collisionPoint = 0.0f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 36f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 611)
      {
        float collisionPoint = 0.0f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity, 16f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 684)
      {
        float collisionPoint = 0.0f;
        Vector2 vector2 = this.velocity.SafeNormalize(Vector2.UnitY).RotatedBy(-1.57079637050629, new Vector2()) * this.scale;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center - vector2 * 40f, this.Center + vector2 * 40f, 16f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 537)
      {
        float collisionPoint = 0.0f;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), this.Center, this.Center + this.velocity * this.localAI[1], 22f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 687)
      {
        float collisionPoint = 0.0f;
        float num1 = this.ai[0] / 25f;
        if ((double) num1 > 1.0)
          num1 = 1f;
        float num2 = (float) (((double) this.ai[0] - 38.0) / 40.0);
        if ((double) num2 < 0.0)
          num2 = 0.0f;
        Vector2 lineStart = this.Center + this.rotation.ToRotationVector2() * 400f * num2;
        Vector2 lineEnd = this.Center + this.rotation.ToRotationVector2() * 400f * num1;
        if (Collision.CheckAABBvLineCollision(targetRect.TopLeft(), targetRect.Size(), lineStart, lineEnd, 40f * this.scale, ref collisionPoint))
          return true;
      }
      else if (this.type == 466 || this.type == 580 || this.type == 686)
      {
        for (int index = 0; index < this.oldPos.Length && ((double) this.oldPos[index].X != 0.0 || (double) this.oldPos[index].Y != 0.0); ++index)
        {
          myRect.X = (int) this.oldPos[index].X;
          myRect.Y = (int) this.oldPos[index].Y;
          if (myRect.Intersects(targetRect))
            return true;
        }
      }
      else if (this.type == 711)
      {
        if (this.penetrate != -1)
        {
          for (int index = 0; index < this.oldPos.Length && ((double) this.oldPos[index].X != 0.0 || (double) this.oldPos[index].Y != 0.0); ++index)
          {
            myRect.X = (int) this.oldPos[index].X;
            myRect.Y = (int) this.oldPos[index].Y;
            if (myRect.Intersects(targetRect))
              return true;
          }
        }
      }
      else if (this.type == 464 && (double) this.ai[1] != 1.0)
      {
        Vector2 spinningpoint = new Vector2(0.0f, -720f).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) ((double) this.ai[0] % 45.0 / 45.0);
        for (int index = 0; index < 6; ++index)
        {
          float num = (float) ((double) index * 6.28318548202515 / 6.0);
          if (Utils.CenteredRectangle(this.Center + spinningpoint.RotatedBy((double) num, new Vector2()), new Vector2(30f, 30f)).Intersects(targetRect))
            return true;
        }
      }
      return false;
    }

    public void ProjLight()
    {
      if ((double) this.light <= 0.0)
        return;
      float R = this.light;
      float G = this.light;
      float B = this.light;
      if (this.type == 446)
      {
        R *= 0.0f;
        B *= 0.8f;
      }
      else if (this.type == 493 || this.type == 494)
        G *= 0.3f;
      else if (this.type == 332)
      {
        B *= 0.1f;
        G *= 0.6f;
      }
      else if (this.type == 259)
        B *= 0.1f;
      else if (this.type == 329)
      {
        B *= 0.1f;
        G *= 0.9f;
      }
      else if (this.type == 2 || this.type == 82)
      {
        G *= 0.75f;
        B *= 0.55f;
      }
      else if (this.type == 172)
      {
        G *= 0.55f;
        R *= 0.35f;
      }
      else if (this.type == 308)
      {
        G *= 0.7f;
        R *= 0.1f;
      }
      else if (this.type == 304)
      {
        G *= 0.2f;
        B *= 0.1f;
      }
      else if (this.type == 263)
      {
        G *= 0.7f;
        R *= 0.1f;
      }
      else if (this.type == 274)
      {
        G *= 0.1f;
        R *= 0.7f;
      }
      else if (this.type == 254)
        R *= 0.1f;
      else if (this.type == 94)
      {
        R *= 0.5f;
        G *= 0.0f;
      }
      else if (this.type == 95 || this.type == 96 || (this.type == 103 || this.type == 104))
      {
        R *= 0.35f;
        G *= 1f;
        B *= 0.0f;
      }
      else if (this.type == 4)
      {
        G *= 0.1f;
        R *= 0.5f;
      }
      else if (this.type == 257)
      {
        G *= 0.9f;
        R *= 0.1f;
      }
      else if (this.type == 9)
      {
        G *= 0.1f;
        B *= 0.6f;
      }
      else if (this.type == 488)
      {
        R = 0.3f;
        B = 0.25f;
        G = 0.0f;
      }
      else if (this.type == 92)
      {
        G *= 0.6f;
        R *= 0.8f;
      }
      else if (this.type == 93)
      {
        G *= 1f;
        R *= 1f;
        B *= 0.01f;
      }
      else if (this.type == 12)
      {
        R *= 0.9f;
        G *= 0.8f;
        B *= 0.1f;
      }
      else if (this.type == 14 || this.type == 110 || (this.type == 180 || this.type == 242) || this.type == 302)
      {
        G *= 0.7f;
        B *= 0.1f;
      }
      else if (this.type == 15)
      {
        G *= 0.4f;
        B *= 0.1f;
        R = 1f;
      }
      else if (this.type == 16)
      {
        R *= 0.1f;
        G *= 0.4f;
        B = 1f;
      }
      else if (this.type == 18)
      {
        G *= 0.1f;
        R *= 0.6f;
      }
      else if (this.type == 19)
      {
        G *= 0.5f;
        B *= 0.1f;
      }
      else if (this.type == 20)
      {
        R *= 0.1f;
        B *= 0.3f;
      }
      else if (this.type == 22)
      {
        R = 0.0f;
        G = 0.0f;
      }
      else if (this.type == 27)
      {
        R *= 0.0f;
        G *= 0.3f;
        B = 1f;
      }
      else if (this.type == 34)
      {
        G *= 0.1f;
        B *= 0.1f;
      }
      else if (this.type == 36)
      {
        R = 0.8f;
        G *= 0.2f;
        B *= 0.6f;
      }
      else if (this.type == 41)
      {
        G *= 0.8f;
        B *= 0.6f;
      }
      else if (this.type == 44 || this.type == 45)
      {
        B = 1f;
        R *= 0.6f;
        G *= 0.1f;
      }
      else if (this.type == 50)
      {
        R *= 0.7f;
        B *= 0.8f;
      }
      else if (this.type == 515)
      {
        G *= 0.6f;
        B *= 0.85f;
      }
      else if (this.type == 53)
      {
        R *= 0.7f;
        G *= 0.8f;
      }
      else if (this.type == 473)
      {
        R *= 1.05f;
        G *= 0.95f;
        B *= 0.55f;
      }
      else if (this.type == 72)
      {
        R *= 0.45f;
        G *= 0.75f;
        B = 1f;
      }
      else if (this.type == 86)
      {
        R *= 1f;
        G *= 0.45f;
        B = 0.75f;
      }
      else if (this.type == 87)
      {
        R *= 0.45f;
        G = 1f;
        B *= 0.75f;
      }
      else if (this.type == 73)
      {
        R *= 0.4f;
        G *= 0.6f;
        B *= 1f;
      }
      else if (this.type == 74)
      {
        R *= 1f;
        G *= 0.4f;
        B *= 0.6f;
      }
      else if (this.type == 284)
      {
        R *= 1f;
        G *= 0.1f;
        B *= 0.8f;
      }
      else if (this.type == 285)
      {
        R *= 0.1f;
        G *= 0.5f;
        B *= 1f;
      }
      else if (this.type == 286)
      {
        R *= 1f;
        G *= 0.5f;
        B *= 0.1f;
      }
      else if (this.type == 287)
      {
        R *= 0.9f;
        G *= 1f;
        B *= 0.4f;
      }
      else if (this.type == 283)
      {
        R *= 0.8f;
        G *= 0.1f;
      }
      else if (this.type == 76 || this.type == 77 || this.type == 78)
      {
        R *= 1f;
        G *= 0.3f;
        B *= 0.6f;
      }
      else if (this.type == 79)
      {
        R = (float) Main.DiscoR / (float) byte.MaxValue;
        G = (float) Main.DiscoG / (float) byte.MaxValue;
        B = (float) Main.DiscoB / (float) byte.MaxValue;
      }
      else if (this.type == 80)
      {
        R *= 0.0f;
        G *= 0.8f;
        B *= 1f;
      }
      else if (this.type == 83 || this.type == 88)
      {
        R *= 0.7f;
        G *= 0.0f;
        B *= 1f;
      }
      else if (this.type == 100)
      {
        R *= 1f;
        G *= 0.5f;
        B *= 0.0f;
      }
      else if (this.type == 84 || this.type == 389)
      {
        R *= 0.8f;
        G *= 0.0f;
        B *= 0.5f;
      }
      else if (this.type == 89 || this.type == 90)
      {
        G *= 0.2f;
        B *= 1f;
        R *= 0.05f;
      }
      else if (this.type == 106)
      {
        R *= 0.0f;
        G *= 0.5f;
        B *= 1f;
      }
      else if (this.type == 113)
      {
        R *= 0.25f;
        G *= 0.75f;
        B *= 1f;
      }
      else if (this.type == 114 || this.type == 115)
      {
        R *= 0.5f;
        G *= 0.05f;
        B *= 1f;
      }
      else if (this.type == 116)
        B *= 0.25f;
      else if (this.type == 131)
      {
        R *= 0.1f;
        G *= 0.4f;
      }
      else if (this.type == 132 || this.type == 157)
      {
        R *= 0.2f;
        B *= 0.6f;
      }
      else if (this.type == 156)
      {
        R *= 1f;
        B *= 0.6f;
        G = 0.0f;
      }
      else if (this.type == 173)
      {
        R *= 0.3f;
        B *= 1f;
        G = 0.4f;
      }
      else if (this.type == 207)
      {
        R *= 0.4f;
        B *= 0.4f;
      }
      else if (this.type == 253)
      {
        R = 0.0f;
        G *= 0.4f;
      }
      else if (this.type == 211)
      {
        R *= 0.5f;
        G *= 0.9f;
        B *= 1f;
        this.light = (double) this.localAI[0] != 0.0 ? 1f : 1.5f;
      }
      else if (this.type == 209)
      {
        float num1 = (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        float num2 = R * 0.3f;
        float num3 = G * 0.4f;
        B = B * 1.75f * num1;
        R = num2 * num1;
        G = num3 * num1;
      }
      else if (this.type == 226 || this.type == 227 | this.type == 229)
      {
        R *= 0.25f;
        G *= 1f;
        B *= 0.5f;
      }
      else if (this.type == 251)
      {
        float num1 = (float) Main.DiscoR / (float) byte.MaxValue;
        float num2 = (float) Main.DiscoG / (float) byte.MaxValue;
        float num3 = (float) Main.DiscoB / (float) byte.MaxValue;
        float num4 = (float) (((double) num1 + 1.0) / 2.0);
        float num5 = (float) (((double) num2 + 1.0) / 2.0);
        float num6 = (float) (((double) num3 + 1.0) / 2.0);
        R = num4 * this.light;
        G = num5 * this.light;
        B = num6 * this.light;
      }
      else if (this.type == 278 || this.type == 279)
      {
        R *= 1f;
        G *= 1f;
        B *= 0.0f;
      }
      Lighting.AddLight((int) (((double) this.position.X + (double) (this.width / 2)) / 16.0), (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0), R, G, B);
    }

    public Microsoft.Xna.Framework.Rectangle getRect()
    {
      return new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
    }

    public void Update(int i)
    {
      if (!this.active)
        return;
      this.numUpdates = this.extraUpdates;
      while (this.numUpdates >= 0)
      {
        this.numUpdates = this.numUpdates - 1;
        if (this.type == 640 && (double) this.ai[1] > 0.0)
        {
          --this.ai[1];
        }
        else
        {
          if ((double) this.position.X <= (double) Main.leftWorld || (double) this.position.X + (double) this.width >= (double) Main.rightWorld || ((double) this.position.Y <= (double) Main.topWorld || (double) this.position.Y + (double) this.height >= (double) Main.bottomWorld))
          {
            this.active = false;
            return;
          }
          if (this.type != 344 && !this.npcProj)
          {
            if (Main.player[this.owner].frostBurn && (this.melee || this.ranged) && (this.friendly && !this.hostile && (!this.noEnchantments && Main.rand.Next(2 * (1 + this.extraUpdates)) == 0)))
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 135, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2f);
              Main.dust[index].noGravity = true;
              Main.dust[index].velocity *= 0.7f;
              Main.dust[index].velocity.Y -= 0.5f;
            }
            if (this.melee && (int) Main.player[this.owner].meleeEnchant > 0 && !this.noEnchantments)
            {
              if ((int) Main.player[this.owner].meleeEnchant == 1 && Main.rand.Next(3) == 0)
              {
                int index = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].fadeIn = 1.5f;
                Main.dust[index].velocity *= 0.25f;
              }
              if ((int) Main.player[this.owner].meleeEnchant == 1)
              {
                if (Main.rand.Next(3) == 0)
                {
                  int index = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100, new Color(), 1f);
                  Main.dust[index].noGravity = true;
                  Main.dust[index].fadeIn = 1.5f;
                  Main.dust[index].velocity *= 0.25f;
                }
              }
              else if ((int) Main.player[this.owner].meleeEnchant == 2)
              {
                if (Main.rand.Next(2) == 0)
                {
                  int index = Dust.NewDust(this.position, this.width, this.height, 75, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2.5f);
                  Main.dust[index].noGravity = true;
                  Main.dust[index].velocity *= 0.7f;
                  Main.dust[index].velocity.Y -= 0.5f;
                }
              }
              else if ((int) Main.player[this.owner].meleeEnchant == 3)
              {
                if (Main.rand.Next(2) == 0)
                {
                  int index = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 2.5f);
                  Main.dust[index].noGravity = true;
                  Main.dust[index].velocity *= 0.7f;
                  Main.dust[index].velocity.Y -= 0.5f;
                }
              }
              else if ((int) Main.player[this.owner].meleeEnchant == 4)
              {
                if (Main.rand.Next(2) == 0)
                {
                  int index = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 1.1f);
                  Main.dust[index].noGravity = true;
                  Main.dust[index].velocity.X /= 2f;
                  Main.dust[index].velocity.Y /= 2f;
                }
              }
              else if ((int) Main.player[this.owner].meleeEnchant == 5)
              {
                if (Main.rand.Next(2) == 0)
                {
                  int index = Dust.NewDust(this.position, this.width, this.height, 169, 0.0f, 0.0f, 100, new Color(), 1f);
                  Main.dust[index].velocity.X += (float) this.direction;
                  Main.dust[index].velocity.Y += 0.2f;
                  Main.dust[index].noGravity = true;
                }
              }
              else if ((int) Main.player[this.owner].meleeEnchant == 6)
              {
                if (Main.rand.Next(2) == 0)
                {
                  int index = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 1f);
                  Main.dust[index].velocity.X += (float) this.direction;
                  Main.dust[index].velocity.Y += 0.2f;
                  Main.dust[index].noGravity = true;
                }
              }
              else if ((int) Main.player[this.owner].meleeEnchant == 7)
              {
                Vector2 velocity = this.velocity;
                if ((double) velocity.Length() > 4.0)
                  velocity *= 4f / velocity.Length();
                if (Main.rand.Next(20) == 0)
                {
                  int index = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(139, 143), velocity.X, velocity.Y, 0, new Color(), 1.2f);
                  Main.dust[index].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                  Main.dust[index].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                  Main.dust[index].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                  Main.dust[index].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                  Main.dust[index].scale *= (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
                }
                if (Main.rand.Next(40) == 0)
                {
                  int Type = Main.rand.Next(276, 283);
                  int index = Gore.NewGore(this.position, velocity, Type, 1f);
                  Main.gore[index].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                  Main.gore[index].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
                  Main.gore[index].scale *= (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
                  Main.gore[index].velocity.X += (float) Main.rand.Next(-50, 51) * 0.05f;
                  Main.gore[index].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.05f;
                }
              }
              else if ((int) Main.player[this.owner].meleeEnchant == 8 && Main.rand.Next(4) == 0)
              {
                int index = Dust.NewDust(this.position, this.width, this.height, 46, 0.0f, 0.0f, 100, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].fadeIn = 1.5f;
                Main.dust[index].velocity *= 0.25f;
              }
            }
            if (this.melee && Main.player[this.owner].magmaStone && (!this.noEnchantments && Main.rand.Next(3) != 0))
            {
              int index = Dust.NewDust(new Vector2(this.position.X - 4f, this.position.Y - 4f), this.width + 8, this.height + 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
              if (Main.rand.Next(2) == 0)
                Main.dust[index].scale = 1.5f;
              Main.dust[index].noGravity = true;
              Main.dust[index].velocity.X *= 2f;
              Main.dust[index].velocity.Y *= 2f;
            }
          }
          if (this.minion && this.numUpdates == -1 && (this.type != 625 && this.type != 628))
          {
            this.minionPos = Main.player[this.owner].numMinions;
            if ((double) Main.player[this.owner].slotsMinions + (double) this.minionSlots > (double) Main.player[this.owner].maxMinions && this.owner == Main.myPlayer)
            {
              if (this.type == 627 || this.type == 626)
              {
                int byUuid = Projectile.GetByUUID(this.owner, this.ai[0]);
                if (byUuid != -1)
                {
                  Projectile projectile1 = Main.projectile[byUuid];
                  if (projectile1.type != 625)
                    projectile1.localAI[1] = this.localAI[1];
                  Projectile projectile2 = Main.projectile[(int) this.localAI[1]];
                  projectile2.ai[0] = this.ai[0];
                  projectile2.ai[1] = 1f;
                  projectile2.netUpdate = true;
                }
              }
              this.Kill();
            }
            else
            {
              ++Main.player[this.owner].numMinions;
              Main.player[this.owner].slotsMinions += this.minionSlots;
            }
          }
          float num1 = (float) (1.0 + (double) Math.Abs(this.velocity.X) / 3.0);
          if ((double) this.gfxOffY > 0.0)
          {
            this.gfxOffY = this.gfxOffY - num1 * this.stepSpeed;
            if ((double) this.gfxOffY < 0.0)
              this.gfxOffY = 0.0f;
          }
          else if ((double) this.gfxOffY < 0.0)
          {
            this.gfxOffY = this.gfxOffY + num1 * this.stepSpeed;
            if ((double) this.gfxOffY > 0.0)
              this.gfxOffY = 0.0f;
          }
          if ((double) this.gfxOffY > 16.0)
            this.gfxOffY = 16f;
          if ((double) this.gfxOffY < -16.0)
            this.gfxOffY = -16f;
          Vector2 velocity1 = this.velocity;
          this.oldVelocity = this.velocity;
          this.whoAmI = i;
          if (this.soundDelay > 0)
            this.soundDelay = this.soundDelay - 1;
          this.netUpdate = false;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (this.playerImmune[index] > 0)
              --this.playerImmune[index];
          }
          if (this.usesLocalNPCImmunity)
          {
            for (int index = 0; index < 200; ++index)
            {
              if (this.localNPCImmunity[index] > 0)
                --this.localNPCImmunity[index];
            }
          }
          this.AI();
          if (this.owner < (int) byte.MaxValue && !Main.player[this.owner].active)
            this.Kill();
          if (this.type == 242 || this.type == 302 || this.type == 638)
            this.wet = false;
          if (!this.ignoreWater)
          {
            bool flag1;
            bool flag2;
            try
            {
              flag1 = Collision.LavaCollision(this.position, this.width, this.height);
              flag2 = Collision.WetCollision(this.position, this.width, this.height);
              if (flag1)
                this.lavaWet = true;
              if (Collision.honey)
                this.honeyWet = true;
            }
            catch
            {
              this.active = false;
              return;
            }
            if (this.wet && !this.lavaWet)
            {
              if (this.type == 85 || this.type == 15 || (this.type == 34 || this.type == 188))
                this.Kill();
              if (this.type == 2)
              {
                this.type = 1;
                this.light = 0.0f;
              }
            }
            if (this.type == 80)
            {
              flag2 = false;
              this.wet = false;
              if (flag1 && (double) this.ai[0] >= 0.0)
                this.Kill();
            }
            if (flag2)
            {
              if (this.type != 155 && (int) this.wetCount == 0 && !this.wet)
              {
                if (!flag1)
                {
                  if (this.honeyWet)
                  {
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                      int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 152, 0.0f, 0.0f, 0, new Color(), 1f);
                      --Main.dust[index2].velocity.Y;
                      Main.dust[index2].velocity.X *= 2.5f;
                      Main.dust[index2].scale = 1.3f;
                      Main.dust[index2].alpha = 100;
                      Main.dust[index2].noGravity = true;
                    }
                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                  }
                  else
                  {
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                      int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
                      Main.dust[index2].velocity.Y -= 4f;
                      Main.dust[index2].velocity.X *= 2.5f;
                      Main.dust[index2].scale = 1.3f;
                      Main.dust[index2].alpha = 100;
                      Main.dust[index2].noGravity = true;
                    }
                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                  }
                }
                else
                {
                  for (int index1 = 0; index1 < 10; ++index1)
                  {
                    int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 35, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].velocity.Y -= 1.5f;
                    Main.dust[index2].velocity.X *= 2.5f;
                    Main.dust[index2].scale = 1.3f;
                    Main.dust[index2].alpha = 100;
                    Main.dust[index2].noGravity = true;
                  }
                  Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                }
              }
              this.wet = true;
            }
            else if (this.wet)
            {
              this.wet = false;
              if (this.type == 155)
                this.velocity.Y *= 0.5f;
              else if ((int) this.wetCount == 0)
              {
                this.wetCount = (byte) 10;
                if (!this.lavaWet)
                {
                  if (this.honeyWet)
                  {
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                      int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 152, 0.0f, 0.0f, 0, new Color(), 1f);
                      --Main.dust[index2].velocity.Y;
                      Main.dust[index2].velocity.X *= 2.5f;
                      Main.dust[index2].scale = 1.3f;
                      Main.dust[index2].alpha = 100;
                      Main.dust[index2].noGravity = true;
                    }
                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                  }
                  else
                  {
                    for (int index1 = 0; index1 < 10; ++index1)
                    {
                      int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y + (float) (this.height / 2)), this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
                      Main.dust[index2].velocity.Y -= 4f;
                      Main.dust[index2].velocity.X *= 2.5f;
                      Main.dust[index2].scale = 1.3f;
                      Main.dust[index2].alpha = 100;
                      Main.dust[index2].noGravity = true;
                    }
                    Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                  }
                }
                else
                {
                  for (int index1 = 0; index1 < 10; ++index1)
                  {
                    int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0)), this.width + 12, 24, 35, 0.0f, 0.0f, 0, new Color(), 1f);
                    Main.dust[index2].velocity.Y -= 1.5f;
                    Main.dust[index2].velocity.X *= 2.5f;
                    Main.dust[index2].scale = 1.3f;
                    Main.dust[index2].alpha = 100;
                    Main.dust[index2].noGravity = true;
                  }
                  Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                }
              }
            }
            if (!this.wet)
            {
              this.lavaWet = false;
              this.honeyWet = false;
            }
            if ((int) this.wetCount > 0)
              this.wetCount = (byte) ((uint) this.wetCount - 1U);
          }
          this.oldPosition = this.position;
          this.oldDirection = this.direction;
          int overrideWidth;
          int overrideHeight;
          this.HandleMovement(velocity1, out overrideWidth, out overrideHeight);
          if ((this.aiStyle != 3 || (double) this.ai[0] != 1.0) && (this.aiStyle != 7 || (double) this.ai[0] != 1.0) && ((this.aiStyle != 13 || (double) this.ai[0] != 1.0) && (this.aiStyle != 65 && this.aiStyle != 69)) && (this.aiStyle != 114 && this.aiStyle != 123 && (this.aiStyle != 112 && !this.manualDirectionChange) && (this.aiStyle != 67 && this.aiStyle != 26 && this.aiStyle != 15)))
          {
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            else
              this.direction = 1;
          }
          if (!this.active)
            return;
          this.ProjLight();
          if (!this.npcProj && this.friendly && (Main.player[this.owner].magicQuiver && this.extraUpdates < 1) && this.arrow)
            this.extraUpdates = 1;
          if (this.type == 2 || this.type == 82)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
          else if (this.type == 172)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 1f);
          else if (this.type == 103)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, 0.0f, 0.0f, 100, new Color(), 1f);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index].noGravity = true;
              Main.dust[index].scale *= 2f;
            }
          }
          else if (this.type == 278)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, 0.0f, 0.0f, 100, new Color(), 1f);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index].noGravity = true;
              Main.dust[index].scale *= 1.5f;
            }
          }
          else if (this.type == 4)
          {
            if (Main.rand.Next(5) == 0)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0.0f, 0.0f, 150, new Color(), 1.1f);
          }
          else if (this.type == 5)
          {
            int Type;
            switch (Main.rand.Next(3))
            {
              case 0:
                Type = 15;
                break;
              case 1:
                Type = 57;
                break;
              default:
                Type = 58;
                break;
            }
            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, new Color(), 1.2f);
          }
          this.Damage();
          if (this.type == 434 && (double) this.localAI[0] == 0.0 && this.numUpdates == 0)
          {
            this.extraUpdates = 1;
            this.velocity = Vector2.Zero;
            this.localAI[0] = 1f;
            this.localAI[1] = 0.9999f;
            this.netUpdate = true;
          }
          if (Main.netMode != 1 && (this.type == 99 || this.type == 444))
            Collision.SwitchTiles(this.position, this.width, this.height, this.oldPosition, 3);
          if (ProjectileID.Sets.TrailingMode[this.type] == 0)
          {
            for (int index = this.oldPos.Length - 1; index > 0; --index)
              this.oldPos[index] = this.oldPos[index - 1];
            this.oldPos[0] = this.position;
          }
          else if (ProjectileID.Sets.TrailingMode[this.type] == 1)
          {
            if (this.frameCounter == 0 || this.oldPos[0] == Vector2.Zero)
            {
              for (int index = this.oldPos.Length - 1; index > 0; --index)
                this.oldPos[index] = this.oldPos[index - 1];
              this.oldPos[0] = this.position;
              if (this.velocity == Vector2.Zero && this.type == 466)
              {
                float num2 = (float) ((double) this.rotation + 1.57079637050629 + (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
                float num3 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
                Vector2 vector2 = new Vector2((float) Math.Cos((double) num2) * num3, (float) Math.Sin((double) num2) * num3);
                int index = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].scale = 1.7f;
              }
              if (this.velocity == Vector2.Zero && this.type == 580)
              {
                float num2 = (float) ((double) this.rotation + 1.57079637050629 + (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
                float num3 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
                Vector2 vector2 = new Vector2((float) Math.Cos((double) num2) * num3, (float) Math.Sin((double) num2) * num3);
                int index = Dust.NewDust(this.oldPos[this.oldPos.Length - 1], 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
                Main.dust[index].noGravity = true;
                Main.dust[index].scale = 1.7f;
              }
            }
          }
          else if (ProjectileID.Sets.TrailingMode[this.type] == 2)
          {
            for (int index = this.oldPos.Length - 1; index > 0; --index)
            {
              this.oldPos[index] = this.oldPos[index - 1];
              this.oldRot[index] = this.oldRot[index - 1];
              this.oldSpriteDirection[index] = this.oldSpriteDirection[index - 1];
            }
            this.oldPos[0] = this.position;
            this.oldRot[0] = this.rotation;
            this.oldSpriteDirection[0] = this.spriteDirection;
          }
          if (ProjectileID.Sets.IsADD2Turret[this.type] && DD2Event.Ongoing)
            this.timeLeft = this.timeLeft + 1;
          this.timeLeft = this.timeLeft - 1;
          if (this.timeLeft <= 0)
            this.Kill();
          if (this.penetrate == 0)
            this.Kill();
          if (this.active && this.owner == Main.myPlayer)
          {
            if (this.netUpdate2)
              this.netUpdate = true;
            if (!this.active)
              this.netSpam = 0;
            if (this.netUpdate)
            {
              if (this.netSpam < 60)
              {
                this.netSpam = this.netSpam + 5;
                NetMessage.SendData(27, -1, -1, (NetworkText) null, i, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                this.netUpdate2 = false;
              }
              else
                this.netUpdate2 = true;
            }
            if (this.netSpam > 0)
              this.netSpam = this.netSpam - 1;
          }
        }
      }
      this.netUpdate = false;
    }

    private void HandleMovement(Vector2 wetVelocity, out int overrideWidth, out int overrideHeight)
    {
      bool flag1 = false;
      overrideWidth = -1;
      overrideHeight = -1;
      bool flag2 = false;
      bool? nullable1 = ProjectileID.Sets.ForcePlateDetection[this.type];
      bool flag3 = nullable1.HasValue && !nullable1.Value;
      bool flag4 = nullable1.HasValue && nullable1.Value;
      if (this.tileCollide)
      {
        Vector2 velocity1 = this.velocity;
        bool flag5 = true;
        Vector2? nullable2 = new Vector2?();
        if (Main.projPet[this.type])
        {
          flag5 = false;
          if ((double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height - 12.0 > (double) this.position.Y + (double) this.height)
            flag5 = true;
        }
        if (this.type == 500)
        {
          flag5 = false;
          if ((double) Main.player[this.owner].Bottom.Y > (double) this.Bottom.Y + 4.0)
            flag5 = true;
        }
        if (this.type == 653)
        {
          flag5 = false;
          if ((double) Main.player[this.owner].Bottom.Y > (double) this.Bottom.Y + 4.0)
            flag5 = true;
        }
        if (this.aiStyle == 62)
          flag5 = true;
        if (this.aiStyle == 66)
          flag5 = true;
        if (this.type == 317)
          flag5 = true;
        if (this.type == 373)
          flag5 = true;
        if (this.aiStyle == 53)
          flag5 = false;
        if (this.type == 9 || this.type == 12 || (this.type == 15 || this.type == 13) || (this.type == 31 || this.type == 39 || this.type == 40))
          flag5 = false;
        if (this.type == 24)
          flag5 = false;
        int type = this.type;
        switch (type)
        {
          case 663:
          case 665:
          case 667:
            flag5 = false;
            goto case 664;
          case 664:
          case 666:
            if (this.aiStyle == 29 || this.type == 28 || this.aiStyle == 49)
            {
              overrideWidth = this.width - 8;
              overrideHeight = this.height - 8;
            }
            else if (this.type == 250 || this.type == 267 || (this.type == 297 || this.type == 323) || (this.type == 3 || this.type == 711))
            {
              overrideWidth = 6;
              overrideHeight = 6;
            }
            else if (this.type == 308)
            {
              overrideWidth = 26;
              overrideHeight = this.height;
            }
            else if (this.type == 663 || this.type == 665 || (this.type == 667 || this.type == 677) || (this.type == 678 || this.type == 679 || (this.type == 691 || this.type == 692)) || this.type == 693)
            {
              overrideWidth = 16;
              overrideHeight = this.height;
            }
            else if (this.type == 688 || this.type == 689 || this.type == 690)
            {
              overrideWidth = 16;
              overrideHeight = this.height;
              nullable2 = new Vector2?(new Vector2(0.5f, 1f));
            }
            else if (this.type == 669 || this.type == 706)
            {
              overrideWidth = 10;
              overrideHeight = 10;
            }
            else if (this.type == 261 || this.type == 277)
            {
              overrideWidth = 26;
              overrideHeight = 26;
            }
            else if (this.type == 481 || this.type == 491 || (this.type == 106 || this.type == 262) || (this.type == 271 || this.type == 270 || (this.type == 272 || this.type == 273)) || (this.type == 274 || this.type == 280 || (this.type == 288 || this.type == 301) || (this.type == 320 || this.type == 333 || (this.type == 335 || this.type == 343))) || (this.type == 344 || this.type == 497 || (this.type == 496 || this.type == 6) || (this.type == 19 || this.type == 113 || (this.type == 52 || this.type == 520)) || (this.type == 523 || this.type == 585 || (this.type == 598 || this.type == 599) || this.type == 636)))
            {
              overrideWidth = 10;
              overrideHeight = 10;
            }
            else if (this.type == 514)
            {
              overrideWidth = 4;
              overrideHeight = 4;
            }
            else if (this.type == 248 || this.type == 247 || (this.type == 507 || this.type == 508) || (this.type == 662 || this.type == 680 || this.type == 685))
            {
              overrideWidth = this.width - 12;
              overrideHeight = this.height - 12;
            }
            else if (this.aiStyle == 18 || this.type == 254)
            {
              overrideWidth = this.width - 36;
              overrideHeight = this.height - 36;
            }
            else if (this.type == 182 || this.type == 190 || (this.type == 33 || this.type == 229) || (this.type == 237 || this.type == 243))
            {
              overrideWidth = this.width - 20;
              overrideHeight = this.height - 20;
            }
            else if (this.aiStyle == 27)
            {
              overrideWidth = this.width - 12;
              overrideHeight = this.height - 12;
            }
            else if (this.type == 533 && (double) this.ai[0] >= 6.0)
            {
              overrideWidth = this.width + 6;
              overrideHeight = this.height + 6;
            }
            else if (this.type == 582 || this.type == 634 || this.type == 635)
            {
              overrideWidth = 8;
              overrideHeight = 8;
            }
            else if (this.type == 617)
            {
              overrideWidth = (int) (20.0 * (double) this.scale);
              overrideHeight = (int) (20.0 * (double) this.scale);
            }
            if ((this.type != 440 && this.type != 449 && this.type != 606 || (double) this.ai[1] != 1.0) && ((this.type != 466 || (double) this.localAI[1] != 1.0) && (this.type != 580 || (double) this.localAI[1] <= 0.0) && (this.type != 640 || (double) this.localAI[1] <= 0.0)))
            {
              if (this.aiStyle == 10)
              {
                if (this.type == 42 || this.type == 65 || (this.type == 68 || this.type == 354) || this.type == 31 && (double) this.ai[0] == 2.0)
                  this.velocity = Collision.TileCollision(this.position, this.velocity, this.width, this.height, flag5, flag5, 1);
                else
                  this.velocity = Collision.AnyCollision(this.position, this.velocity, this.width, this.height, true);
              }
              else
              {
                Vector2 Position = this.position;
                int num1 = overrideWidth != -1 ? overrideWidth : this.width;
                int num2 = overrideHeight != -1 ? overrideHeight : this.height;
                if (overrideHeight != -1 || overrideWidth != -1)
                  Position = !nullable2.HasValue ? new Vector2(this.position.X + (float) (this.width / 2) - (float) (num1 / 2), this.position.Y + (float) (this.height / 2) - (float) (num2 / 2)) : this.Center - new Vector2((float) num1, (float) num2) * nullable2.Value;
                if (this.wet)
                {
                  if (this.honeyWet)
                  {
                    Vector2 velocity2 = this.velocity;
                    this.velocity = Collision.TileCollision(Position, this.velocity, num1, num2, flag5, flag5, 1);
                    wetVelocity = this.velocity * 0.25f;
                    if ((double) this.velocity.X != (double) velocity2.X)
                      wetVelocity.X = this.velocity.X;
                    if ((double) this.velocity.Y != (double) velocity2.Y)
                      wetVelocity.Y = this.velocity.Y;
                  }
                  else
                  {
                    Vector2 velocity2 = this.velocity;
                    this.velocity = Collision.TileCollision(Position, this.velocity, num1, num2, flag5, flag5, 1);
                    wetVelocity = this.velocity * 0.5f;
                    if ((double) this.velocity.X != (double) velocity2.X)
                      wetVelocity.X = this.velocity.X;
                    if ((double) this.velocity.Y != (double) velocity2.Y)
                      wetVelocity.Y = this.velocity.Y;
                  }
                }
                else
                {
                  int num3 = Math.Min(num1, num2);
                  if (num3 < 3)
                    num3 = 3;
                  if (num3 > 16)
                    num3 = 16;
                  if ((double) this.velocity.Length() > (double) num3)
                  {
                    Vector2 vector2_1 = Collision.TileCollision(Position, this.velocity, num1, num2, flag5, flag5, 1);
                    float num4 = this.velocity.Length();
                    float num5 = (float) num3;
                    Vector2 vector2_2 = Vector2.Normalize(this.velocity);
                    if ((double) vector2_1.Y == 0.0)
                      vector2_2.Y = 0.0f;
                    Vector2 zero1 = Vector2.Zero;
                    Vector2 zero2 = Vector2.Zero;
                    Vector2 zero3 = Vector2.Zero;
                    int num6 = 0;
                    while ((double) num4 > 0.0)
                    {
                      ++num6;
                      if (num6 <= 300)
                      {
                        Vector2 oldPosition = Position;
                        float num7 = num4;
                        if ((double) num7 > (double) num5)
                          num7 = num5;
                        num4 -= num7;
                        Vector2 Velocity = vector2_2 * num7;
                        Vector2 vector2_3 = Collision.TileCollision(Position, Velocity, num1, num2, flag5, flag5, 1);
                        Position += vector2_3;
                        this.velocity = vector2_3;
                        if (!Main.projPet[this.type])
                        {
                          Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num1, num2, 0.0f, true);
                          Vector2 vector2_4 = this.position - Position;
                          if ((double) Position.X != (double) vector4.X)
                            flag1 = true;
                          if ((double) Position.Y != (double) vector4.Y)
                            flag1 = true;
                          if ((double) this.velocity.X != (double) vector4.Z)
                            flag1 = true;
                          if ((double) this.velocity.Y != (double) vector4.W)
                            flag1 = true;
                          Position.X = vector4.X;
                          Position.Y = vector4.Y;
                          zero3 += Position + vector2_4 - this.position;
                          this.velocity.X = vector4.Z;
                          this.velocity.Y = vector4.W;
                        }
                        flag2 = true;
                        if (this.owner == Main.myPlayer && Position != oldPosition && !flag3)
                          Collision.SwitchTiles(Position, num1, num2, oldPosition, 4);
                        Vector2 velocity2 = this.velocity;
                        zero1 += velocity2;
                      }
                      else
                        break;
                    }
                    this.velocity = zero1;
                    if ((double) Math.Abs(this.velocity.X - velocity1.X) < 9.99999974737875E-05)
                      this.velocity.X = velocity1.X;
                    if ((double) Math.Abs(this.velocity.Y - velocity1.Y) < 9.99999974737875E-05)
                      this.velocity.Y = velocity1.Y;
                    if (!Main.projPet[this.type])
                    {
                      Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num1, num2, 0.0f, true);
                      Vector2 vector2_3 = this.position - Position;
                      if ((double) Position.X != (double) vector4.X)
                        flag1 = true;
                      if ((double) Position.Y != (double) vector4.Y)
                        flag1 = true;
                      if ((double) this.velocity.X != (double) vector4.Z)
                        flag1 = true;
                      if ((double) this.velocity.Y != (double) vector4.W)
                        flag1 = true;
                      Position.X = vector4.X;
                      Position.Y = vector4.Y;
                      this.position = Position + vector2_3;
                      this.velocity.X = vector4.Z;
                      this.velocity.Y = vector4.W;
                    }
                  }
                  else
                  {
                    this.velocity = Collision.TileCollision(Position, this.velocity, num1, num2, flag5, flag5, 1);
                    if (!Main.projPet[this.type])
                    {
                      Vector4 vector4 = Collision.SlopeCollision(Position, this.velocity, num1, num2, 0.0f, true);
                      Vector2 vector2 = this.position - Position;
                      if ((double) Position.X != (double) vector4.X)
                        flag1 = true;
                      if ((double) Position.Y != (double) vector4.Y)
                        flag1 = true;
                      if ((double) this.velocity.X != (double) vector4.Z)
                        flag1 = true;
                      if ((double) this.velocity.Y != (double) vector4.W)
                        flag1 = true;
                      Position.X = vector4.X;
                      Position.Y = vector4.Y;
                      this.position = Position + vector2;
                      this.velocity.X = vector4.Z;
                      this.velocity.Y = vector4.W;
                    }
                  }
                }
              }
            }
            if (velocity1 != this.velocity)
              flag1 = true;
            if (flag1)
            {
              if (this.type == 663 || this.type == 665 || (this.type == 667 || this.type == 677) || (this.type == 678 || this.type == 679 || (this.type == 691 || this.type == 692)) || (this.type == 693 || this.type == 688 || (this.type == 689 || this.type == 690)))
              {
                this.position = this.position + this.velocity;
                this.velocity = Vector2.Zero;
                break;
              }
              if (this.type == 434)
              {
                this.position = this.position + this.velocity;
                this.numUpdates = 0;
                break;
              }
              if (this.type == 601)
              {
                if (this.owner == Main.myPlayer)
                  PortalHelper.TryPlacingPortal(this, velocity1, this.velocity);
                this.position = this.position + this.velocity;
                this.Kill();
                break;
              }
              if (this.type == 451)
              {
                this.ai[0] = 1f;
                this.ai[1] = 0.0f;
                this.netUpdate = true;
                this.velocity = velocity1 / 2f;
                break;
              }
              if (this.type == 645)
              {
                this.ai[0] = 0.0f;
                this.ai[1] = -1f;
                this.netUpdate = true;
                break;
              }
              if (this.type == 584)
              {
                bool flag6 = false;
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.velocity.X = velocity1.X * -0.75f;
                  flag6 = true;
                }
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0 || (double) this.velocity.Y == 0.0)
                {
                  this.velocity.Y = velocity1.Y * -0.75f;
                  flag6 = true;
                }
                if (flag6)
                {
                  float num = velocity1.Length() / this.velocity.Length();
                  if ((double) num == 0.0)
                    num = 1f;
                  this.velocity = this.velocity / num;
                  this.penetrate = this.penetrate - 1;
                  break;
                }
                break;
              }
              if (this.type == 532)
              {
                bool flag6 = false;
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.velocity.X = velocity1.X * -0.75f;
                  flag6 = true;
                }
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0 || (double) this.velocity.Y == 0.0)
                {
                  this.velocity.Y = velocity1.Y * -0.75f;
                  flag6 = true;
                }
                if (flag6)
                {
                  float num = velocity1.Length() / this.velocity.Length();
                  if ((double) num == 0.0)
                    num = 1f;
                  this.velocity = this.velocity / num;
                  this.penetrate = this.penetrate - 1;
                  Collision.HitTiles(this.position, velocity1, this.width, this.height);
                  break;
                }
                break;
              }
              if (this.type == 533)
              {
                float num1 = 1f;
                bool flag6 = false;
                if ((double) this.velocity.X != (double) velocity1.X)
                {
                  this.velocity.X = velocity1.X * -num1;
                  flag6 = true;
                }
                if ((double) this.velocity.Y != (double) velocity1.Y || (double) this.velocity.Y == 0.0)
                {
                  this.velocity.Y = (float) ((double) velocity1.Y * -(double) num1 * 0.5);
                  flag6 = true;
                }
                if (flag6)
                {
                  float num2 = velocity1.Length() / this.velocity.Length();
                  if ((double) num2 == 0.0)
                    num2 = 1f;
                  this.velocity = this.velocity / num2;
                  if ((double) this.ai[0] == 7.0 && (double) this.velocity.Y < -0.1)
                    this.velocity.Y += 0.1f;
                  if ((double) this.ai[0] >= 6.0 && (double) this.ai[0] < 9.0)
                  {
                    Collision.HitTiles(this.position, velocity1, this.width, this.height);
                    break;
                  }
                  break;
                }
                break;
              }
              if (this.type == 502)
              {
                ++this.ai[0];
                Main.PlaySound(37, (int) this.position.X, (int) this.position.Y, 5 + (int) this.ai[0], 1f, 0.0f);
                if ((double) this.ai[0] >= 5.0)
                {
                  this.position = this.position + this.velocity;
                  this.Kill();
                }
                else
                {
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                    this.velocity.Y = -velocity1.Y;
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = -velocity1.X;
                }
                Vector2 spinningpoint = new Vector2(0.0f, -3f - this.ai[0]).RotatedByRandom(3.14159274101257);
                float num1 = (float) (10.0 + (double) this.ai[0] * 4.0);
                Vector2 vector2 = new Vector2(1.05f, 1f);
                for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
                {
                  int index = Dust.NewDust(this.Center, 0, 0, 66, 0.0f, 0.0f, 0, Color.Transparent, 1f);
                  Main.dust[index].position = this.Center;
                  Main.dust[index].velocity = spinningpoint.RotatedBy(6.28318548202515 * (double) num2 / (double) num1, new Vector2()) * vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
                  Main.dust[index].color = Main.hslToRgb(num2 / num1, 1f, 0.5f);
                  Main.dust[index].noGravity = true;
                  Main.dust[index].scale = (float) (1.0 + (double) this.ai[0] / 3.0);
                }
                if (Main.myPlayer == this.owner)
                {
                  int width = this.width;
                  int height = this.height;
                  int penetrate = this.penetrate;
                  this.position = this.Center;
                  this.width = this.height = 40 + 8 * (int) this.ai[0];
                  this.Center = this.position;
                  this.penetrate = -1;
                  this.Damage();
                  this.penetrate = penetrate;
                  this.position = this.Center;
                  this.width = width;
                  this.height = height;
                  this.Center = this.position;
                  break;
                }
                break;
              }
              if (this.type == 653)
              {
                if ((double) this.velocity.Y != (double) velocity1.Y && (double) this.velocity.Y == 0.0 && ((double) velocity1.Y > 1.0 && (double) velocity1.Y < 4.0))
                {
                  this.velocity.Y = (float) (-(double) velocity1.Y * 2.0);
                  break;
                }
                break;
              }
              if (this.type == 444)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = -velocity1.X;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                  this.velocity.Y = -velocity1.Y;
                this.ai[0] = this.velocity.ToRotation();
                break;
              }
              if (this.type == 617)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = (float) (-(double) velocity1.X * 0.349999994039536);
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  this.velocity.Y = (float) (-(double) velocity1.Y * 0.349999994039536);
                  break;
                }
                break;
              }
              if (this.type == 440 || this.type == 449 || this.type == 606)
              {
                if ((double) this.ai[1] != 1.0)
                {
                  this.ai[1] = 1f;
                  this.position = this.position + this.velocity;
                  this.velocity = velocity1;
                  break;
                }
                break;
              }
              if (this.type == 466 || this.type == 580 || this.type == 640)
              {
                if ((double) this.localAI[1] < 1.0)
                {
                  this.localAI[1] += 2f;
                  this.position = this.position + this.velocity;
                  this.velocity = Vector2.Zero;
                  break;
                }
                break;
              }
              if (this.aiStyle == 54)
              {
                if ((double) this.velocity.X != (double) velocity1.X)
                  this.velocity.X = velocity1.X * -0.6f;
                if ((double) this.velocity.Y != (double) velocity1.Y)
                {
                  this.velocity.Y = velocity1.Y * -0.6f;
                  break;
                }
                break;
              }
              if (!Main.projPet[this.type] && this.type != 500 && this.type != 650)
              {
                if (this.aiStyle == 99)
                {
                  if (this.type >= 556 && this.type <= 561)
                  {
                    bool flag6 = false;
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      flag6 = true;
                      this.velocity.X = velocity1.X * -1f;
                    }
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      flag6 = true;
                      this.velocity.Y = velocity1.Y * -1f;
                    }
                    if (flag6)
                    {
                      Vector2 vector2 = Main.player[this.owner].Center - this.Center;
                      vector2.Normalize();
                      vector2 *= this.velocity.Length();
                      vector2 *= 0.25f;
                      this.velocity = this.velocity * 0.75f;
                      this.velocity = this.velocity + vector2;
                      if ((double) this.velocity.Length() > 6.0)
                      {
                        this.velocity = this.velocity * 0.5f;
                        break;
                      }
                      break;
                    }
                    break;
                  }
                  break;
                }
                if (this.type == 604)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = -velocity1.X;
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                  {
                    this.velocity.Y = -velocity1.Y;
                    break;
                  }
                  break;
                }
                if (this.type == 379)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = velocity1.X * -0.6f;
                  if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0)
                  {
                    this.velocity.Y = velocity1.Y * -0.6f;
                    break;
                  }
                  break;
                }
                if (this.type == 491)
                {
                  if ((double) this.ai[0] <= 0.0)
                    this.ai[0] = -10f;
                  if ((double) this.velocity.X != (double) velocity1.X && (double) Math.Abs(velocity1.X) > 0.0)
                    this.velocity.X = velocity1.X * -1f;
                  if ((double) this.velocity.Y != (double) velocity1.Y && (double) Math.Abs(velocity1.Y) > 0.0)
                  {
                    this.velocity.Y = velocity1.Y * -1f;
                    break;
                  }
                  break;
                }
                if (this.type >= 515 && this.type <= 517 || this.type == 637)
                {
                  if ((double) this.velocity.X != (double) velocity1.X && (double) Math.Abs(velocity1.X) > 1.0)
                    this.velocity.X = velocity1.X * -0.9f;
                  if ((double) this.velocity.Y != (double) velocity1.Y && (double) Math.Abs(velocity1.Y) > 1.0)
                  {
                    this.velocity.Y = velocity1.Y * -0.9f;
                    break;
                  }
                  break;
                }
                if (this.type == 681)
                {
                  this.timeLeft = 4;
                  break;
                }
                if (this.type == 409)
                {
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = velocity1.X * -1f;
                  if ((double) this.velocity.Y != (double) velocity1.Y)
                  {
                    this.velocity.Y = velocity1.Y * -1f;
                    break;
                  }
                  break;
                }
                if (this.type == 254)
                {
                  this.tileCollide = false;
                  this.velocity = velocity1;
                  if (this.timeLeft > 30)
                  {
                    this.timeLeft = 30;
                    break;
                  }
                  break;
                }
                if (this.type == 225 && this.penetrate > 0)
                {
                  this.velocity.X = -velocity1.X;
                  this.velocity.Y = -velocity1.Y;
                  this.penetrate = this.penetrate - 1;
                  break;
                }
                if (this.type == 155)
                {
                  if ((double) this.ai[1] > 10.0)
                  {
                    NetworkText text = NetworkText.FromKey("Game.BallBounceResult", (object) NetworkText.FromKey(Lang.GetProjectileName(this.type).Key), (object) this.ai[1]);
                    if (Main.netMode == 0)
                      Main.NewText(text.ToString(), byte.MaxValue, (byte) 240, (byte) 20, false);
                    else if (Main.netMode == 2)
                      NetMessage.BroadcastChatMessage(text, new Color((int) byte.MaxValue, 240, 20), -1);
                  }
                  this.ai[1] = 0.0f;
                  if ((double) this.velocity.X != (double) velocity1.X)
                    this.velocity.X = velocity1.X * -0.6f;
                  if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 2.0)
                  {
                    this.velocity.Y = velocity1.Y * -0.6f;
                    break;
                  }
                  break;
                }
                if (this.aiStyle == 33)
                {
                  if ((double) this.localAI[0] == 0.0)
                  {
                    if (this.wet)
                      this.position = this.position + velocity1 / 2f;
                    else
                      this.position = this.position + velocity1;
                    this.velocity = this.velocity * 0.0f;
                    this.localAI[0] = 1f;
                    break;
                  }
                  break;
                }
                if (this.type != 308 && this.type != 377)
                {
                  if (this.type == 477)
                  {
                    if ((double) this.velocity.Y != (double) velocity1.Y || (double) this.velocity.X != (double) velocity1.X)
                    {
                      this.penetrate = this.penetrate - 1;
                      if (this.penetrate <= 0)
                        this.Kill();
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = -velocity1.X;
                      if ((double) this.velocity.Y != (double) velocity1.Y)
                        this.velocity.Y = -velocity1.Y;
                    }
                    if (this.penetrate > 0 && this.owner == Main.myPlayer)
                    {
                      int[] numArray = new int[10];
                      int maxValue = 0;
                      int num1 = 700;
                      int num2 = 20;
                      for (int index = 0; index < 200; ++index)
                      {
                        if (Main.npc[index].CanBeChasedBy((object) this, false))
                        {
                          float num3 = (this.Center - Main.npc[index].Center).Length();
                          if ((double) num3 > (double) num2 && (double) num3 < (double) num1 && Collision.CanHitLine(this.Center, 1, 1, Main.npc[index].Center, 1, 1))
                          {
                            numArray[maxValue] = index;
                            ++maxValue;
                            if (maxValue >= 9)
                              break;
                          }
                        }
                      }
                      if (maxValue > 0)
                      {
                        int index = Main.rand.Next(maxValue);
                        Vector2 vector2 = Main.npc[numArray[index]].Center - this.Center;
                        float num3 = this.velocity.Length();
                        vector2.Normalize();
                        this.velocity = vector2 * num3;
                        this.netUpdate = true;
                        break;
                      }
                      break;
                    }
                    break;
                  }
                  if (this.type == 94)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = -velocity1.X;
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      break;
                    }
                    break;
                  }
                  if (this.type == 496)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      if ((double) Math.Abs(this.velocity.X) < 1.0)
                        this.velocity.X = -velocity1.X;
                      else
                        this.Kill();
                    }
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      if ((double) Math.Abs(this.velocity.Y) < 1.0)
                      {
                        this.velocity.Y = -velocity1.Y;
                        break;
                      }
                      this.Kill();
                      break;
                    }
                    break;
                  }
                  if (this.type == 311)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      this.velocity.X = -velocity1.X;
                      ++this.ai[1];
                    }
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      ++this.ai[1];
                    }
                    if ((double) this.ai[1] > 4.0)
                    {
                      this.Kill();
                      break;
                    }
                    break;
                  }
                  if (this.type == 312)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      this.velocity.X = -velocity1.X;
                      ++this.ai[1];
                    }
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      ++this.ai[1];
                      break;
                    }
                    break;
                  }
                  if (this.type == 522 || this.type == 620)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = -velocity1.X;
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      break;
                    }
                    break;
                  }
                  if (this.type == 524)
                  {
                    this.ai[0] += 100f;
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = -velocity1.X;
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 93)
                  {
                    if (this.velocity != velocity1)
                    {
                      this.ai[1] = 0.0f;
                      this.ai[0] = 1f;
                      this.netUpdate = true;
                      this.tileCollide = false;
                      this.position = this.position + this.velocity;
                      this.velocity = velocity1;
                      this.velocity.Normalize();
                      this.velocity = this.velocity * 3f;
                      break;
                    }
                    break;
                  }
                  if (this.type == 281)
                  {
                    if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 2.0 || (double) this.ai[1] == 2.0)
                    {
                      this.ai[1] = 2f;
                      break;
                    }
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = (float) (-(double) velocity1.X * 0.5);
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = (float) (-(double) velocity1.Y * 0.5);
                      break;
                    }
                    break;
                  }
                  if (this.type == 290 || this.type == 294)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      this.position.X += this.velocity.X;
                      this.velocity.X = -velocity1.X;
                    }
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.position.Y += this.velocity.Y;
                      this.velocity.Y = -velocity1.Y;
                      break;
                    }
                    break;
                  }
                  if ((this.type == 181 || this.type == 189 || (this.type == 357 || this.type == 566)) && this.penetrate > 0)
                  {
                    if (this.type == 357)
                      this.damage = (int) ((double) this.damage * 0.9);
                    this.penetrate = this.penetrate - 1;
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = -velocity1.X;
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      break;
                    }
                    break;
                  }
                  if (this.type == 307 && (double) this.ai[1] < 5.0)
                  {
                    ++this.ai[1];
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = -velocity1.X;
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      break;
                    }
                    break;
                  }
                  if (this.type == 99)
                  {
                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 5.0)
                    {
                      Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                      Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                      this.velocity.Y = (float) (-(double) velocity1.Y * 0.200000002980232);
                    }
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      this.Kill();
                      break;
                    }
                    break;
                  }
                  if (this.type == 444)
                  {
                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 5.0)
                    {
                      Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                      Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                      this.velocity.Y = (float) (-(double) velocity1.Y * 0.200000002980232);
                    }
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      this.Kill();
                      break;
                    }
                    break;
                  }
                  if (this.type == 36)
                  {
                    if (this.penetrate > 1)
                    {
                      Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                      Main.PlaySound(SoundID.Item10, this.position);
                      this.penetrate = this.penetrate - 1;
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = -velocity1.X;
                      if ((double) this.velocity.Y != (double) velocity1.Y)
                      {
                        this.velocity.Y = -velocity1.Y;
                        break;
                      }
                      break;
                    }
                    this.Kill();
                    break;
                  }
                  if (this.aiStyle == 21)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = -velocity1.X;
                    if ((double) this.velocity.Y != (double) velocity1.Y)
                    {
                      this.velocity.Y = -velocity1.Y;
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 17)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = velocity1.X * -0.75f;
                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.5)
                    {
                      this.velocity.Y = velocity1.Y * -0.7f;
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 15)
                  {
                    bool flag6 = false;
                    if ((double) velocity1.X != (double) this.velocity.X)
                    {
                      if ((double) Math.Abs(velocity1.X) > 4.0)
                        flag6 = true;
                      this.position.X += this.velocity.X;
                      this.velocity.X = (float) (-(double) velocity1.X * 0.200000002980232);
                    }
                    if ((double) velocity1.Y != (double) this.velocity.Y)
                    {
                      if ((double) Math.Abs(velocity1.Y) > 4.0)
                        flag6 = true;
                      this.position.Y += this.velocity.Y;
                      this.velocity.Y = (float) (-(double) velocity1.Y * 0.200000002980232);
                    }
                    this.ai[0] = 1f;
                    if (flag6)
                    {
                      this.netUpdate = true;
                      Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                      Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    }
                    if (this.wet)
                    {
                      wetVelocity = this.velocity;
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 39)
                  {
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                    if (this.type == 33 || this.type == 106)
                    {
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = -velocity1.X;
                      if ((double) this.velocity.Y != (double) velocity1.Y)
                        this.velocity.Y = -velocity1.Y;
                    }
                    else
                    {
                      this.ai[0] = 1f;
                      if (this.aiStyle == 3)
                      {
                        this.velocity.X = -velocity1.X;
                        this.velocity.Y = -velocity1.Y;
                      }
                    }
                    this.netUpdate = true;
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    break;
                  }
                  if (this.aiStyle == 3 || this.aiStyle == 13 || (this.aiStyle == 69 || this.aiStyle == 109))
                  {
                    Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                    if (this.type == 33 || this.type == 106)
                    {
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = -velocity1.X;
                      if ((double) this.velocity.Y != (double) velocity1.Y)
                        this.velocity.Y = -velocity1.Y;
                    }
                    else
                    {
                      this.ai[0] = 1f;
                      if ((this.aiStyle == 3 || this.aiStyle == 109) && this.type != 383)
                      {
                        this.velocity.X = -velocity1.X;
                        this.velocity.Y = -velocity1.Y;
                      }
                    }
                    this.netUpdate = true;
                    Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
                    break;
                  }
                  if (this.aiStyle == 8 && this.type != 96)
                  {
                    Main.PlaySound(SoundID.Item10, this.position);
                    ++this.ai[0];
                    if ((double) this.ai[0] >= 5.0 && this.type != 253 || this.type == 253 && (double) this.ai[0] >= 8.0)
                    {
                      this.position = this.position + this.velocity;
                      this.Kill();
                      break;
                    }
                    if (this.type == 15 && (double) this.velocity.Y > 4.0)
                    {
                      if ((double) this.velocity.Y != (double) velocity1.Y)
                        this.velocity.Y = (float) (-(double) velocity1.Y * 0.800000011920929);
                    }
                    else if ((double) this.velocity.Y != (double) velocity1.Y)
                      this.velocity.Y = -velocity1.Y;
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      this.velocity.X = -velocity1.X;
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 61)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = velocity1.X * -0.3f;
                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                    {
                      this.velocity.Y = velocity1.Y * -0.3f;
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 14)
                  {
                    if (this.type == 261 && ((double) this.velocity.X != (double) velocity1.X && ((double) velocity1.X < -3.0 || (double) velocity1.X > 3.0) || (double) this.velocity.Y != (double) velocity1.Y && ((double) velocity1.Y < -3.0 || (double) velocity1.Y > 3.0)))
                    {
                      Collision.HitTiles(this.position, this.velocity, this.width, this.height);
                      Main.PlaySound(0, (int) this.Center.X, (int) this.Center.Y, 1, 1f, 0.0f);
                    }
                    if (this.type >= 326 && this.type <= 328 && (double) this.velocity.X != (double) velocity1.X)
                      this.velocity.X = velocity1.X * -0.1f;
                    if (this.type >= 400 && this.type <= 402)
                    {
                      if ((double) this.velocity.X != (double) velocity1.X)
                      {
                        this.velocity.X = velocity1.X * -0.1f;
                        break;
                      }
                      break;
                    }
                    if (this.type == 50)
                    {
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = velocity1.X * -0.2f;
                      if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.5)
                      {
                        this.velocity.Y = velocity1.Y * -0.2f;
                        break;
                      }
                      break;
                    }
                    if (this.type == 185)
                    {
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = velocity1.X * -0.9f;
                      if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                      {
                        this.velocity.Y = velocity1.Y * -0.9f;
                        break;
                      }
                      break;
                    }
                    if (this.type == 277)
                    {
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = velocity1.X * -0.9f;
                      if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 3.0)
                      {
                        this.velocity.Y = velocity1.Y * -0.9f;
                        break;
                      }
                      break;
                    }
                    if (this.type != 480)
                    {
                      if (this.type == 450)
                      {
                        if ((double) this.velocity.X != (double) velocity1.X)
                        {
                          this.velocity.X = velocity1.X * -0.1f;
                          break;
                        }
                        break;
                      }
                      if ((double) this.velocity.X != (double) velocity1.X)
                        this.velocity.X = velocity1.X * -0.5f;
                      if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 1.0)
                      {
                        this.velocity.Y = velocity1.Y * -0.5f;
                        break;
                      }
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 16)
                  {
                    if ((double) this.velocity.X != (double) velocity1.X)
                    {
                      this.velocity.X = velocity1.X * -0.4f;
                      if (this.type == 29)
                        this.velocity.X = this.velocity.X * 0.8f;
                    }
                    if ((double) this.velocity.Y != (double) velocity1.Y && (double) velocity1.Y > 0.7 && this.type != 102)
                    {
                      this.velocity.Y = velocity1.Y * -0.4f;
                      if (this.type == 29)
                        this.velocity.Y = this.velocity.Y * 0.8f;
                    }
                    if (this.type == 134 || this.type == 137 || (this.type == 140 || this.type == 143) || (this.type == 303 || this.type >= 338 && this.type <= 341))
                    {
                      this.velocity = this.velocity * 0.0f;
                      this.alpha = (int) byte.MaxValue;
                      this.timeLeft = 3;
                      break;
                    }
                    break;
                  }
                  if (this.aiStyle == 68)
                  {
                    this.velocity = this.velocity * 0.0f;
                    this.alpha = (int) byte.MaxValue;
                    this.timeLeft = 3;
                    break;
                  }
                  if (this.aiStyle != 9 || this.owner == Main.myPlayer)
                  {
                    this.position = this.position + this.velocity;
                    this.Kill();
                    break;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          default:
            if ((uint) (type - 677) <= 2U || (uint) (type - 688) <= 5U)
              goto case 663;
            else
              goto case 664;
        }
      }
      this.UpdatePosition(wetVelocity);
      if (flag2 || flag3 || (this.owner != Main.myPlayer || !(this.tileCollide | flag4)) || !(this.position != this.oldPosition))
        return;
      Vector2 Position1 = this.position;
      Vector2 oldPosition1 = this.oldPosition;
      int Width = overrideWidth != -1 ? overrideWidth : this.width;
      int Height = overrideHeight != -1 ? overrideHeight : this.height;
      if (overrideHeight != -1 || overrideWidth != -1)
      {
        Position1 = new Vector2(this.position.X + (float) (this.width / 2) - (float) (Width / 2), this.position.Y + (float) (this.height / 2) - (float) (Height / 2));
        oldPosition1 = new Vector2(this.oldPosition.X + (float) (this.width / 2) - (float) (Width / 2), this.oldPosition.Y + (float) (this.height / 2) - (float) (Height / 2));
      }
      Collision.SwitchTiles(Position1, Width, Height, oldPosition1, 4);
    }

    private void UpdatePosition(Vector2 wetVelocity)
    {
      if (this.aiStyle == 4 || this.aiStyle == 38 || this.aiStyle == 84 || this.aiStyle == 7 && (double) this.ai[0] == 2.0 || (this.type == 440 || this.type == 449 || this.type == 606) && (double) this.ai[1] == 1.0 || (this.aiStyle == 93 && (double) this.ai[0] < 0.0 || this.type == 540))
        return;
      if (this.wet)
        this.position = this.position + wetVelocity;
      else
        this.position = this.position + this.velocity;
      if (!Main.projPet[this.type] || !this.tileCollide)
        return;
      Vector4 vector4 = Collision.SlopeCollision(this.position, this.velocity, this.width, this.height, 0.0f, false);
      this.position.X = vector4.X;
      this.position.Y = vector4.Y;
      this.velocity.X = vector4.Z;
      this.velocity.Y = vector4.W;
    }

    public void FishingCheck()
    {
      int index = (int) ((double) this.Center.X / 16.0);
      int j1 = (int) ((double) this.Center.Y / 16.0);
      if ((int) Main.tile[index, j1].liquid < 0)
        ++j1;
      bool flag1 = false;
      bool flag2 = false;
      int i1 = index;
      int i2 = index;
      while (i1 > 10 && (int) Main.tile[i1, j1].liquid > 0 && !WorldGen.SolidTile(i1, j1))
        --i1;
      while (i2 < Main.maxTilesX - 10 && (int) Main.tile[i2, j1].liquid > 0 && !WorldGen.SolidTile(i2, j1))
        ++i2;
      int num1 = 0;
      for (int i3 = i1; i3 <= i2; ++i3)
      {
        int j2 = j1;
        while ((int) Main.tile[i3, j2].liquid > 0 && !WorldGen.SolidTile(i3, j2) && j2 < Main.maxTilesY - 10)
        {
          ++num1;
          ++j2;
          if (Main.tile[i3, j2].lava())
            flag1 = true;
          else if (Main.tile[i3, j2].honey())
            flag2 = true;
        }
      }
      if (flag2)
        num1 = (int) ((double) num1 * 1.5);
      if (num1 < 75)
      {
        Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.NotEnoughWater");
      }
      else
      {
        int num2 = Main.player[this.owner].FishingLevel();
        if (num2 == 0)
          return;
        Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingPower", (object) num2);
        if (num2 < 0)
        {
          if (num2 != -1)
            return;
          Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
          if (index >= 380 && index <= Main.maxTilesX - 380 || (num1 <= 1000 || NPC.AnyNPCs(370)))
            return;
          this.ai[1] = (float) (Main.rand.Next(-180, -60) - 100);
          this.localAI[1] = (float) num2;
          this.netUpdate = true;
        }
        else
        {
          int num3 = 300;
          float num4 = (float) (Main.maxTilesX / 4200);
          float num5 = (float) (((double) this.position.Y / 16.0 - (60.0 + 10.0 * (double) (num4 * num4))) / (Main.worldSurface / 6.0));
          if ((double) num5 < 0.25)
            num5 = 0.25f;
          if ((double) num5 > 1.0)
            num5 = 1f;
          int num6 = (int) ((double) num3 * (double) num5);
          float num7 = (float) num1 / (float) num6;
          if ((double) num7 < 1.0)
            num2 = (int) ((double) num2 * (double) num7);
          float num8 = 1f - num7;
          if (num1 < num6)
            Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FullFishingPower", (object) num2, (object) -Math.Round((double) num8 * 100.0));
          int num9 = (num2 + 75) / 2;
          if (Main.player[this.owner].wet || Main.rand.Next(100) > num9)
            return;
          int num10 = 0;
          int num11 = (double) j1 >= Main.worldSurface * 0.5 ? ((double) j1 >= Main.worldSurface ? ((double) j1 >= Main.rockLayer ? (j1 >= Main.maxTilesY - 300 ? 4 : 3) : 2) : 1) : 0;
          int num12 = 150;
          int num13 = num2;
          int maxValue1 = num12 / num13;
          int num14 = 2;
          int maxValue2 = num12 * num14 / num2;
          int num15 = 7;
          int maxValue3 = num12 * num15 / num2;
          int num16 = 15;
          int maxValue4 = num12 * num16 / num2;
          int num17 = 30;
          int maxValue5 = num12 * num17 / num2;
          if (maxValue1 < 2)
            maxValue1 = 2;
          if (maxValue2 < 3)
            maxValue2 = 3;
          if (maxValue3 < 4)
            maxValue3 = 4;
          if (maxValue4 < 5)
            maxValue4 = 5;
          if (maxValue5 < 6)
            maxValue5 = 6;
          bool flag3 = false;
          bool flag4 = false;
          bool flag5 = false;
          bool flag6 = false;
          bool flag7 = false;
          if (Main.rand.Next(maxValue1) == 0)
            flag3 = true;
          if (Main.rand.Next(maxValue2) == 0)
            flag4 = true;
          if (Main.rand.Next(maxValue3) == 0)
            flag5 = true;
          if (Main.rand.Next(maxValue4) == 0)
            flag6 = true;
          if (Main.rand.Next(maxValue5) == 0)
            flag7 = true;
          int num18 = 10;
          if (Main.player[this.owner].cratePotion)
            num18 += 10;
          int type = Main.anglerQuestItemNetIDs[Main.anglerQuest];
          if (Main.player[this.owner].HasItem(type))
            type = -1;
          if (Main.anglerQuestFinished)
            type = -1;
          if (flag1)
          {
            if (!ItemID.Sets.CanFishInLava[Main.player[this.owner].HeldItem.type])
              return;
            if (flag7)
              num10 = 2331;
            else if (flag6)
              num10 = 2312;
            else if (flag5)
              num10 = 2315;
          }
          else if (flag2)
          {
            if (flag5 || flag4 && Main.rand.Next(2) == 0)
              num10 = 2314;
            else if (flag4 && type == 2451)
              num10 = 2451;
          }
          else if (Main.rand.Next(50) > num2 && Main.rand.Next(50) > num2 && num1 < num6)
            num10 = Main.rand.Next(2337, 2340);
          else if (Main.rand.Next(100) < num18)
            num10 = !(flag6 | flag7) ? (!flag5 || !Main.player[this.owner].ZoneCorrupt ? (!flag5 || !Main.player[this.owner].ZoneCrimson ? (!flag5 || !Main.player[this.owner].ZoneHoly ? (!flag5 || !Main.player[this.owner].ZoneDungeon ? (!flag5 || !Main.player[this.owner].ZoneJungle ? (!flag5 || num11 != 0 ? (!flag4 ? 2334 : 2335) : 3206) : 3208) : 3205) : 3207) : 3204) : 3203) : 2336;
          else if (flag7 && Main.rand.Next(5) == 0)
            num10 = 2423;
          else if (flag7 && Main.rand.Next(5) == 0)
            num10 = 3225;
          else if (flag7 && Main.rand.Next(10) == 0)
            num10 = 2420;
          else if (((flag7 ? 0 : (!flag6 ? 1 : 0)) & (flag4 ? 1 : 0)) != 0 && Main.rand.Next(5) == 0)
          {
            num10 = 3196;
          }
          else
          {
            bool flag8 = Main.player[this.owner].ZoneCorrupt;
            bool flag9 = Main.player[this.owner].ZoneCrimson;
            if (flag8 & flag9)
            {
              if (Main.rand.Next(2) == 0)
                flag9 = false;
              else
                flag8 = false;
            }
            if (flag8)
            {
              if (flag7 && Main.hardMode && (Main.player[this.owner].ZoneSnow && num11 == 3) && Main.rand.Next(3) != 0)
                num10 = 2429;
              else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
                num10 = 3210;
              else if (flag5)
                num10 = 2330;
              else if (flag4 && type == 2454)
                num10 = 2454;
              else if (flag4 && type == 2485)
                num10 = 2485;
              else if (flag4 && type == 2457)
                num10 = 2457;
              else if (flag4)
                num10 = 2318;
            }
            else if (flag9)
            {
              if (flag7 && Main.hardMode && (Main.player[this.owner].ZoneSnow && num11 == 3) && Main.rand.Next(3) != 0)
                num10 = 2429;
              else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
                num10 = 3211;
              else if (flag4 && type == 2477)
                num10 = 2477;
              else if (flag4 && type == 2463)
                num10 = 2463;
              else if (flag4)
                num10 = 2319;
              else if (flag3)
                num10 = 2305;
            }
            else if (Main.player[this.owner].ZoneHoly)
            {
              if (flag7 && Main.hardMode && (Main.player[this.owner].ZoneSnow && num11 == 3) && Main.rand.Next(3) != 0)
                num10 = 2429;
              else if (flag7 && Main.hardMode && Main.rand.Next(2) == 0)
                num10 = 3209;
              else if (num11 > 1 & flag6)
                num10 = 2317;
              else if (num11 > 1 & flag5 && type == 2465)
                num10 = 2465;
              else if (num11 < 2 & flag5 && type == 2468)
                num10 = 2468;
              else if (flag5)
                num10 = 2310;
              else if (flag4 && type == 2471)
                num10 = 2471;
              else if (flag4)
                num10 = 2307;
            }
            if (num10 == 0 && Main.player[this.owner].ZoneSnow)
            {
              if (num11 < 2 & flag4 && type == 2467)
                num10 = 2467;
              else if (num11 == 1 & flag4 && type == 2470)
                num10 = 2470;
              else if (num11 >= 2 & flag4 && type == 2484)
                num10 = 2484;
              else if (num11 > 1 & flag4 && type == 2466)
                num10 = 2466;
              else if (flag3 && Main.rand.Next(12) == 0 || flag4 && Main.rand.Next(6) == 0)
                num10 = 3197;
              else if (flag4)
                num10 = 2306;
              else if (flag3)
                num10 = 2299;
              else if (num11 > 1 && Main.rand.Next(3) == 0)
                num10 = 2309;
            }
            if (num10 == 0 && Main.player[this.owner].ZoneJungle)
            {
              if (num11 == 1 & flag4 && type == 2452)
                num10 = 2452;
              else if (num11 == 1 & flag4 && type == 2483)
                num10 = 2483;
              else if (num11 == 1 & flag4 && type == 2488)
                num10 = 2488;
              else if (num11 >= 1 & flag4 && type == 2486)
                num10 = 2486;
              else if (num11 > 1 & flag4)
                num10 = 2311;
              else if (flag4)
                num10 = 2313;
              else if (flag3)
                num10 = 2302;
            }
            if (num10 == 0 && Main.shroomTiles > 200 && (flag4 && type == 2475))
              num10 = 2475;
            if (num10 == 0)
            {
              if (num11 <= 1 && (index < 380 || index > Main.maxTilesX - 380) && num1 > 1000)
              {
                num10 = !flag6 || Main.rand.Next(2) != 0 ? (!flag6 ? (!flag5 || Main.rand.Next(5) != 0 ? (!flag5 || Main.rand.Next(2) != 0 ? (!flag4 || type != 2480 ? (!flag4 || type != 2481 ? (!flag4 ? (!flag3 || Main.rand.Next(2) != 0 ? (!flag3 ? 2297 : 2300) : 2301) : 2316) : 2481) : 2480) : 2332) : 2438) : 2342) : 2341;
              }
              else
              {
                int sandTiles = Main.sandTiles;
              }
            }
            if (num10 == 0)
              num10 = !(num11 < 2 & flag4) || type != 2461 ? (!(num11 == 0 & flag4) || type != 2453 ? (!(num11 == 0 & flag4) || type != 2473 ? (!(num11 == 0 & flag4) || type != 2476 ? (!(num11 < 2 & flag4) || type != 2458 ? (!(num11 < 2 & flag4) || type != 2459 ? (!(num11 == 0 & flag4) ? (((num11 <= 0 ? 0 : (num11 < 3 ? 1 : 0)) & (flag4 ? 1 : 0)) == 0 || type != 2455 ? (!(num11 == 1 & flag4) || type != 2479 ? (!(num11 == 1 & flag4) || type != 2456 ? (!(num11 == 1 & flag4) || type != 2474 ? (!(num11 > 1 & flag5) || Main.rand.Next(5) != 0 ? (!(num11 > 1 & flag7) ? (!(num11 > 1 & flag6) || Main.rand.Next(2) != 0 ? (!(num11 > 1 & flag5) ? (!(num11 > 1 & flag4) || type != 2478 ? (!(num11 > 1 & flag4) || type != 2450 ? (!(num11 > 1 & flag4) || type != 2464 ? (!(num11 > 1 & flag4) || type != 2469 ? (!(num11 > 2 & flag4) || type != 2462 ? (!(num11 > 2 & flag4) || type != 2482 ? (!(num11 > 2 & flag4) || type != 2472 ? (!(num11 > 2 & flag4) || type != 2460 ? (!(num11 > 1 & flag4) || Main.rand.Next(4) == 0 ? (num11 <= 1 || !(flag4 | flag3) && Main.rand.Next(4) != 0 ? (!flag4 || type != 2487 ? (!(num1 > 1000 & flag3) ? 2290 : 2298) : 2487) : (Main.rand.Next(4) != 0 ? 2309 : 2303)) : 2303) : 2460) : 2472) : 2482) : 2462) : 2469) : 2464) : 2450) : 2478) : 2321) : 2320) : 2308) : (!Main.hardMode || Main.rand.Next(2) != 0 ? 2436 : 2437)) : 2474) : 2456) : 2479) : 2455) : 2304) : 2459) : 2458) : 2476) : 2473) : 2453) : 2461;
          }
          if (num10 <= 0)
            return;
          if (Main.player[this.owner].sonarPotion)
          {
            Item newItem = new Item();
            int Type = num10;
            int num19 = 0;
            newItem.SetDefaults(Type, num19 != 0);
            Vector2 position = this.position;
            newItem.position = position;
            int stack = 1;
            int num20 = 1;
            int num21 = 0;
            ItemText.NewText(newItem, stack, num20 != 0, num21 != 0);
          }
          float num22 = (float) num2;
          this.ai[1] = (float) Main.rand.Next(-240, -90) - num22;
          this.localAI[1] = (float) num10;
          this.netUpdate = true;
        }
      }
    }

    public bool CanReflect()
    {
      return this.active && this.friendly && (!this.hostile && this.damage > 0) && (this.aiStyle == 1 || this.aiStyle == 2 || (this.aiStyle == 8 || this.aiStyle == 21) || (this.aiStyle == 24 || this.aiStyle == 28 || (this.aiStyle == 29 || this.aiStyle == 131)));
    }

    public float GetPrismHue(float indexing)
    {
      if (Main.player[this.owner].active)
      {
        string name = Main.player[this.owner].name;
        // ISSUE: reference to a compiler-generated method
        uint stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(name);
        if (stringHash <= 2118543838U)
        {
          if (stringHash <= 1091948930U)
          {
            if ((int) stringHash != 214021753)
            {
              if ((int) stringHash != 541614085)
              {
                if ((int) stringHash == 1091948930 && name == "Random")
                  return Main.rand.NextFloat();
                goto label_40;
              }
              else
              {
                if (name == "Aeroblop")
                  return (float) (0.25 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.100000001490116);
                goto label_40;
              }
            }
            else if (!(name == "Yoraiz0r"))
              goto label_40;
          }
          else if (stringHash <= 1747396969U)
          {
            if ((int) stringHash != 1566394895)
            {
              if ((int) stringHash == 1747396969 && name == "Leinfors")
                return 0.77f;
              goto label_40;
            }
            else if (!(name == "Tsuki"))
              goto label_40;
          }
          else
          {
            if ((int) stringHash != 2016962940)
            {
              if ((int) stringHash != 2118543838 || !(name == "Darkhalis"))
                goto label_40;
            }
            else if (!(name == "Arkhalis"))
              goto label_40;
            return (float) (0.75 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.0700000002980232);
          }
          return 0.85f;
        }
        if (stringHash <= 3428214922U)
        {
          if ((int) stringHash != -2146500189)
          {
            if ((int) stringHash != -1847209046)
            {
              if ((int) stringHash == -866752374 && name == "Nike Leon")
                return (float) (0.0750000029802322 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.0700000002980232);
            }
            else if (name == "W1K")
              return (float) (0.75 + Math.Cos(Main.time / 120.0 * 6.28318548202515) * 0.0500000007450581);
          }
          else if (name == "Ghostar")
            return 0.33f;
        }
        else if (stringHash <= 3972042669U)
        {
          if ((int) stringHash != -396224540)
          {
            if ((int) stringHash == -322924627 && name == "Grox The Great")
              return (float) (0.310000002384186 + Math.Cos(Main.time / 120.0 * 6.28318548202515) * 0.0299999993294477);
          }
          else if (name == "Suweeka")
            return (float) (0.5 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.180000007152557);
        }
        else if ((int) stringHash != -289814677)
        {
          if ((int) stringHash == -31609727 && name == "Devalaous")
            return (float) (0.660000026226044 + Math.Cos(Main.time / 180.0 * 6.28318548202515) * 0.100000001490116);
        }
        else if (name == "Doylee")
          return 0.0f;
      }
label_40:
      return (float) (int) indexing / 6f;
    }

    public static int GetByUUID(int owner, float uuid)
    {
      return Projectile.GetByUUID(owner, (int) uuid);
    }

    public static int GetByUUID(int owner, int uuid)
    {
      if (uuid < 0 || uuid >= 1000 || (owner < 0 || owner >= (int) byte.MaxValue))
        return -1;
      int index = Main.projectileIdentity[owner, uuid];
      if (index >= 0 && Main.projectile[index].active)
        return index;
      return -1;
    }

    public void ProjectileFixDesperation()
    {
      if (this.owner < 0 || this.owner >= 1000)
        return;
      switch (this.type)
      {
        case 642:
        case 644:
        case 461:
        case 632:
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].owner == this.owner && (double) Main.projectile[index].identity == (double) this.ai[1] && Main.projectile[index].active)
            {
              this.ai[1] = (float) index;
              break;
            }
          }
          break;
      }
    }

    public void AI()
    {
      if (this.aiStyle == 1)
        this.AI_001();
      else if (this.aiStyle == 2)
      {
        if (this.type == 93 && Main.rand.Next(5) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 0.3f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 * 0.3f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * 0.3f;
        }
        if (this.type == 304 && (double) this.localAI[0] == 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          this.alpha = 0;
        }
        if (this.type == 335)
          this.frame = (int) this.ai[1];
        this.rotation = this.type != 510 ? this.rotation + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0299999993294477) * (float) this.direction : this.rotation + Math.Abs(this.velocity.X) * 0.04f * (float) this.direction;
        if (this.type == 162)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            Main.PlaySound(SoundID.Item14, this.position);
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 18.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.28f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.99f;
          }
          if ((double) this.ai[0] > 2.0)
          {
            this.alpha = 0;
            if ((double) this.ai[0] == 3.0)
            {
              for (int index1 = 0; index1 < 10; ++index1)
              {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.5f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.1f;
              }
              for (int index1 = 0; index1 < 5; ++index1)
              {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                Main.dust[index2].noGravity = true;
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 3f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.2f;
                int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                Dust dust3 = Main.dust[index3];
                dust3.velocity = dust3.velocity * 2f;
                Dust dust4 = Main.dust[index3];
                dust4.velocity = dust4.velocity + this.velocity * 0.3f;
              }
              for (int index1 = 0; index1 < 1; ++index1)
              {
                int index2 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64), 1f);
                Gore gore1 = Main.gore[index2];
                gore1.position = gore1.position + this.velocity * 1.25f;
                Main.gore[index2].scale = 1.5f;
                Gore gore2 = Main.gore[index2];
                gore2.velocity = gore2.velocity + this.velocity * 0.5f;
                Gore gore3 = Main.gore[index2];
                gore3.velocity = gore3.velocity * 0.02f;
              }
            }
          }
        }
        else if (this.type == 281)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            Main.PlaySound(SoundID.Item14, this.position);
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 18.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.28f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.99f;
          }
          if ((double) this.ai[0] > 2.0)
          {
            this.alpha = 0;
            if ((double) this.ai[0] == 3.0)
            {
              for (int index1 = 0; index1 < 10; ++index1)
              {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.5f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.1f;
              }
              for (int index1 = 0; index1 < 5; ++index1)
              {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                Main.dust[index2].noGravity = true;
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 3f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.2f;
                int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                Dust dust3 = Main.dust[index3];
                dust3.velocity = dust3.velocity * 2f;
                Dust dust4 = Main.dust[index3];
                dust4.velocity = dust4.velocity + this.velocity * 0.3f;
              }
              for (int index1 = 0; index1 < 1; ++index1)
              {
                int index2 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64), 1f);
                Gore gore1 = Main.gore[index2];
                gore1.position = gore1.position + this.velocity * 1.25f;
                Main.gore[index2].scale = 1.5f;
                Gore gore2 = Main.gore[index2];
                gore2.velocity = gore2.velocity + this.velocity * 0.5f;
                Gore gore3 = Main.gore[index2];
                gore3.velocity = gore3.velocity * 0.02f;
              }
            }
          }
        }
        else if (this.type == 240)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            Main.PlaySound(SoundID.Item14, this.position);
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 16.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.18f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.991f;
          }
          if ((double) this.ai[0] > 2.0)
          {
            this.alpha = 0;
            if ((double) this.ai[0] == 3.0)
            {
              for (int index1 = 0; index1 < 7; ++index1)
              {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.5f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.1f;
              }
              for (int index1 = 0; index1 < 3; ++index1)
              {
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
                Main.dust[index2].noGravity = true;
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 3f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.2f;
                int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                Dust dust3 = Main.dust[index3];
                dust3.velocity = dust3.velocity * 2f;
                Dust dust4 = Main.dust[index3];
                dust4.velocity = dust4.velocity + this.velocity * 0.3f;
              }
              for (int index1 = 0; index1 < 1; ++index1)
              {
                int index2 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64), 1f);
                Gore gore1 = Main.gore[index2];
                gore1.position = gore1.position + this.velocity * 1.25f;
                Main.gore[index2].scale = 1.25f;
                Gore gore2 = Main.gore[index2];
                gore2.velocity = gore2.velocity + this.velocity * 0.5f;
                Gore gore3 = Main.gore[index2];
                gore3.velocity = gore3.velocity * 0.02f;
              }
            }
          }
        }
        else if (this.type == 497)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
          Main.dust[index].noGravity = true;
          Dust dust1 = Main.dust[index];
          dust1.velocity = dust1.velocity * 0.3f;
          Dust dust2 = Main.dust[index];
          dust2.velocity = dust2.velocity - this.velocity * 0.1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 30.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 0.99f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 0.5f;
          }
          else
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else if (this.type == 249)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.25f;
          }
        }
        else if (this.type == 347)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 5.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.25f;
          }
        }
        else if (this.type == 501)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 18.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 0.995f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 0.2f;
          }
        }
        else if (this.type == 504)
        {
          this.alpha = (int) byte.MaxValue;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] > 3.0)
          {
            int num1 = 100;
            if ((double) this.ai[0] > 20.0)
            {
              int num2 = 40;
              float num3 = this.ai[0] - 20f;
              num1 = (int) (100.0 * (1.0 - (double) num3 / (double) num2));
              if ((double) num3 >= (double) num2)
                this.Kill();
            }
            if ((double) this.ai[0] <= 10.0)
              num1 = (int) this.ai[0] * 10;
            if (Main.rand.Next(100) < num1)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 150, new Color(), 1f);
              Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
              Main.dust[index].noGravity = true;
              Dust dust1 = Main.dust[index];
              dust1.velocity = dust1.velocity * 2f;
              Dust dust2 = Main.dust[index];
              dust2.scale = dust2.scale * 1.2f;
              Dust dust3 = Main.dust[index];
              dust3.velocity = dust3.velocity + this.velocity;
            }
          }
          if ((double) this.ai[0] >= 20.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 0.99f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 0.1f;
          }
        }
        else if (this.type == 69 || this.type == 70 || this.type == 621)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 10.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.25f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.99f;
          }
        }
        else if (this.type == 166)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 20.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.98f;
          }
        }
        else if (this.type == 300)
        {
          if ((double) this.ai[0] == 0.0)
            Main.PlaySound(SoundID.Item1, this.position);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 60.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.99f;
          }
        }
        else if (this.type == 306)
        {
          if (this.alpha <= 200)
          {
            for (int index1 = 0; index1 < 4; ++index1)
            {
              float num1 = this.velocity.X / 4f * (float) index1;
              float num2 = this.velocity.Y / 4f * (float) index1;
              int index2 = Dust.NewDust(this.position, this.width, this.height, 184, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].position.X = this.Center.X - num1;
              Main.dust[index2].position.Y = this.Center.Y - num2;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.0f;
              Main.dust[index2].scale = 0.7f;
            }
          }
          this.alpha = this.alpha - 50;
          if (this.alpha < 0)
            this.alpha = 0;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 0.785f;
        }
        else if (this.type == 304)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] >= 30.0)
          {
            this.alpha = this.alpha + 10;
            this.damage = (int) ((double) this.damage * 0.9);
            this.knockBack = (float) (int) ((double) this.knockBack * 0.9);
            if (this.alpha >= (int) byte.MaxValue)
              this.active = false;
          }
          if ((double) this.ai[0] < 30.0)
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else if (this.type == 370 || this.type == 371)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 15.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.98f;
          }
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] >= 20.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.4f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.97f;
          }
          else if (this.type == 48 || this.type == 54 || (this.type == 93 || this.type == 520) || this.type == 599)
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        if (this.type != 54 || Main.rand.Next(20) != 0)
          return;
        Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.75f);
      }
      else if (this.aiStyle == 3)
      {
        if (this.soundDelay == 0 && this.type != 383)
        {
          this.soundDelay = 8;
          Main.PlaySound(SoundID.Item7, this.position);
        }
        if (this.type == 19)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 0.3f;
          }
        }
        else if (this.type == 33)
        {
          if (Main.rand.Next(1) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 40, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 0, new Color(), 1.4f);
            Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 320)
        {
          if (Main.rand.Next(3) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 5, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 0, new Color(), 1.1f);
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index].scale = 0.9f;
              Dust dust = Main.dust[index];
              dust.velocity = dust.velocity * 0.2f;
            }
            else
              Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 6)
        {
          if (Main.rand.Next(5) == 0)
          {
            int Type;
            switch (Main.rand.Next(3))
            {
              case 0:
                Type = 15;
                break;
              case 1:
                Type = 57;
                break;
              default:
                Type = 58;
                break;
            }
            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, new Color(), 0.7f);
          }
        }
        else if (this.type == 113 && Main.rand.Next(1) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X * 0.15f, this.velocity.Y * 0.15f, 0, new Color(), 1.1f);
          Main.dust[index].noGravity = true;
          Dust.NewDust(this.position, this.width, this.height, 15, this.velocity.X * 0.05f, this.velocity.Y * 0.05f, 150, new Color(), 0.6f);
        }
        if ((double) this.ai[0] == 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if (this.type == 106 && (double) this.ai[1] >= 45.0)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
          if (this.type == 320 || this.type == 383)
          {
            if ((double) this.ai[1] >= 10.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + 0.5f;
              if (this.type == 383 && (double) this.velocity.Y < 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + 0.35f;
              }
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 * 0.95f;
              if ((double) this.velocity.Y > 16.0)
                this.velocity.Y = 16f;
              if (this.type == 383 && (double) Vector2.Distance(this.Center, Main.player[this.owner].Center) > 800.0)
                this.ai[0] = 1f;
            }
          }
          else if (this.type == 182)
          {
            if (Main.rand.Next(2) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 57, 0.0f, 0.0f, (int) byte.MaxValue, new Color(), 0.75f);
              Dust dust = Main.dust[index];
              dust.velocity = dust.velocity * 0.1f;
              Main.dust[index].noGravity = true;
            }
            if ((double) this.velocity.X > 0.0)
              this.spriteDirection = 1;
            else if ((double) this.velocity.X < 0.0)
              this.spriteDirection = -1;
            float num1 = this.position.X;
            float num2 = this.position.Y;
            float num3 = 1000f;
            bool flag = false;
            if ((double) this.ai[1] > 10.0)
            {
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this, false))
                {
                  float num4 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  float num5 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                  float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - num4) + Math.Abs(this.position.Y + (float) (this.height / 2) - num5);
                  if ((double) num6 < 800.0 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                  {
                    num3 = num6;
                    num1 = num4;
                    num2 = num5;
                    flag = true;
                  }
                }
              }
            }
            if (!flag)
            {
              num1 = (float) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X * 100.0);
              num2 = (float) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y * 100.0);
              if ((double) this.ai[1] >= 30.0)
              {
                this.ai[0] = 1f;
                this.ai[1] = 0.0f;
                this.netUpdate = true;
              }
            }
            float num7 = 12f;
            float num8 = 0.25f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num9 = num1 - vector2.X;
            float num10 = num2 - vector2.Y;
            float num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
            float num12 = num7 / num11;
            float num13 = num9 * num12;
            float num14 = num10 * num12;
            if ((double) this.velocity.X < (double) num13)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + num8;
              if ((double) this.velocity.X < 0.0 && (double) num13 > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + num8 * 2f;
              }
            }
            else if ((double) this.velocity.X > (double) num13)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - num8;
              if ((double) this.velocity.X > 0.0 && (double) num13 < 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 - num8 * 2f;
              }
            }
            if ((double) this.velocity.Y < (double) num14)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + num8;
              if ((double) this.velocity.Y < 0.0 && (double) num14 > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + num8 * 2f;
              }
            }
            else if ((double) this.velocity.Y > (double) num14)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - num8;
              if ((double) this.velocity.Y > 0.0 && (double) num14 < 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 - num8 * 2f;
              }
            }
          }
          else if (this.type == 301)
          {
            if ((double) this.ai[1] >= 20.0)
            {
              this.ai[0] = 1f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
            }
          }
          else if ((double) this.ai[1] >= 30.0)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        else
        {
          this.tileCollide = false;
          float num1 = 9f;
          float val1 = 0.4f;
          if (this.type == 19)
          {
            num1 = 13f;
            val1 = 0.6f;
          }
          else if (this.type == 33)
          {
            num1 = 15f;
            val1 = 0.8f;
          }
          else if (this.type == 182)
          {
            num1 = 16f;
            val1 = 1.2f;
          }
          else if (this.type == 106)
          {
            num1 = 16f;
            val1 = 1.2f;
          }
          else if (this.type == 272)
          {
            num1 = 15f;
            val1 = 1f;
          }
          else if (this.type == 333)
          {
            num1 = 12f;
            val1 = 0.6f;
          }
          else if (this.type == 301)
          {
            num1 = 15f;
            val1 = 3f;
          }
          else if (this.type == 320)
          {
            num1 = 15f;
            val1 = 3f;
          }
          else if (this.type == 383)
          {
            num1 = 16f;
            val1 = 4f;
          }
          Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num2 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2_1.X;
          float num3 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2_1.Y;
          float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          if ((double) num4 > 3000.0)
            this.Kill();
          float num5 = num1 / num4;
          float x = num2 * num5;
          float y = num3 * num5;
          if (this.type == 383)
          {
            Vector2 vector2_2 = new Vector2(x, y) - this.velocity;
            if (vector2_2 != Vector2.Zero)
            {
              Vector2 vector2_3 = vector2_2;
              vector2_3.Normalize();
              this.velocity = this.velocity + vector2_3 * Math.Min(val1, vector2_2.Length());
            }
          }
          else
          {
            if ((double) this.velocity.X < (double) x)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + val1;
              if ((double) this.velocity.X < 0.0 && (double) x > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + val1;
              }
            }
            else if ((double) this.velocity.X > (double) x)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 - val1;
              if ((double) this.velocity.X > 0.0 && (double) x < 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 - val1;
              }
            }
            if ((double) this.velocity.Y < (double) y)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + val1;
              if ((double) this.velocity.Y < 0.0 && (double) y > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + val1;
              }
            }
            else if ((double) this.velocity.Y > (double) y)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 - val1;
              if ((double) this.velocity.Y > 0.0 && (double) y < 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 - val1;
              }
            }
          }
          if (Main.myPlayer == this.owner && new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height).Intersects(new Microsoft.Xna.Framework.Rectangle((int) Main.player[this.owner].position.X, (int) Main.player[this.owner].position.Y, Main.player[this.owner].width, Main.player[this.owner].height)))
            this.Kill();
        }
        if (this.type == 106)
          this.rotation = this.rotation + 0.3f * (float) this.direction;
        else if (this.type == 383)
        {
          if ((double) this.ai[0] == 0.0)
          {
            Vector2 velocity = this.velocity;
            velocity.Normalize();
            this.rotation = (float) Math.Atan2((double) velocity.Y, (double) velocity.X) + 1.57f;
          }
          else
          {
            Vector2 vector2 = this.Center - Main.player[this.owner].Center;
            vector2.Normalize();
            this.rotation = (float) Math.Atan2((double) vector2.Y, (double) vector2.X) + 1.57f;
          }
        }
        else
          this.rotation = this.rotation + 0.4f * (float) this.direction;
      }
      else if (this.aiStyle == 4)
      {
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        if ((double) this.ai[0] == 0.0)
        {
          if (this.type >= 150 && this.type <= 152 && ((double) this.ai[1] == 0.0 && this.alpha == (int) byte.MaxValue) && Main.rand.Next(2) == 0)
          {
            this.type = this.type + 1;
            this.netUpdate = true;
          }
          this.alpha = this.alpha - 50;
          if (this.type >= 150 && this.type <= 152)
            this.alpha = this.alpha - 25;
          else if (this.type == 493 || this.type == 494)
            this.alpha = this.alpha - 50;
          if (this.alpha > 0)
            return;
          this.alpha = 0;
          this.ai[0] = 1f;
          if ((double) this.ai[1] == 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
            this.position = this.position + this.velocity * 1f;
          }
          if (this.type == 7 && Main.myPlayer == this.owner)
          {
            int type = this.type;
            if ((double) this.ai[1] >= 6.0)
              ++type;
            int number = Projectile.NewProjectile(this.position.X + this.velocity.X + (float) (this.width / 2), this.position.Y + this.velocity.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            Main.projectile[number].damage = this.damage;
            Main.projectile[number].ai[1] = this.ai[1] + 1f;
            NetMessage.SendData(27, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
          }
          else if (this.type == 494 && Main.myPlayer == this.owner)
          {
            int type = this.type;
            if ((double) this.ai[1] >= (double) (7 + Main.rand.Next(2)))
              --type;
            int Damage = this.damage;
            float KnockBack = this.knockBack;
            if (type == 493)
            {
              Damage = (int) ((double) this.damage * 1.25);
              KnockBack = this.knockBack * 1.25f;
            }
            NetMessage.SendData(27, -1, -1, (NetworkText) null, Projectile.NewProjectile(this.position.X + this.velocity.X + (float) (this.width / 2), this.position.Y + this.velocity.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, type, Damage, KnockBack, this.owner, 0.0f, this.ai[1] + 1f), 0.0f, 0.0f, 0.0f, 0, 0, 0);
          }
          else
          {
            if (this.type != 150 && this.type != 151 || Main.myPlayer != this.owner)
              return;
            int Type = this.type;
            if (this.type == 150)
              Type = 151;
            else if (this.type == 151)
              Type = 150;
            if ((double) this.ai[1] >= 10.0 && this.type == 151)
              Type = 152;
            int number = Projectile.NewProjectile(this.position.X + this.velocity.X + (float) (this.width / 2), this.position.Y + this.velocity.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, Type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            Main.projectile[number].damage = this.damage;
            Main.projectile[number].ai[1] = this.ai[1] + 1f;
            NetMessage.SendData(27, -1, -1, (NetworkText) null, number, 0.0f, 0.0f, 0.0f, 0, 0, 0);
          }
        }
        else
        {
          if (this.alpha < 170 && this.alpha + 5 >= 170)
          {
            if (this.type >= 150 && this.type <= 152)
            {
              for (int index1 = 0; index1 < 8; ++index1)
              {
                int index2 = Dust.NewDust(this.position, this.width, this.height, 7, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, new Color(), 1.3f);
                Main.dust[index2].noGravity = true;
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.5f;
              }
            }
            else if (this.type == 493 || this.type == 494)
            {
              for (int index1 = 0; index1 < 8; ++index1)
              {
                int index2 = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(68, 71), this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 200, new Color(), 1.3f);
                Main.dust[index2].noGravity = true;
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.5f;
              }
            }
            else
            {
              for (int index = 0; index < 3; ++index)
                Dust.NewDust(this.position, this.width, this.height, 18, this.velocity.X * 0.025f, this.velocity.Y * 0.025f, 170, new Color(), 1.2f);
              Dust.NewDust(this.position, this.width, this.height, 14, 0.0f, 0.0f, 170, new Color(), 1.1f);
            }
          }
          this.alpha = this.type < 150 || this.type > 152 ? (this.type == 493 || this.type == 494 ? this.alpha + 7 : this.alpha + 5) : this.alpha + 3;
          if (this.alpha < (int) byte.MaxValue)
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 5)
      {
        if (this.type == 503)
        {
          if ((double) this.Center.Y > (double) this.ai[1])
            this.tileCollide = true;
        }
        else if (this.type == 92)
        {
          if ((double) this.position.Y > (double) this.ai[1])
            this.tileCollide = true;
        }
        else
        {
          if ((double) this.ai[1] == 0.0 && !Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.ai[1] = 1f;
            this.netUpdate = true;
          }
          if ((double) this.ai[1] != 0.0)
            this.tileCollide = true;
        }
        if (this.soundDelay == 0)
        {
          this.soundDelay = 20 + Main.rand.Next(40);
          Main.PlaySound(SoundID.Item9, this.position);
        }
        if (this.type == 503)
        {
          this.alpha = this.alpha - 15;
          int num = 150;
          if ((double) this.Center.Y >= (double) this.ai[1])
            num = 0;
          if (this.alpha < num)
            this.alpha = num;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.00999999977648258) * (float) this.direction;
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
            this.localAI[0] = 1f;
          this.alpha = this.alpha + (int) (25.0 * (double) this.localAI[0]);
          if (this.alpha > 200)
          {
            this.alpha = 200;
            this.localAI[0] = -1f;
          }
          if (this.alpha < 0)
          {
            this.alpha = 0;
            this.localAI[0] = 1f;
          }
        }
        this.rotation = this.type != 503 ? this.rotation + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.00999999977648258) * (float) this.direction : this.velocity.ToRotation() - 1.570796f;
        if (this.type == 503)
        {
          if (Main.rand.Next(16) == 0)
          {
            Vector2 vector2 = Vector2.UnitX.RotatedByRandom(1.57079637050629).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index = Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, new Color(), 1.2f);
            Main.dust[index].velocity = vector2 * 0.66f;
            Main.dust[index].position = this.Center + vector2 * 12f;
          }
          if (Main.rand.Next(48) == 0)
          {
            int index = Gore.NewGore(this.Center, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), 16, 1f);
            Gore gore1 = Main.gore[index];
            gore1.velocity = gore1.velocity * 0.66f;
            Gore gore2 = Main.gore[index];
            gore2.velocity = gore2.velocity + this.velocity * 0.3f;
          }
        }
        if ((double) this.ai[1] != 1.0 && this.type != 92)
          return;
        this.light = 0.9f;
        if (Main.rand.Next(10) == 0)
          Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, new Color(), 1.2f);
        if (Main.rand.Next(20) != 0)
          return;
        Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.2f, this.velocity.Y * 0.2f), Main.rand.Next(16, 18), 1f);
      }
      else if (this.aiStyle == 6)
      {
        this.velocity = this.velocity * 0.95f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] == 180.0)
          this.Kill();
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          int Type = 10 + this.type;
          if (this.type == 463)
            Type = 231;
          for (int index = 0; index < 30; ++index)
            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50, new Color(), 1f);
        }
        if (this.type != 10 && this.type != 11 && this.type != 463)
          return;
        int num1 = (int) ((double) this.position.X / 16.0) - 1;
        int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
        int num3 = (int) ((double) this.position.Y / 16.0) - 1;
        int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
        if (num1 < 0)
          num1 = 0;
        if (num2 > Main.maxTilesX)
          num2 = Main.maxTilesX;
        if (num3 < 0)
          num3 = 0;
        if (num4 > Main.maxTilesY)
          num4 = Main.maxTilesY;
        for (int index1 = num1; index1 < num2; ++index1)
        {
          for (int index2 = num3; index2 < num4; ++index2)
          {
            Vector2 vector2;
            vector2.X = (float) (index1 * 16);
            vector2.Y = (float) (index2 * 16);
            if ((double) this.position.X + (double) this.width > (double) vector2.X && (double) this.position.X < (double) vector2.X + 16.0 && ((double) this.position.Y + (double) this.height > (double) vector2.Y && (double) this.position.Y < (double) vector2.Y + 16.0) && (Main.myPlayer == this.owner && Main.tile[index1, index2].active()))
            {
              if (this.type == 10)
              {
                if ((int) Main.tile[index1, index2].type == 23 || (int) Main.tile[index1, index2].type == 199)
                {
                  Main.tile[index1, index2].type = (ushort) 2;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 25 || (int) Main.tile[index1, index2].type == 203)
                {
                  Main.tile[index1, index2].type = (ushort) 1;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 112 || (int) Main.tile[index1, index2].type == 234)
                {
                  Main.tile[index1, index2].type = (ushort) 53;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 163 || (int) Main.tile[index1, index2].type == 200)
                {
                  Main.tile[index1, index2].type = (ushort) 161;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 400 || (int) Main.tile[index1, index2].type == 401)
                {
                  Main.tile[index1, index2].type = (ushort) 396;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 398 || (int) Main.tile[index1, index2].type == 399)
                {
                  Main.tile[index1, index2].type = (ushort) 397;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
              }
              else if (this.type == 11 || this.type == 463)
              {
                if ((int) Main.tile[index1, index2].type == 109)
                {
                  Main.tile[index1, index2].type = (ushort) 2;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 116)
                {
                  Main.tile[index1, index2].type = (ushort) 53;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 117)
                {
                  Main.tile[index1, index2].type = (ushort) 1;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 164)
                {
                  Main.tile[index1, index2].type = (ushort) 161;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 403)
                {
                  Main.tile[index1, index2].type = (ushort) 396;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
                if ((int) Main.tile[index1, index2].type == 402)
                {
                  Main.tile[index1, index2].type = (ushort) 397;
                  WorldGen.SquareTileFrame(index1, index2, true);
                  if (Main.netMode == 1)
                    NetMessage.SendTileSquare(-1, index1, index2, 1, TileChangeType.None);
                }
              }
            }
          }
        }
      }
      else if (this.aiStyle == 7)
      {
        if (Main.player[this.owner].dead || Main.player[this.owner].stoned || (Main.player[this.owner].webbed || Main.player[this.owner].frozen))
        {
          this.Kill();
        }
        else
        {
          Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
          Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num1 = mountedCenter.X - vector2_1.X;
          float num2 = mountedCenter.Y - vector2_1.Y;
          float num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
          this.rotation = (float) Math.Atan2((double) num2, (double) num1) - 1.57f;
          if (this.type == 256)
            this.rotation = (float) Math.Atan2((double) num2, (double) num1) + 3.925f;
          if (this.type == 446)
          {
            Lighting.AddLight(mountedCenter, 0.0f, 0.4f, 0.3f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
            if ((double) this.localAI[0] >= 28.0)
              this.localAI[0] = 0.0f;
            DelegateMethods.v3_1 = new Vector3(0.0f, 0.4f, 0.3f);
            Utils.PlotTileLine(this.Center, mountedCenter, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
          }
          if (this.type == 652)
          {
            int num4 = this.frameCounter + 1;
            this.frameCounter = num4;
            if (num4 >= 7)
            {
              this.frameCounter = 0;
              int num5 = this.frame + 1;
              this.frame = num5;
              if (num5 >= Main.projFrames[this.type])
                this.frame = 0;
            }
          }
          if (this.type >= 646 && this.type <= 649)
          {
            Vector3 rgb = Vector3.Zero;
            switch (this.type)
            {
              case 646:
                rgb = new Vector3(0.7f, 0.5f, 0.1f);
                break;
              case 647:
                rgb = new Vector3(0.0f, 0.6f, 0.7f);
                break;
              case 648:
                rgb = new Vector3(0.6f, 0.2f, 0.6f);
                break;
              case 649:
                rgb = new Vector3(0.6f, 0.6f, 0.9f);
                break;
            }
            Lighting.AddLight(mountedCenter, rgb);
            Lighting.AddLight(this.Center, rgb);
            DelegateMethods.v3_1 = rgb;
            Utils.PlotTileLine(this.Center, mountedCenter, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
          }
          if ((double) this.ai[0] == 0.0)
          {
            if ((double) num3 > 300.0 && this.type == 13 || (double) num3 > 400.0 && this.type == 32 || ((double) num3 > 440.0 && this.type == 73 || (double) num3 > 440.0 && this.type == 74) || ((double) num3 > 250.0 && this.type == 165 || (double) num3 > 350.0 && this.type == 256 || ((double) num3 > 500.0 && this.type == 315 || (double) num3 > 550.0 && this.type == 322)) || ((double) num3 > 400.0 && this.type == 331 || (double) num3 > 550.0 && this.type == 332 || ((double) num3 > 400.0 && this.type == 372 || (double) num3 > 300.0 && this.type == 396) || ((double) num3 > 550.0 && this.type >= 646 && this.type <= 649 || (double) num3 > 600.0 && this.type == 652)) || ((double) num3 > 480.0 && this.type >= 486 && this.type <= 489 || (double) num3 > 500.0 && this.type == 446))
              this.ai[0] = 1f;
            else if (this.type >= 230 && this.type <= 235)
            {
              int num4 = 300 + (this.type - 230) * 30;
              if ((double) num3 > (double) num4)
                this.ai[0] = 1f;
            }
            Vector2 vector2_2 = this.Center - new Vector2(5f);
            Vector2 vector2_3 = this.Center + new Vector2(5f);
            Point tileCoordinates1 = (vector2_2 - new Vector2(16f)).ToTileCoordinates();
            Point tileCoordinates2 = (vector2_3 + new Vector2(32f)).ToTileCoordinates();
            int num5 = tileCoordinates1.X;
            int num6 = tileCoordinates2.X;
            int num7 = tileCoordinates1.Y;
            int num8 = tileCoordinates2.Y;
            if (num5 < 0)
              num5 = 0;
            if (num6 > Main.maxTilesX)
              num6 = Main.maxTilesX;
            if (num7 < 0)
              num7 = 0;
            if (num8 > Main.maxTilesY)
              num8 = Main.maxTilesY;
            for (int i = num5; i < num6; ++i)
            {
              for (int j = num7; j < num8; ++j)
              {
                if (Main.tile[i, j] == null)
                  Main.tile[i, j] = new Tile();
                Vector2 vector2_4;
                vector2_4.X = (float) (i * 16);
                vector2_4.Y = (float) (j * 16);
                if ((double) vector2_2.X + 10.0 > (double) vector2_4.X && (double) vector2_2.X < (double) vector2_4.X + 16.0 && ((double) vector2_2.Y + 10.0 > (double) vector2_4.Y && (double) vector2_2.Y < (double) vector2_4.Y + 16.0) && (Main.tile[i, j].nactive() && (Main.tileSolid[(int) Main.tile[i, j].type] || (int) Main.tile[i, j].type == 314)) && (this.type != 403 || (int) Main.tile[i, j].type == 314))
                {
                  if (Main.player[this.owner].grapCount < 10)
                  {
                    Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
                    Player player = Main.player[this.owner];
                    player.grapCount = player.grapCount + 1;
                  }
                  if (Main.myPlayer == this.owner)
                  {
                    int num4 = 0;
                    int index1 = -1;
                    int num9 = 100000;
                    if (this.type == 73 || this.type == 74)
                    {
                      for (int index2 = 0; index2 < 1000; ++index2)
                      {
                        if (index2 != this.whoAmI && Main.projectile[index2].active && (Main.projectile[index2].owner == this.owner && Main.projectile[index2].aiStyle == 7) && (double) Main.projectile[index2].ai[0] == 2.0)
                          Main.projectile[index2].Kill();
                      }
                    }
                    else
                    {
                      int num10 = 3;
                      if (this.type == 165)
                        num10 = 8;
                      if (this.type == 256)
                        num10 = 2;
                      if (this.type == 372)
                        num10 = 2;
                      if (this.type == 652)
                        num10 = 1;
                      if (this.type >= 646 && this.type <= 649)
                        num10 = 4;
                      for (int index2 = 0; index2 < 1000; ++index2)
                      {
                        if (Main.projectile[index2].active && Main.projectile[index2].owner == this.owner && Main.projectile[index2].aiStyle == 7)
                        {
                          if (Main.projectile[index2].timeLeft < num9)
                          {
                            index1 = index2;
                            num9 = Main.projectile[index2].timeLeft;
                          }
                          ++num4;
                        }
                      }
                      if (num4 > num10)
                        Main.projectile[index1].Kill();
                    }
                  }
                  WorldGen.KillTile(i, j, true, true, false);
                  Main.PlaySound(0, i * 16, j * 16, 1, 1f, 0.0f);
                  this.velocity.X = 0.0f;
                  this.velocity.Y = 0.0f;
                  this.ai[0] = 2f;
                  this.position.X = (float) (i * 16 + 8 - this.width / 2);
                  this.position.Y = (float) (j * 16 + 8 - this.height / 2);
                  this.damage = 0;
                  this.netUpdate = true;
                  if (Main.myPlayer == this.owner)
                  {
                    NetMessage.SendData(13, -1, -1, (NetworkText) null, this.owner, 0.0f, 0.0f, 0.0f, 0, 0, 0);
                    break;
                  }
                  break;
                }
              }
              if ((double) this.ai[0] == 2.0)
                break;
            }
          }
          else if ((double) this.ai[0] == 1.0)
          {
            float num4 = 11f;
            if (this.type == 32)
              num4 = 15f;
            if (this.type == 73 || this.type == 74)
              num4 = 17f;
            if (this.type == 315)
              num4 = 20f;
            if (this.type == 322)
              num4 = 22f;
            if (this.type >= 230 && this.type <= 235)
              num4 = (float) (11.0 + (double) (this.type - 230) * 0.75);
            if (this.type == 446)
              num4 = 20f;
            if (this.type >= 486 && this.type <= 489)
              num4 = 18f;
            if (this.type >= 646 && this.type <= 649)
              num4 = 24f;
            if (this.type == 652)
              num4 = 24f;
            if (this.type == 332)
              num4 = 17f;
            if ((double) num3 < 24.0)
              this.Kill();
            float num5 = num4 / num3;
            float num6 = num1 * num5;
            float num7 = num2 * num5;
            this.velocity.X = num6;
            this.velocity.Y = num7;
          }
          else
          {
            if ((double) this.ai[0] != 2.0)
              return;
            int num4 = (int) ((double) this.position.X / 16.0) - 1;
            int num5 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
            int num6 = (int) ((double) this.position.Y / 16.0) - 1;
            int num7 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
            if (num4 < 0)
              num4 = 0;
            if (num5 > Main.maxTilesX)
              num5 = Main.maxTilesX;
            if (num6 < 0)
              num6 = 0;
            if (num7 > Main.maxTilesY)
              num7 = Main.maxTilesY;
            bool flag = true;
            for (int index1 = num4; index1 < num5; ++index1)
            {
              for (int index2 = num6; index2 < num7; ++index2)
              {
                if (Main.tile[index1, index2] == null)
                  Main.tile[index1, index2] = new Tile();
                Vector2 vector2_2;
                vector2_2.X = (float) (index1 * 16);
                vector2_2.Y = (float) (index2 * 16);
                if ((double) this.position.X + (double) (this.width / 2) > (double) vector2_2.X && (double) this.position.X + (double) (this.width / 2) < (double) vector2_2.X + 16.0 && ((double) this.position.Y + (double) (this.height / 2) > (double) vector2_2.Y && (double) this.position.Y + (double) (this.height / 2) < (double) vector2_2.Y + 16.0) && Main.tile[index1, index2].nactive() && (Main.tileSolid[(int) Main.tile[index1, index2].type] || (int) Main.tile[index1, index2].type == 314 || (int) Main.tile[index1, index2].type == 5))
                  flag = false;
              }
            }
            if (flag)
            {
              this.ai[0] = 1f;
            }
            else
            {
              if (Main.player[this.owner].grapCount >= 10)
                return;
              Main.player[this.owner].grappling[Main.player[this.owner].grapCount] = this.whoAmI;
              Player player = Main.player[this.owner];
              player.grapCount = player.grapCount + 1;
            }
          }
        }
      }
      else if (this.aiStyle == 8)
      {
        if (this.type == 258 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item20, this.position);
        }
        if (this.type == 96 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item20, this.position);
        }
        if (this.type == 27)
        {
          for (int index1 = 0; index1 < 5; ++index1)
          {
            float num1 = this.velocity.X / 3f * (float) index1;
            float num2 = this.velocity.Y / 3f * (float) index1;
            int num3 = 4;
            int index2 = Dust.NewDust(new Vector2(this.position.X + (float) num3, this.position.Y + (float) num3), this.width - num3 * 2, this.height - num3 * 2, 172, 0.0f, 0.0f, 100, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.1f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + this.velocity * 0.1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - num1;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - num2;
          }
          if (Main.rand.Next(5) == 0)
          {
            int num = 4;
            int index = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 172, 0.0f, 0.0f, 100, new Color(), 0.6f);
            Dust dust1 = Main.dust[index];
            dust1.velocity = dust1.velocity * 0.25f;
            Dust dust2 = Main.dust[index];
            dust2.velocity = dust2.velocity + this.velocity * 0.5f;
          }
        }
        else if (this.type == 502)
          Lighting.AddLight(this.Center, (float) ((0.5 + (double) ((float) Main.DiscoR / (float) byte.MaxValue)) / 2.0), (float) ((0.5 + (double) ((float) Main.DiscoG / (float) byte.MaxValue)) / 2.0), (float) ((0.5 + (double) ((float) Main.DiscoB / (float) byte.MaxValue)) / 2.0));
        else if (this.type == 95 || this.type == 96)
        {
          int index = Dust.NewDust(new Vector2(this.position.X + this.velocity.X, this.position.Y + this.velocity.Y), this.width, this.height, 75, this.velocity.X, this.velocity.Y, 100, new Color(), 3f * this.scale);
          Main.dust[index].noGravity = true;
        }
        else if (this.type == 253)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 0.3f;
          }
        }
        else
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 0.3f;
          }
        }
        if (this.type != 27 && this.type != 96 && this.type != 258)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        if ((double) this.ai[1] >= 20.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 0.2f;
        }
        if (this.type == 502)
        {
          this.rotation = this.velocity.ToRotation() + 1.570796f;
          if ((double) this.velocity.X != 0.0)
            this.spriteDirection = this.direction = Math.Sign(this.velocity.X);
        }
        else
          this.rotation = this.rotation + 0.3f * (float) this.direction;
        if ((double) this.velocity.Y <= 16.0)
          return;
        this.velocity.Y = 16f;
      }
      else if (this.aiStyle == 9)
      {
        if (this.type == 491)
        {
          if (Main.rand.Next(2) == 0)
          {
            int Type;
            switch (Main.rand.Next(3))
            {
              case 0:
                Type = 15;
                break;
              case 1:
                Type = 57;
                break;
              default:
                Type = 58;
                break;
            }
            int index = Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, (int) byte.MaxValue, new Color(), 0.7f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.25f;
            Main.dust[index].position = (Main.dust[index].position + this.position) / 2f;
          }
        }
        else if (this.type == 34)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 3.5f);
          Main.dust[index].noGravity = true;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 1.4f;
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 1.5f);
        }
        else if (this.type == 79)
        {
          if (this.soundDelay == 0 && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 2.0)
          {
            this.soundDelay = 10;
            Main.PlaySound(SoundID.Item9, this.position);
          }
          for (int index1 = 0; index1 < 1; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 66, 0.0f, 0.0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2.5f);
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.1f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + this.velocity * 0.2f;
            Main.dust[index2].position.X = (float) ((double) this.position.X + (double) (this.width / 2) + 4.0) + (float) Main.rand.Next(-2, 3);
            Main.dust[index2].position.Y = this.position.Y + (float) (this.height / 2) + (float) Main.rand.Next(-2, 3);
            Main.dust[index2].noGravity = true;
          }
        }
        else
        {
          if (this.soundDelay == 0 && (double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 2.0)
          {
            this.soundDelay = 10;
            Main.PlaySound(SoundID.Item9, this.position);
          }
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 15, 0.0f, 0.0f, 100, new Color(), 2f);
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.3f;
          Main.dust[index].position.X = (float) ((double) this.position.X + (double) (this.width / 2) + 4.0) + (float) Main.rand.Next(-4, 5);
          Main.dust[index].position.Y = this.position.Y + (float) (this.height / 2) + (float) Main.rand.Next(-4, 5);
          Main.dust[index].noGravity = true;
        }
        if (Main.myPlayer == this.owner && (double) this.ai[0] <= 0.0)
        {
          if (Main.player[this.owner].channel)
          {
            float num1 = 12f;
            if (this.type == 16)
              num1 = 15f;
            if (this.type == 491)
              num1 = 20f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num2 = (float) Main.mouseX + Main.screenPosition.X - vector2.X;
            float num3 = (float) Main.mouseY + Main.screenPosition.Y - vector2.Y;
            if ((double) Main.player[this.owner].gravDir == -1.0)
              num3 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY - vector2.Y;
            float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            float num5 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            if ((double) this.ai[0] < 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1f;
            }
            if (this.type == 491 && (double) num5 < 100.0)
            {
              if ((double) this.velocity.Length() < (double) num1)
              {
                this.velocity = this.velocity * 1.1f;
                if ((double) this.velocity.Length() > (double) num1)
                {
                  this.velocity.Normalize();
                  this.velocity = this.velocity * num1;
                }
              }
              if ((double) this.ai[0] == 0.0)
                this.ai[0] = -10f;
            }
            else if ((double) num5 > (double) num1)
            {
              float num6 = num1 / num5;
              float x = num2 * num6;
              float y = num3 * num6;
              if ((int) ((double) x * 1000.0) != (int) ((double) this.velocity.X * 1000.0) || (int) ((double) y * 1000.0) != (int) ((double) this.velocity.Y * 1000.0))
                this.netUpdate = true;
              if (this.type == 491)
              {
                this.velocity = (this.velocity * 4f + new Vector2(x, y)) / 5f;
              }
              else
              {
                this.velocity.X = x;
                this.velocity.Y = y;
              }
            }
            else
            {
              if ((int) ((double) num2 * 1000.0) != (int) ((double) this.velocity.X * 1000.0) || (int) ((double) num3 * 1000.0) != (int) ((double) this.velocity.Y * 1000.0))
                this.netUpdate = true;
              this.velocity.X = num2;
              this.velocity.Y = num3;
            }
          }
          else if ((double) this.ai[0] <= 0.0)
          {
            this.netUpdate = true;
            if (this.type != 491)
            {
              float num1 = 12f;
              Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
              float num2 = (float) Main.mouseX + Main.screenPosition.X - vector2.X;
              float num3 = (float) Main.mouseY + Main.screenPosition.Y - vector2.Y;
              if ((double) Main.player[this.owner].gravDir == -1.0)
                num3 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY - vector2.Y;
              float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
              if ((double) num4 == 0.0 || (double) this.ai[0] < 0.0)
              {
                vector2 = new Vector2(Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2), Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2));
                num2 = this.position.X + (float) this.width * 0.5f - vector2.X;
                num3 = this.position.Y + (float) this.height * 0.5f - vector2.Y;
                num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
              }
              float num5 = num1 / num4;
              float num6 = num2 * num5;
              float num7 = num3 * num5;
              this.velocity.X = num6;
              this.velocity.Y = num7;
              if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
                this.Kill();
            }
            this.ai[0] = 1f;
          }
        }
        if (this.type == 491)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] > 0.0 && (double) this.localAI[0] > 15.0)
          {
            this.tileCollide = false;
            Vector2 vector2 = Main.player[this.owner].Center - this.Center;
            if ((double) vector2.Length() < 20.0)
              this.Kill();
            vector2.Normalize();
            this.velocity = (this.velocity * 5f + vector2 * 25f) / 6f;
          }
          this.rotation = (double) this.ai[0] < 0.0 || (double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0 ? this.rotation + 0.3f : ((double) this.ai[0] <= 0.0 ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f : this.rotation + 0.3f * (float) this.direction);
        }
        else if (this.type == 34)
          this.rotation = this.rotation + 0.3f * (float) this.direction;
        else if ((double) this.velocity.X != 0.0 || (double) this.velocity.Y != 0.0)
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 2.355f;
        if ((double) this.velocity.Y <= 16.0)
          return;
        this.velocity.Y = 16f;
      }
      else if (this.aiStyle == 10)
      {
        if (this.type == 31 && (double) this.ai[0] != 2.0)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0.0f, this.velocity.Y / 2f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type == 39)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38, 0.0f, this.velocity.Y / 2f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type >= 411 && this.type <= 414)
        {
          if (Main.rand.Next(3) == 0)
          {
            int Type = 9;
            if (this.type == 412 || this.type == 414)
              Type = 11;
            if (this.type == 413)
              Type = 19;
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, 0.0f, this.velocity.Y / 2f, 0, new Color(), 1f);
            Main.dust[index].noGravity = true;
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity - this.velocity * 0.5f;
          }
        }
        else if (this.type == 40)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0.0f, this.velocity.Y / 2f, 0, new Color(), 1f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.4f;
          }
        }
        else if (this.type == 42 || this.type == 31)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0.0f, 0.0f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type == 56 || this.type == 65)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0.0f, 0.0f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type == 67 || this.type == 68)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51, 0.0f, 0.0f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type == 71)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53, 0.0f, 0.0f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type == 179)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 149, 0.0f, 0.0f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type == 241 || this.type == 354)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0.0f, 0.0f, 0, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @Main.dust[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.4f;
          }
        }
        else if (this.type != 109 && Main.rand.Next(20) == 0)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0.0f, 0.0f, 0, new Color(), 1f);
        this.tileCollide = true;
        this.localAI[1] = 0.0f;
        if (Main.myPlayer == this.owner && (double) this.ai[0] == 0.0)
        {
          this.tileCollide = false;
          if (Main.player[this.owner].channel)
          {
            this.localAI[1] = -1f;
            float num1 = 12f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num2 = (float) Main.mouseX + Main.screenPosition.X - vector2.X;
            float num3 = (float) Main.mouseY + Main.screenPosition.Y - vector2.Y;
            if ((double) Main.player[this.owner].gravDir == -1.0)
              num3 = Main.screenPosition.Y + (float) Main.screenHeight - (float) Main.mouseY - vector2.Y;
            float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            float num5 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            if ((double) num5 > (double) num1)
            {
              float num6 = num1 / num5;
              float num7 = num2 * num6;
              float num8 = num3 * num6;
              if ((double) num7 != (double) this.velocity.X || (double) num8 != (double) this.velocity.Y)
                this.netUpdate = true;
              this.velocity.X = num7;
              this.velocity.Y = num8;
            }
            else
            {
              if ((double) num2 != (double) this.velocity.X || (double) num3 != (double) this.velocity.Y)
                this.netUpdate = true;
              this.velocity.X = num2;
              this.velocity.Y = num3;
            }
          }
          else
          {
            this.ai[0] = 1f;
            this.netUpdate = true;
          }
        }
        if ((double) this.ai[0] == 1.0 && this.type != 109)
        {
          if (this.type == 42 || this.type == 65 || (this.type == 68 || this.type == 354))
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 1f;
            if ((double) this.ai[1] >= 60.0)
            {
              this.ai[1] = 60f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + 0.2f;
            }
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 0.41f;
          }
        }
        else if ((double) this.ai[0] == 2.0 && this.type != 109)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 0.2f;
          if ((double) this.velocity.X < -0.04)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.04f;
          }
          else if ((double) this.velocity.X > 0.04)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - 0.04f;
          }
          else
            this.velocity.X = 0.0f;
        }
        this.rotation = this.rotation + 0.1f;
        if ((double) this.velocity.Y <= 10.0)
          return;
        this.velocity.Y = 10f;
      }
      else if (this.aiStyle == 11)
      {
        if (this.type == 72 || this.type == 86 || this.type == 87)
        {
          if ((double) this.velocity.X > 0.0)
            this.spriteDirection = -1;
          else if ((double) this.velocity.X < 0.0)
            this.spriteDirection = 1;
          this.rotation = this.velocity.X * 0.1f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 4)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame >= 4)
            this.frame = 0;
          if (Main.rand.Next(6) == 0)
          {
            int Type = 56;
            if (this.type == 86)
              Type = 73;
            else if (this.type == 87)
              Type = 74;
            int index = Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 200, new Color(), 0.8f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.3f;
            Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
          }
        }
        else
          this.rotation = this.rotation + 0.02f;
        if (Main.myPlayer == this.owner)
        {
          if (this.type == 72)
          {
            if (Main.player[Main.myPlayer].blueFairy)
              this.timeLeft = 2;
          }
          else if (this.type == 86)
          {
            if (Main.player[Main.myPlayer].redFairy)
              this.timeLeft = 2;
          }
          else if (this.type == 87)
          {
            if (Main.player[Main.myPlayer].greenFairy)
              this.timeLeft = 2;
          }
          else if (Main.player[Main.myPlayer].lightOrb)
            this.timeLeft = 2;
        }
        if (!Main.player[this.owner].dead)
        {
          float num1 = 3f;
          if (this.type == 72 || this.type == 86 || this.type == 87)
            num1 = 3.75f;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num2 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num3 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          int num4 = 70;
          if (this.type == 18)
          {
            if (Main.player[this.owner].controlUp)
            {
              num3 = Main.player[this.owner].position.Y - 40f - vector2.Y;
              num2 -= 6f;
              num4 = 4;
            }
            else if (Main.player[this.owner].controlDown)
            {
              num3 = (float) ((double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height + 40.0) - vector2.Y;
              num2 -= 6f;
              num4 = 4;
            }
          }
          float num5 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          float num6 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          if (this.type == 72 || this.type == 86 || this.type == 87)
            num4 = 40;
          if ((double) num6 > 800.0)
          {
            this.position.X = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - (float) (this.width / 2);
            this.position.Y = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - (float) (this.height / 2);
          }
          else if ((double) num6 > (double) num4)
          {
            float num7 = num1 / num6;
            float num8 = num2 * num7;
            float num9 = num3 * num7;
            this.velocity.X = num8;
            this.velocity.Y = num9;
          }
          else
          {
            this.velocity.X = 0.0f;
            this.velocity.Y = 0.0f;
          }
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 12)
      {
        if (this.type == 288 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item17, this.position);
        }
        if (this.type == 280 || this.type == 288)
        {
          this.scale = this.scale - 1f / 500f;
          if ((double) this.scale <= 0.0)
            this.Kill();
          if (this.type == 288)
            this.ai[0] = 4f;
          if ((double) this.ai[0] > 3.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 0.075f;
            for (int index1 = 0; index1 < 3; ++index1)
            {
              float num1 = this.velocity.X / 3f * (float) index1;
              float num2 = this.velocity.Y / 3f * (float) index1;
              int num3 = 14;
              int index2 = Dust.NewDust(new Vector2(this.position.X + (float) num3, this.position.Y + (float) num3), this.width - num3 * 2, this.height - num3 * 2, 170, 0.0f, 0.0f, 100, new Color(), 1f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 0.1f;
              Dust dust2 = Main.dust[index2];
              dust2.velocity = dust2.velocity + this.velocity * 0.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.dust[index2].position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - num1;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @Main.dust[index2].position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 - num2;
            }
            if (Main.rand.Next(8) != 0)
              return;
            int num = 16;
            int index = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 170, 0.0f, 0.0f, 100, new Color(), 0.5f);
            Dust dust3 = Main.dust[index];
            dust3.velocity = dust3.velocity * 0.25f;
            Dust dust4 = Main.dust[index];
            dust4.velocity = dust4.velocity + this.velocity * 0.5f;
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
        }
        else
        {
          this.scale = this.scale - 0.02f;
          if ((double) this.scale <= 0.0)
            this.Kill();
          if ((double) this.ai[0] > 3.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 0.2f;
            for (int index1 = 0; index1 < 1; ++index1)
            {
              for (int index2 = 0; index2 < 3; ++index2)
              {
                float num1 = this.velocity.X / 3f * (float) index2;
                float num2 = this.velocity.Y / 3f * (float) index2;
                int num3 = 6;
                int index3 = Dust.NewDust(new Vector2(this.position.X + (float) num3, this.position.Y + (float) num3), this.width - num3 * 2, this.height - num3 * 2, 172, 0.0f, 0.0f, 100, new Color(), 1.2f);
                Main.dust[index3].noGravity = true;
                Dust dust1 = Main.dust[index3];
                dust1.velocity = dust1.velocity * 0.3f;
                Dust dust2 = Main.dust[index3];
                dust2.velocity = dust2.velocity + this.velocity * 0.5f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index3].position.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 - num1;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @Main.dust[index3].position.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 - num2;
              }
              if (Main.rand.Next(8) == 0)
              {
                int num = 6;
                int index2 = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 172, 0.0f, 0.0f, 100, new Color(), 0.75f);
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.5f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.5f;
              }
            }
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
        }
      }
      else if (this.aiStyle == 13)
      {
        if (Main.player[this.owner].dead)
        {
          this.Kill();
        }
        else
        {
          if (this.type != 481)
          {
            Main.player[this.owner].itemAnimation = 5;
            Main.player[this.owner].itemTime = 5;
          }
          if (this.alpha == 0)
          {
            if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
              Main.player[this.owner].ChangeDir(1);
            else
              Main.player[this.owner].ChangeDir(-1);
          }
          if (this.type == 481)
            this.extraUpdates = (double) this.ai[0] != 0.0 ? 1 : 0;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num1 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num2 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          float num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
          if ((double) this.ai[0] == 0.0)
          {
            if ((double) num3 > 700.0)
              this.ai[0] = 1f;
            else if (this.type == 262 && (double) num3 > 500.0)
              this.ai[0] = 1f;
            else if (this.type == 271 && (double) num3 > 200.0)
              this.ai[0] = 1f;
            else if (this.type == 273 && (double) num3 > 150.0)
              this.ai[0] = 1f;
            else if (this.type == 481 && (double) num3 > 350.0)
              this.ai[0] = 1f;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 1f;
            if ((double) this.ai[1] > 5.0)
              this.alpha = 0;
            if (this.type == 262 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 271 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 273 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 481 && (double) this.ai[1] > 8.0)
              this.ai[1] = 8f;
            if (this.type == 404 && (double) this.ai[1] > 8.0)
              this.ai[1] = 0.0f;
            if ((double) this.ai[1] >= 10.0)
            {
              this.ai[1] = 15f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + 0.3f;
            }
            if (this.type == 262 && (double) this.velocity.X < 0.0)
              this.spriteDirection = -1;
            else if (this.type == 262)
              this.spriteDirection = 1;
            if (this.type == 271 && (double) this.velocity.X < 0.0)
            {
              this.spriteDirection = -1;
            }
            else
            {
              if (this.type != 271)
                return;
              this.spriteDirection = 1;
            }
          }
          else
          {
            if ((double) this.ai[0] != 1.0)
              return;
            this.tileCollide = false;
            this.rotation = (float) Math.Atan2((double) num2, (double) num1) - 1.57f;
            float num4 = 20f;
            if (this.type == 262)
              num4 = 30f;
            if ((double) num3 < 50.0)
              this.Kill();
            float num5 = num4 / num3;
            float num6 = num1 * num5;
            float num7 = num2 * num5;
            this.velocity.X = num6;
            this.velocity.Y = num7;
            if (this.type == 262 && (double) this.velocity.X < 0.0)
              this.spriteDirection = 1;
            else if (this.type == 262)
              this.spriteDirection = -1;
            if (this.type == 271 && (double) this.velocity.X < 0.0)
            {
              this.spriteDirection = 1;
            }
            else
            {
              if (this.type != 271)
                return;
              this.spriteDirection = -1;
            }
          }
        }
      }
      else if (this.aiStyle == 14)
      {
        if (this.type == 473 && Main.netMode != 2)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] >= 10.0)
          {
            this.localAI[0] = 0.0f;
            int num1 = 30;
            if ((double) (this.Center - Main.player[Main.myPlayer].Center).Length() < (double) (Main.screenWidth + num1 * 16))
            {
              int num2 = (int) this.Center.X / 16;
              int num3 = (int) this.Center.Y / 16;
              for (int index1 = num2 - num1; index1 <= num2 + num1; ++index1)
              {
                for (int index2 = num3 - num1; index2 <= num3 + num1; ++index2)
                {
                  if (Main.rand.Next(4) == 0 && ((double) new Vector2((float) (num2 - index1), (float) (num3 - index2)).Length() < (double) num1 && index1 > 0 && (index1 < Main.maxTilesX - 1 && index2 > 0) && (index2 < Main.maxTilesY - 1 && Main.tile[index1, index2] != null && Main.tile[index1, index2].active())))
                  {
                    bool flag = false;
                    if ((int) Main.tile[index1, index2].type == 185 && (int) Main.tile[index1, index2].frameY == 18)
                    {
                      if ((int) Main.tile[index1, index2].frameX >= 576 && (int) Main.tile[index1, index2].frameX <= 882)
                        flag = true;
                    }
                    else if ((int) Main.tile[index1, index2].type == 186 && (int) Main.tile[index1, index2].frameX >= 864 && (int) Main.tile[index1, index2].frameX <= 1170)
                      flag = true;
                    if (flag || Main.tileSpelunker[(int) Main.tile[index1, index2].type] || Main.tileAlch[(int) Main.tile[index1, index2].type] && (int) Main.tile[index1, index2].type != 82)
                    {
                      int index3 = Dust.NewDust(new Vector2((float) (index1 * 16), (float) (index2 * 16)), 16, 16, 204, 0.0f, 0.0f, 150, new Color(), 0.3f);
                      Main.dust[index3].fadeIn = 0.75f;
                      Dust dust = Main.dust[index3];
                      dust.velocity = dust.velocity * 0.1f;
                      Main.dust[index3].noLight = true;
                    }
                  }
                }
              }
            }
          }
        }
        if (this.type == 352)
        {
          if ((double) this.localAI[1] == 0.0)
            this.localAI[1] = 1f;
          this.alpha = this.alpha + (int) (25.0 * (double) this.localAI[1]);
          if (this.alpha <= 0)
          {
            this.alpha = 0;
            this.localAI[1] = 1f;
          }
          else if (this.alpha >= (int) byte.MaxValue)
          {
            this.alpha = (int) byte.MaxValue;
            this.localAI[1] = -1f;
          }
          this.scale = this.scale + this.localAI[1] * 0.01f;
        }
        if (this.type == 346)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            Main.PlaySound(SoundID.Item1, this.position);
          }
          this.frame = (int) this.ai[1];
          if (this.owner == Main.myPlayer && this.timeLeft == 1)
          {
            for (int index = 0; index < 5; ++index)
            {
              float num1 = 10f;
              Vector2 vector2 = new Vector2(this.Center.X, this.Center.Y);
              float num2 = (float) Main.rand.Next(-20, 21);
              float num3 = (float) Main.rand.Next(-20, 0);
              float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
              float num5 = num1 / num4;
              float num6 = num2 * num5;
              float num7 = num3 * num5;
              float SpeedX = num6 * (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
              float SpeedY = num7 * (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
              Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, 347, 40, 0.0f, Main.myPlayer, 0.0f, this.ai[1]);
            }
          }
        }
        if (this.type == 196)
        {
          int num = Main.rand.Next(1, 3);
          for (int index1 = 0; index1 < num; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1f);
            Dust dust1 = Main.dust[index2];
            dust1.alpha = dust1.alpha + Main.rand.Next(100);
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity * 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) Main.rand.Next(-10, 11) * 0.025f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - (float) (0.400000005960464 + (double) Main.rand.Next(-3, 14) * 0.150000005960464);
            Main.dust[index2].fadeIn = (float) (1.25 + (double) Main.rand.Next(20) * 0.150000005960464);
          }
        }
        if (this.type == 53)
        {
          try
          {
            int num1 = (int) ((double) this.position.X / 16.0) - 1;
            int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
            int num3 = (int) ((double) this.position.Y / 16.0) - 1;
            int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
            if (num1 < 0)
              num1 = 0;
            if (num2 > Main.maxTilesX)
              num2 = Main.maxTilesX;
            if (num3 < 0)
              num3 = 0;
            if (num4 > Main.maxTilesY)
              num4 = Main.maxTilesY;
            for (int index1 = num1; index1 < num2; ++index1)
            {
              for (int index2 = num3; index2 < num4; ++index2)
              {
                if (Main.tile[index1, index2] != null && Main.tile[index1, index2].nactive() && (Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tileSolidTop[(int) Main.tile[index1, index2].type] && (int) Main.tile[index1, index2].frameY == 0))
                {
                  Vector2 vector2;
                  vector2.X = (float) (index1 * 16);
                  vector2.Y = (float) (index2 * 16);
                  if ((double) this.position.X + (double) this.width > (double) vector2.X && (double) this.position.X < (double) vector2.X + 16.0 && ((double) this.position.Y + (double) this.height > (double) vector2.Y && (double) this.position.Y < (double) vector2.Y + 16.0))
                  {
                    this.velocity.X = 0.0f;
                    this.velocity.Y = -0.2f;
                  }
                }
              }
            }
          }
          catch
          {
          }
        }
        if (this.type == 277)
        {
          if (this.alpha > 0)
          {
            this.alpha = this.alpha - 30;
            if (this.alpha < 0)
              this.alpha = 0;
          }
          if (Main.expertMode)
          {
            float num1 = 12f;
            int closest = (int) Player.FindClosest(this.Center, 1, 1);
            Vector2 vector2_1 = Main.player[closest].Center - this.Center;
            vector2_1.Normalize();
            Vector2 vector2_2 = vector2_1 * num1;
            int num2 = 200;
            this.velocity.X = (this.velocity.X * (float) (num2 - 1) + vector2_2.X) / (float) num2;
            if ((double) this.velocity.Length() > 16.0)
            {
              this.velocity.Normalize();
              this.velocity = this.velocity * 16f;
            }
          }
        }
        if (this.type == 261 || this.type == 277)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] > 15.0)
          {
            this.ai[0] = 15f;
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.97f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
                this.Kill();
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 0.2f;
          }
          this.rotation = this.rotation + this.velocity.X * 0.05f;
        }
        else if (this.type == 378)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            Main.PlaySound(SoundID.Item17, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
          Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, true))
            {
              Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
              if (rectangle1.Intersects(rectangle2))
              {
                this.Kill();
                return;
              }
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] > 10.0)
          {
            this.ai[0] = 90f;
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.96f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
                this.Kill();
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 0.2f;
          }
          this.rotation = this.rotation + this.velocity.X * 0.1f;
        }
        else if (this.type == 483)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] > 5.0)
          {
            if (this.owner == Main.myPlayer && (double) this.ai[0] > (double) Main.rand.Next(20, 130))
              this.Kill();
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.97f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
              {
                this.velocity.X = 0.0f;
                this.netUpdate = true;
              }
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 * 0.99f;
          }
          this.rotation = this.rotation + this.velocity.X * 0.05f;
        }
        else if (this.type == 538)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] > 60.0 || (double) this.velocity.Y >= 0.0)
          {
            this.alpha = this.alpha + 6;
            this.velocity = this.velocity * 0.5f;
          }
          else if ((double) this.ai[0] > 5.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 1.025f;
            this.alpha = this.alpha - 23;
            this.scale = (float) (0.800000011920929 * ((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
            if (this.alpha < 0)
              this.alpha = 0;
          }
          if (this.alpha >= (int) byte.MaxValue && (double) this.ai[0] > 5.0)
          {
            this.Kill();
            return;
          }
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] > 5.0)
          {
            this.ai[0] = 5f;
            if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.97f;
              if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
              {
                this.velocity.X = 0.0f;
                this.netUpdate = true;
              }
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 0.2f;
          }
          this.rotation = this.rotation + this.velocity.X * 0.1f;
        }
        if (this.type == 538)
        {
          if ((double) this.localAI[1] == 0.0)
          {
            this.localAI[1] = 1f;
            Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 7, 1f, 0.0f);
          }
          if ((double) this.velocity.Y < 0.0 && (double) this.ai[0] < 60.0)
          {
            if (Main.rand.Next(4) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 180, 0.0f, 0.0f, 100, new Color(), 1f);
              Main.dust[index].position = this.Center;
              Dust dust = Main.dust[index];
              dust.scale = dust.scale + (float) Main.rand.Next(50) * 0.01f;
              Main.dust[index].noGravity = true;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 2f;
            }
            if (Main.rand.Next(6) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 176, 0.0f, 0.0f, 100, new Color(), 1f);
              Main.dust[index].position = this.Center;
              Dust dust1 = Main.dust[index];
              dust1.scale = dust1.scale + (float) (0.300000011920929 + (double) Main.rand.Next(50) * 0.00999999977648258);
              Main.dust[index].noGravity = true;
              Dust dust2 = Main.dust[index];
              dust2.velocity = dust2.velocity * 0.1f;
            }
          }
        }
        if (this.type == 450)
        {
          if ((double) this.ai[1] == 0.0)
          {
            this.ai[1] = 1f;
            Main.PlaySound(SoundID.Item13, this.position);
          }
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 228, 0.0f, 0.0f, 100, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - 2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 2f;
            Dust dust = Main.dust[index];
            dust.scale = dust.scale + (float) Main.rand.Next(50) * 0.01f;
            Main.dust[index].noGravity = true;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @Main.dust[index].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - 2f;
          }
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 228, 0.0f, 0.0f, 100, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - 2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 2f;
            Dust dust1 = Main.dust[index];
            dust1.scale = dust1.scale + (float) (0.300000011920929 + (double) Main.rand.Next(50) * 0.00999999977648258);
            Main.dust[index].noGravity = true;
            Dust dust2 = Main.dust[index];
            dust2.velocity = dust2.velocity * 0.1f;
          }
          int num1 = this.frameCounter + 1;
          this.frameCounter = num1;
          if (num1 >= 3)
          {
            this.frameCounter = 0;
            int num2 = this.frame + 1;
            this.frame = num2;
            if (num2 >= 5)
              this.frame = 0;
          }
          if ((double) this.velocity.Y < 0.25 && (double) this.velocity.Y > 0.15)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.8f;
          }
          this.rotation = (float) (-(double) this.velocity.X * 0.0500000007450581);
        }
        if (this.type == 480)
        {
          this.alpha = (int) byte.MaxValue;
          int index1 = Dust.NewDust(this.position, this.width, this.height, 75, 0.0f, 0.0f, 100, new Color(), 1f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index1].position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 - 2f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index1].position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 2f;
          Dust dust1 = Main.dust[index1];
          dust1.scale = dust1.scale + (float) Main.rand.Next(50) * 0.01f;
          Main.dust[index1].noGravity = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index1].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - 2f;
          if (Main.rand.Next(2) == 0)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 75, 0.0f, 0.0f, 100, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - 2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 + 2f;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale + (float) (0.300000011920929 + (double) Main.rand.Next(50) * 0.00999999977648258);
            Main.dust[index2].noGravity = true;
            Dust dust3 = Main.dust[index2];
            dust3.velocity = dust3.velocity * 0.1f;
          }
        }
        if (this.type >= 326 && this.type <= 328 || this.type >= 400 && this.type <= 402)
        {
          if (this.wet)
            this.Kill();
          if ((double) this.ai[1] == 0.0 && this.type >= 326 && this.type <= 328)
          {
            this.ai[1] = 1f;
            Main.PlaySound(SoundID.Item13, this.position);
          }
          int index1 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index1].position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 - 2f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index1].position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 2f;
          Dust dust1 = Main.dust[index1];
          dust1.scale = dust1.scale + (float) Main.rand.Next(50) * 0.01f;
          Main.dust[index1].noGravity = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index1].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - 2f;
          if (Main.rand.Next(2) == 0)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - 2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 + 2f;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale + (float) (0.300000011920929 + (double) Main.rand.Next(50) * 0.00999999977648258);
            Main.dust[index2].noGravity = true;
            Dust dust3 = Main.dust[index2];
            dust3.velocity = dust3.velocity * 0.1f;
          }
          if ((double) this.velocity.Y < 0.25 && (double) this.velocity.Y > 0.15)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 * 0.8f;
          }
          this.rotation = (float) (-(double) this.velocity.X * 0.0500000007450581);
        }
        if ((double) this.velocity.Y <= 16.0)
          return;
        this.velocity.Y = 16f;
      }
      else if (this.aiStyle == 15)
      {
        if (this.type == 25)
        {
          if (Main.rand.Next(15) == 0)
            Dust.NewDust(this.position, this.width, this.height, 14, 0.0f, 0.0f, 150, new Color(), 1.3f);
        }
        else if (this.type == 26)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 172, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, new Color(), 1.5f);
          Main.dust[index].noGravity = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 / 2f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 / 2f;
        }
        else if (this.type == 35)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 6, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 100, new Color(), 3f);
          Main.dust[index].noGravity = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 * 2f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * 2f;
        }
        else if (this.type == 154)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, new Color(), 1.5f);
          Main.dust[index].noGravity = true;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.25f;
        }
        if (Main.player[this.owner].dead)
        {
          this.Kill();
        }
        else
        {
          Main.player[this.owner].itemAnimation = 10;
          Main.player[this.owner].itemTime = 10;
          if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
          {
            Main.player[this.owner].ChangeDir(1);
            this.direction = 1;
          }
          else
          {
            Main.player[this.owner].ChangeDir(-1);
            this.direction = -1;
          }
          Vector2 mountedCenter = Main.player[this.owner].MountedCenter;
          Vector2 vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num1 = mountedCenter.X - vector2_1.X;
          float num2 = mountedCenter.Y - vector2_1.Y;
          float num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
          if ((double) this.ai[0] == 0.0)
          {
            float num4 = 160f;
            if (this.type == 63)
              num4 *= 1.5f;
            if (this.type == 247)
              num4 *= 1.5f;
            this.tileCollide = true;
            if ((double) num3 > (double) num4)
            {
              this.ai[0] = 1f;
              this.netUpdate = true;
            }
            else if (!Main.player[this.owner].channel)
            {
              if ((double) this.velocity.Y < 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * 0.9f;
              }
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.9f;
            }
          }
          else if ((double) this.ai[0] == 1.0)
          {
            float num4 = 14f / Main.player[this.owner].meleeSpeed;
            float num5 = 0.9f / Main.player[this.owner].meleeSpeed;
            float num6 = 300f;
            if (this.type == 63)
            {
              num6 *= 1.5f;
              num4 *= 1.5f;
              num5 *= 1.5f;
            }
            if (this.type == 247)
            {
              num6 *= 1.5f;
              num4 = 15.9f;
              num5 *= 2f;
            }
            Math.Abs(num1);
            Math.Abs(num2);
            if ((double) this.ai[1] == 1.0)
              this.tileCollide = false;
            if (!Main.player[this.owner].channel || (double) num3 > (double) num6 || !this.tileCollide)
            {
              this.ai[1] = 1f;
              if (this.tileCollide)
                this.netUpdate = true;
              this.tileCollide = false;
              if ((double) num3 < 20.0)
                this.Kill();
            }
            if (!this.tileCollide)
              num5 *= 2f;
            int num7 = 60;
            if (this.type == 247)
              num7 = 100;
            if ((double) num3 > (double) num7 || !this.tileCollide)
            {
              float num8 = num4 / num3;
              num1 *= num8;
              num2 *= num8;
              Vector2 vector2_2 = new Vector2(this.velocity.X, this.velocity.Y);
              float num9 = num1 - this.velocity.X;
              float num10 = num2 - this.velocity.Y;
              float num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
              float num12 = num5 / num11;
              float num13 = num9 * num12;
              float num14 = num10 * num12;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 * 0.98f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.98f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 + num13;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 + num14;
            }
            else
            {
              if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 6.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 * 0.96f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + 0.2f;
              }
              if ((double) Main.player[this.owner].velocity.X == 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * 0.96f;
              }
            }
          }
          if (this.type == 247)
          {
            this.rotation = (double) this.velocity.X >= 0.0 ? this.rotation + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.00999999977648258) : this.rotation - (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.00999999977648258);
            float num4 = this.position.X;
            float num5 = this.position.Y;
            float num6 = 600f;
            bool flag = false;
            if (this.owner == Main.myPlayer)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.localAI[1];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1f;
              if ((double) this.localAI[1] > 20.0)
              {
                this.localAI[1] = 20f;
                for (int index = 0; index < 200; ++index)
                {
                  if (Main.npc[index].CanBeChasedBy((object) this, false))
                  {
                    float num7 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                    float num8 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                    float num9 = Math.Abs(this.position.X + (float) (this.width / 2) - num7) + Math.Abs(this.position.Y + (float) (this.height / 2) - num8);
                    if ((double) num9 < (double) num6 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                    {
                      num6 = num9;
                      num4 = num7;
                      num5 = num8;
                      flag = true;
                    }
                  }
                }
              }
            }
            if (!flag)
              return;
            this.localAI[1] = 0.0f;
            float num10 = 14f;
            vector2_1 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num11 = num4 - vector2_1.X;
            float num12 = num5 - vector2_1.Y;
            float num13 = (float) Math.Sqrt((double) num11 * (double) num11 + (double) num12 * (double) num12);
            float num14 = num10 / num13;
            float SpeedX = num11 * num14;
            float SpeedY = num12 * num14;
            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, SpeedX, SpeedY, 248, (int) ((double) this.damage / 1.5), this.knockBack / 2f, Main.myPlayer, 0.0f, 0.0f);
          }
          else
            this.rotation = (float) Math.Atan2((double) num2, (double) num1) - this.velocity.X * 0.1f;
        }
      }
      else if (this.aiStyle == 16)
      {
        if (this.type == 108 || this.type == 164)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] > 3.0)
            this.Kill();
        }
        if (this.type == 37 || this.type == 397 || (this.type == 470 || this.type == 519))
        {
          try
          {
            int num1 = (int) ((double) this.position.X / 16.0) - 1;
            int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
            int num3 = (int) ((double) this.position.Y / 16.0) - 1;
            int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
            if (num1 < 0)
              num1 = 0;
            if (num2 > Main.maxTilesX)
              num2 = Main.maxTilesX;
            if (num3 < 0)
              num3 = 0;
            if (num4 > Main.maxTilesY)
              num4 = Main.maxTilesY;
            for (int index1 = num1; index1 < num2; ++index1)
            {
              for (int index2 = num3; index2 < num4; ++index2)
              {
                if (Main.tile[index1, index2] != null && Main.tile[index1, index2].nactive() && (Main.tileSolid[(int) Main.tile[index1, index2].type] || Main.tileSolidTop[(int) Main.tile[index1, index2].type] && (int) Main.tile[index1, index2].frameY == 0))
                {
                  Vector2 vector2;
                  vector2.X = (float) (index1 * 16);
                  vector2.Y = (float) (index2 * 16);
                  if ((double) this.position.X + (double) this.width - 4.0 > (double) vector2.X && (double) this.position.X + 4.0 < (double) vector2.X + 16.0 && ((double) this.position.Y + (double) this.height - 4.0 > (double) vector2.Y && (double) this.position.Y + 4.0 < (double) vector2.Y + 16.0))
                  {
                    this.velocity.X = 0.0f;
                    this.velocity.Y = -0.2f;
                  }
                }
              }
            }
          }
          catch
          {
          }
        }
        if (this.type == 519)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          float num = 180f - this.localAI[1];
          if ((double) num < 0.0)
            num = 0.0f;
          this.frameCounter = this.frameCounter + 1;
          if ((double) num < 15.0)
            this.frameCounter = this.frameCounter + 1;
          if ((double) this.frameCounter >= ((double) num / 10.0 + 6.0) / 2.0)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
            if (this.frame >= Main.projFrames[this.type])
              this.frame = 0;
          }
        }
        if (this.type == 681 && (double) this.localAI[1] == 0.0)
          this.localAI[1] = 1f;
        if (this.type == 102)
        {
          if ((double) this.velocity.Y > 10.0)
            this.velocity.Y = 10f;
          if ((double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            Main.PlaySound(SoundID.Item10, this.position);
          }
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter > 3)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame > 1)
            this.frame = 0;
          if ((double) this.velocity.Y == 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 128;
            this.height = 128;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            this.damage = 40;
            this.knockBack = 8f;
            this.timeLeft = 3;
            this.netUpdate = true;
          }
        }
        if (this.type == 303 && this.timeLeft <= 3 && this.hostile)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) (this.height / 2);
          this.width = 128;
          this.height = 128;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 - (float) (this.height / 2);
        }
        if (this.owner == Main.myPlayer && this.timeLeft <= 3)
        {
          this.tileCollide = false;
          this.ai[1] = 0.0f;
          this.alpha = (int) byte.MaxValue;
          if (this.type == 28 || this.type == 37 || (this.type == 75 || this.type == 516) || this.type == 519)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 128;
            this.height = 128;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            this.damage = 100;
            this.knockBack = 8f;
          }
          else if (this.type == 29 || this.type == 470 || this.type == 637)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 250;
            this.height = 250;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            this.damage = 250;
            this.knockBack = 10f;
          }
          else if (this.type == 30 || this.type == 397 || (this.type == 517 || this.type == 588))
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 128;
            this.height = 128;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            this.knockBack = 8f;
          }
          else if (this.type == 681)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 80;
            this.height = 80;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            this.knockBack = 8f;
          }
          else if (this.type == 133 || this.type == 134 || (this.type == 135 || this.type == 136) || (this.type == 137 || this.type == 138 || (this.type == 338 || this.type == 339)))
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 128;
            this.height = 128;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            this.knockBack = 8f;
          }
          else if (this.type == 139 || this.type == 140 || (this.type == 141 || this.type == 142) || (this.type == 143 || this.type == 144 || (this.type == 340 || this.type == 341)))
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 200;
            this.height = 200;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            this.knockBack = 10f;
          }
        }
        else
        {
          if (this.type != 30 && this.type != 517 && (this.type != 681 && this.type != 588) && (this.type != 397 && this.type != 108 && (this.type != 133 && this.type != 134)) && (this.type != 135 && this.type != 136 && (this.type != 137 && this.type != 138) && (this.type != 139 && this.type != 140 && (this.type != 141 && this.type != 142))) && (this.type != 143 && this.type != 144 && (this.type != 164 && this.type != 303) && (this.type < 338 && this.type < 341)))
            this.damage = 0;
          if (this.type == 338 || this.type == 339 || (this.type == 340 || this.type == 341))
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.localAI[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 1f;
            if ((double) this.localAI[1] > 6.0)
            {
              this.alpha = 0;
            }
            else
            {
              this.alpha = (int) ((double) byte.MaxValue - 42.0 * (double) this.localAI[1]) + 100;
              if (this.alpha > (int) byte.MaxValue)
                this.alpha = (int) byte.MaxValue;
            }
            for (int index1 = 0; index1 < 2; ++index1)
            {
              float num1 = 0.0f;
              float num2 = 0.0f;
              if (index1 == 1)
              {
                num1 = this.velocity.X * 0.5f;
                num2 = this.velocity.Y * 0.5f;
              }
              if ((double) this.localAI[1] > 9.0)
              {
                if (Main.rand.Next(2) == 0)
                {
                  int index2 = Dust.NewDust(new Vector2(this.position.X + 3f + num1, this.position.Y + 3f + num2) - this.velocity * 0.5f, this.width - 8, this.height - 8, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                  Dust dust1 = Main.dust[index2];
                  dust1.scale = dust1.scale * (float) (1.39999997615814 + (double) Main.rand.Next(10) * 0.100000001490116);
                  Dust dust2 = Main.dust[index2];
                  dust2.velocity = dust2.velocity * 0.2f;
                  Main.dust[index2].noGravity = true;
                }
                if (Main.rand.Next(2) == 0)
                {
                  int index2 = Dust.NewDust(new Vector2(this.position.X + 3f + num1, this.position.Y + 3f + num2) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0.0f, 0.0f, 100, new Color(), 0.5f);
                  Main.dust[index2].fadeIn = (float) (0.5 + (double) Main.rand.Next(5) * 0.100000001490116);
                  Dust dust = Main.dust[index2];
                  dust.velocity = dust.velocity * 0.05f;
                }
              }
            }
            float num3 = this.position.X;
            float num4 = this.position.Y;
            float num5 = 600f;
            bool flag = false;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 1f;
            if ((double) this.ai[0] > 30.0)
            {
              this.ai[0] = 30f;
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this, false))
                {
                  float num1 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  float num2 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                  float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - num1) + Math.Abs(this.position.Y + (float) (this.height / 2) - num2);
                  if ((double) num6 < (double) num5 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                  {
                    num5 = num6;
                    num3 = num1;
                    num4 = num2;
                    flag = true;
                  }
                }
              }
            }
            if (!flag)
            {
              num3 = (float) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X * 100.0);
              num4 = (float) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y * 100.0);
            }
            float num7 = 16f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num8 = num3 - vector2.X;
            float num9 = num4 - vector2.Y;
            float num10 = (float) Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9);
            float num11 = num7 / num10;
            float num12 = num8 * num11;
            float num13 = num9 * num11;
            this.velocity.X = (float) (((double) this.velocity.X * 11.0 + (double) num12) / 12.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 11.0 + (double) num13) / 12.0);
          }
          else if (this.type == 134 || this.type == 137 || (this.type == 140 || this.type == 143) || this.type == 303)
          {
            if ((double) Math.Abs(this.velocity.X) >= 8.0 || (double) Math.Abs(this.velocity.Y) >= 8.0)
            {
              for (int index1 = 0; index1 < 2; ++index1)
              {
                float num1 = 0.0f;
                float num2 = 0.0f;
                if (index1 == 1)
                {
                  num1 = this.velocity.X * 0.5f;
                  num2 = this.velocity.Y * 0.5f;
                }
                int index2 = Dust.NewDust(new Vector2(this.position.X + 3f + num1, this.position.Y + 3f + num2) - this.velocity * 0.5f, this.width - 8, this.height - 8, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                Dust dust1 = Main.dust[index2];
                dust1.scale = dust1.scale * (float) (2.0 + (double) Main.rand.Next(10) * 0.100000001490116);
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity * 0.2f;
                Main.dust[index2].noGravity = true;
                int index3 = Dust.NewDust(new Vector2(this.position.X + 3f + num1, this.position.Y + 3f + num2) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0.0f, 0.0f, 100, new Color(), 0.5f);
                Main.dust[index3].fadeIn = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
                Dust dust3 = Main.dust[index3];
                dust3.velocity = dust3.velocity * 0.05f;
              }
            }
            if ((double) Math.Abs(this.velocity.X) < 15.0 && (double) Math.Abs(this.velocity.Y) < 15.0)
              this.velocity = this.velocity * 1.1f;
          }
          else if (this.type == 133 || this.type == 136 || (this.type == 139 || this.type == 142))
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1f);
            Dust dust1 = Main.dust[index];
            dust1.scale = dust1.scale * (float) (1.0 + (double) Main.rand.Next(10) * 0.100000001490116);
            Dust dust2 = Main.dust[index];
            dust2.velocity = dust2.velocity * 0.2f;
            Main.dust[index].noGravity = true;
          }
          else if (this.type == 135 || this.type == 138 || (this.type == 141 || this.type == 144))
          {
            if ((double) this.velocity.X > -0.2 && (double) this.velocity.X < 0.2 && ((double) this.velocity.Y > -0.2 && (double) this.velocity.Y < 0.2))
            {
              this.alpha = this.alpha + 2;
              if (this.alpha > 200)
                this.alpha = 200;
            }
            else
            {
              this.alpha = 0;
              int index = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 3f) - this.velocity * 0.5f, this.width - 8, this.height - 8, 31, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust1 = Main.dust[index];
              dust1.scale = dust1.scale * (float) (1.60000002384186 + (double) Main.rand.Next(5) * 0.100000001490116);
              Dust dust2 = Main.dust[index];
              dust2.velocity = dust2.velocity * 0.05f;
              Main.dust[index].noGravity = true;
            }
          }
          else if (this.type != 30 && this.type != 517 && (this.type != 681 && this.type != 397) && (this.type != 519 && this.type != 588 && Main.rand.Next(2) == 0))
          {
            int index1 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index1].scale = (float) (0.100000001490116 + (double) Main.rand.Next(5) * 0.100000001490116);
            Main.dust[index1].fadeIn = (float) (1.5 + (double) Main.rand.Next(5) * 0.100000001490116);
            Main.dust[index1].noGravity = true;
            Main.dust[index1].position = this.Center + new Vector2(0.0f, (float) (-this.height / 2)).RotatedBy((double) this.rotation, new Vector2()) * 1.1f;
            Main.rand.Next(2);
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].scale = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + new Vector2(0.0f, (float) (-this.height / 2 - 6)).RotatedBy((double) this.rotation, new Vector2()) * 1.1f;
          }
          else if (this.type == 681)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
            dust.scale = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
            dust.noGravity = true;
            dust.position = this.Center + new Vector2((float) (6 * Math.Sign(this.velocity.X)), (float) (-this.height / 2 - 6)).RotatedBy((double) this.rotation, new Vector2()) * 1.1f;
          }
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local5 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local5 = ^local5 + 1f;
        if (this.type == 338 || this.type == 339 || (this.type == 340 || this.type == 341))
        {
          if ((double) this.velocity.X < 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X) - 1.57f;
          }
          else
          {
            this.spriteDirection = 1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          }
        }
        else if (this.type == 134 || this.type == 137 || (this.type == 140 || this.type == 143) || this.type == 303)
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        else if (this.type == 135 || this.type == 138 || (this.type == 141 || this.type == 144))
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 0.2f;
          this.velocity = this.velocity * 0.97f;
          if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
            this.velocity.X = 0.0f;
          if ((double) this.velocity.Y > -0.1 && (double) this.velocity.Y < 0.1)
            this.velocity.Y = 0.0f;
        }
        else if (this.type == 133 || this.type == 136 || (this.type == 139 || this.type == 142))
        {
          if ((double) this.ai[0] > 15.0)
          {
            if ((double) this.velocity.Y == 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 * 0.95f;
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.2f;
          }
        }
        else if ((this.type == 30 || this.type == 397 || (this.type == 517 || this.type == 681) || this.type == 588) && (double) this.ai[0] > 10.0 || this.type != 30 && this.type != 397 && (this.type != 517 && this.type != 588) && (double) this.ai[0] > 5.0)
        {
          this.ai[0] = 10f;
          if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X != 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * 0.97f;
            if (this.type == 29 || this.type == 470 || this.type == 637)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.99f;
            }
            if ((double) this.velocity.X > -0.01 && (double) this.velocity.X < 0.01)
            {
              this.velocity.X = 0.0f;
              this.netUpdate = true;
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + 0.2f;
        }
        if (this.type == 519)
        {
          this.rotation = this.rotation + this.velocity.X * 0.06f;
        }
        else
        {
          if (this.type == 134 || this.type == 137 || (this.type == 140 || this.type == 143) || (this.type == 303 || this.type >= 338 && this.type <= 341))
            return;
          this.rotation = this.rotation + this.velocity.X * 0.1f;
        }
      }
      else if (this.aiStyle == 17)
      {
        if ((double) this.velocity.Y == 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local * 0.98f;
        }
        this.rotation = this.rotation + this.velocity.X * 0.1f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.velocity.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 0.2f;
        if (this.owner != Main.myPlayer)
          return;
        int i1 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
        int j = (int) (((double) this.position.Y + (double) this.height - 4.0) / 16.0);
        if (Main.tile[i1, j] == null || Main.tile[i1, j].active())
          return;
        int num = 0;
        if (this.type >= 201 && this.type <= 205)
          num = this.type - 200;
        if (this.type >= 527 && this.type <= 531)
          num = this.type - 527 + 6;
        WorldGen.PlaceTile(i1, j, 85, false, false, this.owner, num);
        if (!Main.tile[i1, j].active())
          return;
        if (Main.netMode != 0)
          NetMessage.SendData(17, -1, -1, (NetworkText) null, 1, (float) i1, (float) j, 85f, num, 0, 0);
        int i2 = Sign.ReadSign(i1, j, true);
        if (i2 >= 0)
          Sign.TextSign(i2, this.miscText);
        this.Kill();
      }
      else if (this.aiStyle == 18)
      {
        if ((double) this.ai[1] == 0.0 && this.type == 44)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item8, this.position);
        }
        if (this.type == 263 || this.type == 274)
        {
          if (this.type == 274 && (double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          this.rotation = this.rotation + (float) this.direction * 0.05f;
          this.rotation = this.rotation + (float) ((double) this.direction * 0.5 * ((double) this.timeLeft / 180.0));
          if (this.type == 274)
            this.velocity = this.velocity * 0.96f;
          else
            this.velocity = this.velocity * 0.95f;
        }
        else
        {
          this.rotation = this.rotation + (float) this.direction * 0.8f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] >= 30.0)
          {
            if ((double) this.ai[0] < 100.0)
              this.velocity = this.velocity * 1.06f;
            else
              this.ai[0] = 200f;
          }
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].noGravity = true;
          }
        }
      }
      else if (this.aiStyle == 19)
      {
        Vector2 vector2 = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter, true);
        this.direction = Main.player[this.owner].direction;
        Main.player[this.owner].heldProj = this.whoAmI;
        Main.player[this.owner].itemTime = Main.player[this.owner].itemAnimation;
        this.position.X = vector2.X - (float) (this.width / 2);
        this.position.Y = vector2.Y - (float) (this.height / 2);
        if (!Main.player[this.owner].frozen)
        {
          if (this.type == 46)
          {
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.6f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1.4f;
            }
          }
          else if (this.type == 105)
          {
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 2.4f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 2.1f;
            }
          }
          else if (this.type == 367)
          {
            this.spriteDirection = -this.direction;
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.6f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1.5f;
            }
          }
          else if (this.type == 368)
          {
            this.spriteDirection = -this.direction;
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.5f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1.4f;
            }
          }
          else if (this.type == 222)
          {
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 2.4f;
              if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
              {
                this.localAI[0] = 1f;
                Projectile.NewProjectile(this.Center.X + this.velocity.X * this.ai[0], this.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X, this.velocity.Y, 228, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
              }
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 2.1f;
            }
          }
          else if (this.type == 342)
          {
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 2.4f;
              if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
              {
                this.localAI[0] = 1f;
                if (Collision.CanHit(Main.player[this.owner].position, Main.player[this.owner].width, Main.player[this.owner].height, new Vector2(this.Center.X + this.velocity.X * this.ai[0], this.Center.Y + this.velocity.Y * this.ai[0]), this.width, this.height))
                  Projectile.NewProjectile(this.Center.X + this.velocity.X * this.ai[0], this.Center.Y + this.velocity.Y * this.ai[0], this.velocity.X * 2.4f, this.velocity.Y * 2.4f, 343, (int) ((double) this.damage * 0.8), this.knockBack * 0.85f, this.owner, 0.0f, 0.0f);
              }
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 2.1f;
            }
          }
          else if (this.type == 47)
          {
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 4f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.2f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 0.9f;
            }
          }
          else if (this.type == 153)
          {
            this.spriteDirection = -this.direction;
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 4f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.5f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1.3f;
            }
          }
          else if (this.type == 49)
          {
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 4f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.1f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 0.85f;
            }
          }
          else if (this.type == 64 || this.type == 215)
          {
            this.spriteDirection = -this.direction;
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.9f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1.7f;
            }
          }
          else if (this.type == 66 || this.type == 97 || (this.type == 212 || this.type == 218))
          {
            this.spriteDirection = -this.direction;
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 2.1f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1.9f;
            }
          }
          else if (this.type == 130)
          {
            this.spriteDirection = -this.direction;
            if ((double) this.ai[0] == 0.0)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            if (Main.player[this.owner].itemAnimation < Main.player[this.owner].itemAnimationMax / 3)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1.3f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1f;
            }
          }
        }
        this.position = this.position + this.velocity * this.ai[0];
        if (this.type == 130)
        {
          if ((double) this.ai[1] == 0.0 || (double) this.ai[1] == 4.0 || ((double) this.ai[1] == 8.0 || (double) this.ai[1] == 12.0) || ((double) this.ai[1] == 16.0 || (double) this.ai[1] == 20.0 || (double) this.ai[1] == 24.0))
            Projectile.NewProjectile(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2), this.velocity.X, this.velocity.Y, 131, this.damage / 3, 0.0f, this.owner, 0.0f, 0.0f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        if (Main.player[this.owner].itemAnimation == 0)
          this.Kill();
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 2.355f;
        if (this.spriteDirection == -1)
          this.rotation = this.rotation - 1.57f;
        if (this.type == 46)
        {
          if (Main.rand.Next(5) == 0)
            Dust.NewDust(this.position, this.width, this.height, 14, 0.0f, 0.0f, 150, new Color(), 1.4f);
          int index1 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X * 0.2f + (float) (this.direction * 3), this.velocity.Y * 0.2f, 100, new Color(), 1.2f);
          Main.dust[index1].noGravity = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index1].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 / 2f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index1].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 / 2f;
          int index2 = Dust.NewDust(this.position - this.velocity * 2f, this.width, this.height, 27, 0.0f, 0.0f, 150, new Color(), 1.4f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 / 5f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 / 5f;
        }
        else if (this.type == 105)
        {
          if (Main.rand.Next(3) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 57, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 200, new Color(), 1.2f);
            Dust dust1 = Main.dust[index];
            dust1.velocity = dust1.velocity + this.velocity * 0.3f;
            Dust dust2 = Main.dust[index];
            dust2.velocity = dust2.velocity * 0.2f;
          }
          if (Main.rand.Next(4) != 0)
            return;
          int index1 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 43, 0.0f, 0.0f, 254, new Color(), 0.3f);
          Dust dust3 = Main.dust[index1];
          dust3.velocity = dust3.velocity + this.velocity * 0.5f;
          Dust dust4 = Main.dust[index1];
          dust4.velocity = dust4.velocity * 0.5f;
        }
        else
        {
          if (this.type != 153)
            return;
          int index = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 115, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 140, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Main.dust[index].fadeIn = 1.25f;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.25f;
        }
      }
      else if (this.aiStyle == 20)
      {
        if (this.type == 252)
        {
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
          }
          if (this.frame > 3)
            this.frame = 0;
        }
        if (this.type == 509)
        {
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 2)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
          }
          if (this.frame > 1)
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          Main.PlaySound(SoundID.Item22, this.position);
          this.soundDelay = 30;
        }
        Vector2 vector2_1 = Main.player[this.owner].RotatedRelativePoint(Main.player[this.owner].MountedCenter, true);
        if (Main.myPlayer == this.owner)
        {
          if (Main.player[this.owner].channel)
          {
            float num1 = Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].shootSpeed * this.scale;
            Vector2 vector2_2 = vector2_1;
            float num2 = (float) Main.mouseX + Main.screenPosition.X - vector2_2.X;
            float num3 = (float) Main.mouseY + Main.screenPosition.Y - vector2_2.Y;
            if ((double) Main.player[this.owner].gravDir == -1.0)
              num3 = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            float num5 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            float num6 = num1 / num5;
            float num7 = num2 * num6;
            float num8 = num3 * num6;
            if ((double) num7 != (double) this.velocity.X || (double) num8 != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity.X = num7;
            this.velocity.Y = num8;
          }
          else
            this.Kill();
        }
        if ((double) this.velocity.X > 0.0)
          Main.player[this.owner].ChangeDir(1);
        else if ((double) this.velocity.X < 0.0)
          Main.player[this.owner].ChangeDir(-1);
        this.spriteDirection = this.direction;
        Main.player[this.owner].ChangeDir(this.direction);
        Main.player[this.owner].heldProj = this.whoAmI;
        Main.player[this.owner].itemTime = 2;
        Main.player[this.owner].itemAnimation = 2;
        this.position.X = vector2_1.X - (float) (this.width / 2);
        this.position.Y = vector2_1.Y - (float) (this.height / 2);
        this.rotation = (float) (Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57000005245209);
        Main.player[this.owner].itemRotation = Main.player[this.owner].direction != 1 ? (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction) : (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.velocity.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 * (float) (1.0 + (double) Main.rand.Next(-3, 4) * 0.00999999977648258);
        if (Main.rand.Next(6) != 0)
          return;
        int index = Dust.NewDust(this.position + this.velocity * (float) Main.rand.Next(6, 10) * 0.1f, this.width, this.height, 31, 0.0f, 0.0f, 80, new Color(), 1.4f);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @Main.dust[index].position.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 - 4f;
        Main.dust[index].noGravity = true;
        Dust dust = Main.dust[index];
        dust.velocity = dust.velocity * 0.2f;
        Main.dust[index].velocity.Y = (float) -Main.rand.Next(7, 13) * 0.15f;
      }
      else if (this.aiStyle == 21)
      {
        this.rotation = this.velocity.X * 0.1f;
        this.spriteDirection = -this.direction;
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 27, 0.0f, 0.0f, 80, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.2f;
        }
        if ((double) this.ai[1] != 1.0)
          return;
        this.ai[1] = 0.0f;
        Main.harpNote = this.ai[0];
        Main.PlaySound(SoundID.Item26, this.position);
      }
      else if (this.aiStyle == 22)
      {
        if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          this.alpha = (int) byte.MaxValue;
        if ((double) this.ai[1] < 0.0)
        {
          this.rotation = (double) this.velocity.X <= 0.0 ? this.rotation - 0.3f : this.rotation + 0.3f;
          int num1 = (int) ((double) this.position.X / 16.0) - 1;
          int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
          int num3 = (int) ((double) this.position.Y / 16.0) - 1;
          int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
          if (num1 < 0)
            num1 = 0;
          if (num2 > Main.maxTilesX)
            num2 = Main.maxTilesX;
          if (num3 < 0)
            num3 = 0;
          if (num4 > Main.maxTilesY)
            num4 = Main.maxTilesY;
          int num5 = (int) this.position.X + 4;
          int num6 = (int) this.position.Y + 4;
          for (int index1 = num1; index1 < num2; ++index1)
          {
            for (int index2 = num3; index2 < num4; ++index2)
            {
              if (Main.tile[index1, index2] != null && Main.tile[index1, index2].active() && ((int) Main.tile[index1, index2].type != (int) sbyte.MaxValue && Main.tileSolid[(int) Main.tile[index1, index2].type]) && !Main.tileSolidTop[(int) Main.tile[index1, index2].type])
              {
                Vector2 vector2;
                vector2.X = (float) (index1 * 16);
                vector2.Y = (float) (index2 * 16);
                if ((double) (num5 + 8) > (double) vector2.X && (double) num5 < (double) vector2.X + 16.0 && ((double) (num6 + 8) > (double) vector2.Y && (double) num6 < (double) vector2.Y + 16.0))
                  this.Kill();
              }
            }
          }
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.3f;
        }
        else if ((double) this.ai[0] < 0.0)
        {
          if ((double) this.ai[0] == -1.0)
          {
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0.0f, 0.0f, 0, new Color(), 1.1f);
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.3f;
            }
          }
          else if (Main.rand.Next(30) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0.0f, 0.0f, 100, new Color(), 1f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.2f;
          }
          int i = (int) this.position.X / 16;
          int j = (int) this.position.Y / 16;
          if (Main.tile[i, j] == null || !Main.tile[i, j].active())
            this.Kill();
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local - 1f;
          if ((double) this.ai[0] > -900.0 || Main.myPlayer != this.owner && Main.netMode != 2 || (!Main.tile[i, j].active() || (int) Main.tile[i, j].type != (int) sbyte.MaxValue))
            return;
          WorldGen.KillTile(i, j, false, false, false);
          if (Main.netMode == 1)
            NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) i, (float) j, 0.0f, 0, 0, 0);
          this.Kill();
        }
        else
        {
          int num1 = (int) ((double) this.position.X / 16.0) - 1;
          int num2 = (int) (((double) this.position.X + (double) this.width) / 16.0) + 2;
          int num3 = (int) ((double) this.position.Y / 16.0) - 1;
          int num4 = (int) (((double) this.position.Y + (double) this.height) / 16.0) + 2;
          if (num1 < 0)
            num1 = 0;
          if (num2 > Main.maxTilesX)
            num2 = Main.maxTilesX;
          if (num3 < 0)
            num3 = 0;
          if (num4 > Main.maxTilesY)
            num4 = Main.maxTilesY;
          int num5 = (int) this.position.X + 4;
          int num6 = (int) this.position.Y + 4;
          for (int index1 = num1; index1 < num2; ++index1)
          {
            for (int index2 = num3; index2 < num4; ++index2)
            {
              if (Main.tile[index1, index2] != null && Main.tile[index1, index2].nactive() && ((int) Main.tile[index1, index2].type != (int) sbyte.MaxValue && Main.tileSolid[(int) Main.tile[index1, index2].type]) && !Main.tileSolidTop[(int) Main.tile[index1, index2].type])
              {
                Vector2 vector2;
                vector2.X = (float) (index1 * 16);
                vector2.Y = (float) (index2 * 16);
                if ((double) (num5 + 8) > (double) vector2.X && (double) num5 < (double) vector2.X + 16.0 && ((double) (num6 + 8) > (double) vector2.Y && (double) num6 < (double) vector2.Y + 16.0))
                  this.Kill();
              }
            }
          }
          if (this.lavaWet)
            this.Kill();
          if (!this.active)
            return;
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.3f;
          int i = (int) this.ai[0];
          int j = (int) this.ai[1];
          if (WorldGen.SolidTile(i, j))
          {
            if ((double) Math.Abs(this.velocity.X) > (double) Math.Abs(this.velocity.Y))
            {
              if ((double) this.Center.Y < (double) (j * 16 + 8) && !WorldGen.SolidTile(i, j - 1))
                --j;
              else if (!WorldGen.SolidTile(i, j + 1))
                ++j;
              else if (!WorldGen.SolidTile(i, j - 1))
                --j;
              else if ((double) this.Center.X < (double) (i * 16 + 8) && !WorldGen.SolidTile(i - 1, j))
                --i;
              else if (!WorldGen.SolidTile(i + 1, j))
                ++i;
              else if (!WorldGen.SolidTile(i - 1, j))
                --i;
            }
            else if ((double) this.Center.X < (double) (i * 16 + 8) && !WorldGen.SolidTile(i - 1, j))
              --i;
            else if (!WorldGen.SolidTile(i + 1, j))
              ++i;
            else if (!WorldGen.SolidTile(i - 1, j))
              --i;
            else if ((double) this.Center.Y < (double) (j * 16 + 8) && !WorldGen.SolidTile(i, j - 1))
              --j;
            else if (!WorldGen.SolidTile(i, j + 1))
              ++j;
            else if (!WorldGen.SolidTile(i, j - 1))
              --j;
          }
          this.rotation = (double) this.velocity.X <= 0.0 ? this.rotation - 0.3f : this.rotation + 0.3f;
          if (Main.myPlayer != this.owner)
            return;
          int num7 = (int) (((double) this.position.X + (double) (this.width / 2)) / 16.0);
          int num8 = (int) (((double) this.position.Y + (double) (this.height / 2)) / 16.0);
          bool flag = false;
          if (num7 == i && num8 == j)
            flag = true;
          if (((double) this.velocity.X <= 0.0 && num7 <= i || (double) this.velocity.X >= 0.0 && num7 >= i) && ((double) this.velocity.Y <= 0.0 && num8 <= j || (double) this.velocity.Y >= 0.0 && num8 >= j))
            flag = true;
          if (!flag)
            return;
          if (WorldGen.PlaceTile(i, j, (int) sbyte.MaxValue, false, false, this.owner, 0))
          {
            if (Main.netMode == 1)
              NetMessage.SendData(17, -1, -1, (NetworkText) null, 1, (float) (int) this.ai[0], (float) (int) this.ai[1], (float) sbyte.MaxValue, 0, 0, 0);
            this.damage = 0;
            this.ai[0] = -1f;
            this.velocity = this.velocity * 0.0f;
            this.alpha = (int) byte.MaxValue;
            this.position.X = (float) (i * 16);
            this.position.Y = (float) (j * 16);
            this.netUpdate = true;
          }
          else
            this.ai[1] = -1f;
        }
      }
      else if (this.aiStyle == 23)
      {
        if (this.type == 188 && (double) this.ai[0] < 8.0)
          this.ai[0] = 8f;
        if (this.timeLeft > 60)
          this.timeLeft = 60;
        if ((double) this.ai[0] > 7.0)
        {
          float num = 1f;
          if ((double) this.ai[0] == 8.0)
            num = 0.25f;
          else if ((double) this.ai[0] == 9.0)
            num = 0.5f;
          else if ((double) this.ai[0] == 10.0)
            num = 0.75f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          int Type = 6;
          if (this.type == 101)
            Type = 75;
          if (Type == 6 || Main.rand.Next(2) == 0)
          {
            for (int index1 = 0; index1 < 1; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 1f);
              if (Main.rand.Next(3) != 0 || Type == 75 && Main.rand.Next(3) == 0)
              {
                Main.dust[index2].noGravity = true;
                Dust dust = Main.dust[index2];
                dust.scale = dust.scale * 3f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index2].velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 * 2f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @Main.dust[index2].velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 * 2f;
              }
              if (this.type == 188)
              {
                Dust dust = Main.dust[index2];
                dust.scale = dust.scale * 1.25f;
              }
              else
              {
                Dust dust = Main.dust[index2];
                dust.scale = dust.scale * 1.5f;
              }
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @Main.dust[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 * 1.2f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 * 1.2f;
              Dust dust1 = Main.dust[index2];
              dust1.scale = dust1.scale * num;
              if (Type == 75)
              {
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity;
                if (!Main.dust[index2].noGravity)
                {
                  Dust dust3 = Main.dust[index2];
                  dust3.velocity = dust3.velocity * 0.5f;
                }
              }
            }
          }
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        this.rotation = this.rotation + 0.3f * (float) this.direction;
      }
      else if (this.aiStyle == 24)
      {
        this.light = this.scale * 0.5f;
        this.rotation = this.rotation + this.velocity.X * 0.2f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if (this.type == 94)
        {
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 70, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index].noGravity = true;
            Dust dust1 = Main.dust[index];
            dust1.velocity = dust1.velocity * 0.5f;
            Dust dust2 = Main.dust[index];
            dust2.scale = dust2.scale * 0.9f;
          }
          this.velocity = this.velocity * 0.985f;
          if ((double) this.ai[1] <= 130.0)
            return;
          this.scale = this.scale - 0.05f;
          if ((double) this.scale > 0.2)
            return;
          this.scale = 0.2f;
          this.Kill();
        }
        else
        {
          this.velocity = this.velocity * 0.96f;
          if ((double) this.ai[1] <= 15.0)
            return;
          this.scale = this.scale - 0.05f;
          if ((double) this.scale > 0.2)
            return;
          this.scale = 0.2f;
          this.Kill();
        }
      }
      else if (this.aiStyle == 25)
      {
        if ((double) this.ai[0] != 0.0 && (double) this.velocity.Y <= 0.0 && (double) this.velocity.X == 0.0)
        {
          float num = 0.5f;
          int i1 = (int) (((double) this.position.X - 8.0) / 16.0);
          int j1 = (int) ((double) this.position.Y / 16.0);
          bool flag1 = false;
          bool flag2 = false;
          if (WorldGen.SolidTile(i1, j1) || WorldGen.SolidTile(i1, j1 + 1))
            flag1 = true;
          int i2 = (int) (((double) this.position.X + (double) this.width + 8.0) / 16.0);
          if (WorldGen.SolidTile(i2, j1) || WorldGen.SolidTile(i2, j1 + 1))
            flag2 = true;
          if (flag1)
            this.velocity.X = num;
          else if (flag2)
          {
            this.velocity.X = -num;
          }
          else
          {
            int i3 = (int) (((double) this.position.X - 8.0 - 16.0) / 16.0);
            int j2 = (int) ((double) this.position.Y / 16.0);
            bool flag3 = false;
            bool flag4 = false;
            if (WorldGen.SolidTile(i3, j2) || WorldGen.SolidTile(i3, j2 + 1))
              flag3 = true;
            int i4 = (int) (((double) this.position.X + (double) this.width + 8.0 + 16.0) / 16.0);
            if (WorldGen.SolidTile(i4, j2) || WorldGen.SolidTile(i4, j2 + 1))
              flag4 = true;
            if (flag3)
              this.velocity.X = num;
            else if (flag4)
            {
              this.velocity.X = -num;
            }
            else
            {
              int i5 = (int) (((double) this.position.X + 4.0) / 16.0);
              int j3 = (int) (((double) this.position.Y + (double) this.height + 8.0) / 16.0);
              if (WorldGen.SolidTile(i5, j3) || WorldGen.SolidTile(i5, j3 + 1))
                flag3 = true;
              if (!flag3)
                this.velocity.X = num;
              else
                this.velocity.X = -num;
            }
          }
        }
        this.rotation = this.rotation + this.velocity.X * 0.06f;
        this.ai[0] = 1f;
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        if ((double) this.velocity.Y <= 6.0)
        {
          if ((double) this.velocity.X > 0.0 && (double) this.velocity.X < 7.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 0.05f;
          }
          if ((double) this.velocity.X < 0.0 && (double) this.velocity.X > -7.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 0.05f;
          }
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.velocity.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 0.3f;
        if (this.type != 655 || !this.wet)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 26)
        this.AI_026();
      else if (this.aiStyle == 27)
      {
        if (this.type == 115)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] < 30.0)
            this.velocity = this.velocity * 1.125f;
        }
        if (this.type == 115 && (double) this.localAI[1] < 5.0)
        {
          this.localAI[1] = 5f;
          for (int index1 = 5; index1 < 25; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X * (30f / (float) index1) * 80f, this.position.Y - this.velocity.Y * (30f / (float) index1) * 80f), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 0.9f);
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.25f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity - this.velocity * 5f;
          }
        }
        if ((double) this.localAI[1] > 7.0 && this.type == 173)
        {
          int Type;
          switch (Main.rand.Next(3))
          {
            case 0:
              Type = 15;
              break;
            case 1:
              Type = 57;
              break;
            default:
              Type = 58;
              break;
          }
          int index = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 4.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 4.0)), 8, 8, Type, 0.0f, 0.0f, 100, new Color(), 1.25f);
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.1f;
        }
        if ((double) this.localAI[1] > 7.0 && this.type == 132)
        {
          int index1 = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 4.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 4.0)), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.25f);
          Dust dust1 = Main.dust[index1];
          dust1.velocity = dust1.velocity * -0.25f;
          int index2 = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 4.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 4.0)), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.25f);
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity * -0.25f;
          Dust dust3 = Main.dust[index2];
          dust3.position = dust3.position - this.velocity * 0.5f;
        }
        if ((double) this.localAI[1] < 15.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        else
        {
          if (this.type == 114 || this.type == 115)
          {
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 4f), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 0.6f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * -0.25f;
          }
          else if (this.type == 116)
          {
            int index = Dust.NewDust(new Vector2((float) ((double) this.position.X - (double) this.velocity.X * 5.0 + 2.0), (float) ((double) this.position.Y + 2.0 - (double) this.velocity.Y * 5.0)), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * -0.25f;
            Main.dust[index].noGravity = true;
          }
          if ((double) this.localAI[0] == 0.0)
          {
            this.scale = this.scale - 0.02f;
            this.alpha = this.alpha + 30;
            if (this.alpha >= 250)
            {
              this.alpha = (int) byte.MaxValue;
              this.localAI[0] = 1f;
            }
          }
          else if ((double) this.localAI[0] == 1.0)
          {
            this.scale = this.scale + 0.02f;
            this.alpha = this.alpha - 30;
            if (this.alpha <= 0)
            {
              this.alpha = 0;
              this.localAI[0] = 0.0f;
            }
          }
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          if (this.type == 132)
            Main.PlaySound(SoundID.Item60, this.position);
          else
            Main.PlaySound(SoundID.Item8, this.position);
        }
        if (this.type == 157)
        {
          this.rotation = this.rotation + (float) this.direction * 0.4f;
          this.spriteDirection = this.direction;
        }
        else
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 0.785f;
        if ((double) this.velocity.Y <= 16.0)
          return;
        this.velocity.Y = 16f;
      }
      else if (this.aiStyle == 28)
      {
        if (this.type == 177)
        {
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), new Color(), (float) (1.0 + (double) Main.rand.Next(-20, 40) * 0.00999999977648258));
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.3f;
          }
        }
        if (this.type == 118)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.3f;
          }
        }
        if (this.type == 119 || this.type == 128 || this.type == 359)
        {
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, 50, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.3f;
          }
        }
        if (this.type == 309)
        {
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185, this.velocity.X, this.velocity.Y, 50, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.3f;
          }
        }
        if (this.type == 129)
        {
          for (int index1 = 0; index1 < 6; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 106, this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * (float) (0.100000001490116 + (double) Main.rand.Next(4) * 0.100000001490116);
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
          }
        }
        if ((double) this.ai[1] != 0.0)
          return;
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item28, this.position);
      }
      else if (this.aiStyle == 29)
      {
        if (this.type == 619)
        {
          int Alpha = (int) this.ai[0];
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, Alpha, new Color(), 1.2f);
            Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.5f;
          }
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) byte.MaxValue, this.velocity.X, this.velocity.Y, Alpha, new Color(), 0.4f);
            if (index1 == 0)
              Main.dust[index2].position = (Main.dust[index2].position + this.Center * 5f) / 6f;
            else if (index1 == 1)
              Main.dust[index2].position = (Main.dust[index2].position + (this.Center + this.velocity / 2f) * 5f) / 6f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.1f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].fadeIn = 1f;
          }
        }
        else if (this.type == 620)
        {
          int Type = (int) this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          float num = (float) ((60.0 - (double) this.ai[1]) / 60.0);
          if ((double) this.ai[1] > 40.0)
            this.Kill();
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 0.2f;
          if ((double) this.velocity.Y > 18.0)
            this.velocity.Y = 18f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * 0.98f;
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50, new Color(), 1.1f);
            Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.3f;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * num;
          }
          for (int index1 = 0; index1 < 1; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50, new Color(), 0.6f);
            Main.dust[index2].position = (Main.dust[index2].position + this.Center * 5f) / 6f;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.1f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].fadeIn = 0.9f * num;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * num;
          }
        }
        else if (this.type == 521)
        {
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, new Color(), 1.2f);
            Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.5f;
          }
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) byte.MaxValue, this.velocity.X, this.velocity.Y, 50, new Color(), 0.4f);
            if (index1 == 0)
              Main.dust[index2].position = (Main.dust[index2].position + this.Center * 5f) / 6f;
            else if (index1 == 1)
              Main.dust[index2].position = (Main.dust[index2].position + (this.Center + this.velocity / 2f) * 5f) / 6f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.1f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].fadeIn = 1f;
          }
        }
        else if (this.type == 522)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          float num = (float) ((60.0 - (double) this.ai[1]) / 60.0);
          if ((double) this.ai[1] > 40.0)
            this.Kill();
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 0.2f;
          if ((double) this.velocity.Y > 18.0)
            this.velocity.Y = 18f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * 0.98f;
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X, this.velocity.Y, 50, new Color(), 1.1f);
            Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.3f;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * num;
          }
          for (int index1 = 0; index1 < 1; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) byte.MaxValue, this.velocity.X, this.velocity.Y, 50, new Color(), 0.6f);
            Main.dust[index2].position = (Main.dust[index2].position + this.Center * 5f) / 6f;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.1f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].fadeIn = 0.9f * num;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * num;
          }
        }
        else
        {
          int Type = this.type - 121 + 86;
          if (this.type == 597)
            Type = 262;
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X, this.velocity.Y, 50, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.3f;
          }
          if ((double) this.ai[1] != 0.0)
            return;
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item8, this.position);
        }
      }
      else if (this.aiStyle == 30)
      {
        this.velocity = this.velocity * 0.8f;
        this.rotation = this.rotation + 0.2f;
        this.alpha = this.alpha + 4;
        if (this.alpha < (int) byte.MaxValue)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 31)
      {
        int Type = 110;
        int conversionType = 0;
        if (this.type == 146)
        {
          Type = 111;
          conversionType = 2;
        }
        if (this.type == 147)
        {
          Type = 112;
          conversionType = 1;
        }
        if (this.type == 148)
        {
          Type = 113;
          conversionType = 3;
        }
        if (this.type == 149)
        {
          Type = 114;
          conversionType = 4;
        }
        if (this.owner == Main.myPlayer)
          WorldGen.Convert((int) ((double) this.position.X + (double) (this.width / 2)) / 16, (int) ((double) this.position.Y + (double) (this.height / 2)) / 16, conversionType, 2);
        if (this.timeLeft > 133)
          this.timeLeft = 133;
        if ((double) this.ai[0] > 7.0)
        {
          float num = 1f;
          if ((double) this.ai[0] == 8.0)
            num = 0.2f;
          else if ((double) this.ai[0] == 9.0)
            num = 0.4f;
          else if ((double) this.ai[0] == 10.0)
            num = 0.6f;
          else if ((double) this.ai[0] == 11.0)
            num = 0.8f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          for (int index1 = 0; index1 < 1; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.scale = dust1.scale * 1.75f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 2f;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * num;
          }
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        this.rotation = this.rotation + 0.3f * (float) this.direction;
      }
      else if (this.aiStyle == 32)
      {
        this.timeLeft = 10;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] >= 20.0)
        {
          this.ai[0] = 15f;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
            if (Main.player[index].active)
            {
              Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X, (int) Main.player[index].position.Y, Main.player[index].width, Main.player[index].height);
              if (rectangle1.Intersects(rectangle2))
              {
                this.ai[0] = 0.0f;
                this.velocity.Y = -4.5f;
                if ((double) this.velocity.X > 2.0)
                  this.velocity.X = 2f;
                if ((double) this.velocity.X < -2.0)
                  this.velocity.X = -2f;
                this.velocity.X = (float) (((double) this.velocity.X + (double) Main.player[index].direction * 1.75) / 2.0);
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + Main.player[index].velocity.X * 3f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + Main.player[index].velocity.Y;
                if ((double) this.velocity.X > 6.0)
                  this.velocity.X = 6f;
                if ((double) this.velocity.X < -6.0)
                  this.velocity.X = -6f;
                this.netUpdate = true;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local4 = @this.ai[1];
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local4 = ^local4 + 1f;
              }
            }
          }
        }
        if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          this.Kill();
        this.rotation = this.rotation + 0.02f * this.velocity.X;
        if ((double) this.velocity.Y == 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * 0.98f;
        }
        else if (this.wet)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * 0.99f;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * 0.995f;
        }
        if ((double) this.velocity.X > -0.03 && (double) this.velocity.X < 0.03)
          this.velocity.X = 0.0f;
        if (this.wet)
        {
          this.ai[1] = 0.0f;
          if ((double) this.velocity.Y > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 0.95f;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - 0.1f;
          if ((double) this.velocity.Y < -4.0)
            this.velocity.Y = -4f;
          if ((double) this.velocity.X == 0.0)
            this.Kill();
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 0.1f;
        }
        if ((double) this.velocity.Y <= 10.0)
          return;
        this.velocity.Y = 10f;
      }
      else if (this.aiStyle == 33)
      {
        if (this.alpha > 0)
        {
          this.alpha = this.alpha - 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        float num1 = 4f;
        float num2 = this.ai[0];
        float num3 = this.ai[1];
        if ((double) num2 == 0.0 && (double) num3 == 0.0)
          num2 = 1f;
        float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
        float num5 = num1 / num4;
        float num6 = num2 * num5;
        float num7 = num3 * num5;
        if (this.alpha < 70)
        {
          int Type = (int) sbyte.MaxValue;
          if (this.type == 310)
            Type = 187;
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y - 2f), 6, 6, Type, this.velocity.X, this.velocity.Y, 100, new Color(), 1.6f);
          Main.dust[index].noGravity = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index].position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 - num6 * 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index].position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - num7 * 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - num6;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.dust[index].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 - num7;
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.ai[0] = this.velocity.X;
          this.ai[1] = this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.localAI[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.localAI[1] >= 30.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.09f;
            this.localAI[1] = 30f;
          }
        }
        else
        {
          if (!Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.localAI[0] = 0.0f;
            this.localAI[1] = 30f;
          }
          this.damage = 0;
        }
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        this.rotation = (float) Math.Atan2((double) this.ai[1], (double) this.ai[0]) + 1.57f;
      }
      else if (this.aiStyle == 34)
      {
        this.rotation = this.velocity.ToRotation() + 1.570796f;
        if ((double) this.ai[1] == 1.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] == 1.0)
          {
            for (int index1 = 0; index1 < 8; ++index1)
            {
              int index2 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.8f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 3f;
              Main.dust[index2].fadeIn = 0.5f;
              Dust dust2 = Main.dust[index2];
              dust2.position = dust2.position + this.velocity / 2f;
              Dust dust3 = Main.dust[index2];
              dust3.velocity = dust3.velocity + this.velocity / 4f + Main.player[this.owner].velocity * 0.1f;
            }
          }
          if ((double) this.ai[0] <= 2.0)
            return;
          int index3 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index3].noGravity = true;
          Dust dust4 = Main.dust[index3];
          dust4.velocity = dust4.velocity * 0.2f;
          Main.dust[index3].position = Main.dust[index3].position.RotatedBy((double) this.rotation, this.Center);
          int index4 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 15f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index4].noGravity = true;
          Dust dust5 = Main.dust[index4];
          dust5.velocity = dust5.velocity * 0.2f;
          Main.dust[index4].position = Main.dust[index4].position.RotatedBy((double) this.rotation, this.Center);
          int index5 = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 10f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index5].noGravity = true;
          Dust dust6 = Main.dust[index5];
          dust6.velocity = dust6.velocity * 0.2f;
          Main.dust[index5].position = Main.dust[index5].position.RotatedBy((double) this.rotation, this.Center);
        }
        else if (this.type >= 415 && this.type <= 418)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] <= 4.0)
            return;
          int index = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index].noGravity = true;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.2f;
          Main.dust[index].position = Main.dust[index].position.RotatedBy((double) this.rotation, this.Center);
        }
        else
        {
          int index = Dust.NewDust(new Vector2(this.position.X + 2f, this.position.Y + 20f), 8, 8, 6, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index].noGravity = true;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.2f;
          Main.dust[index].position = Main.dust[index].position.RotatedBy((double) this.rotation, this.Center);
        }
      }
      else if (this.aiStyle == 35)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] > 30.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 0.2f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * 0.985f;
          if ((double) this.velocity.Y > 14.0)
            this.velocity.Y = 14f;
        }
        this.rotation = this.rotation + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * (double) this.direction * 0.0199999995529652);
        if (this.owner != Main.myPlayer)
          return;
        Vector2 vector2 = Collision.TileCollision(this.position, this.velocity, this.width, this.height, true, true, 1);
        bool flag = false;
        if (vector2 != this.velocity)
        {
          flag = true;
        }
        else
        {
          int index1 = (int) ((double) this.Center.X + (double) this.velocity.X) / 16;
          int index2 = (int) ((double) this.Center.Y + (double) this.velocity.Y) / 16;
          if (Main.tile[index1, index2] != null && Main.tile[index1, index2].active() && Main.tile[index1, index2].bottomSlope())
          {
            flag = true;
            this.position.Y = (float) (index2 * 16 + 16 + 8);
            this.position.X = (float) (index1 * 16 + 8);
          }
        }
        if (!flag)
          return;
        int type = 213;
        if (this.type == 475)
          type = 353;
        if (this.type == 506)
          type = 366;
        if (this.type == 505)
          type = 365;
        int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
        int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
        this.position = this.position + vector2;
        int num = 10;
        if (Main.tile[i, j] == null)
          return;
        while (Main.tile[i, j] != null && Main.tile[i, j].active() && Main.tileRope[(int) Main.tile[i, j].type])
          ++j;
        while (num > 0)
        {
          --num;
          if (Main.tile[i, j] != null)
          {
            if (Main.tile[i, j].active() && (Main.tileCut[(int) Main.tile[i, j].type] || (int) Main.tile[i, j].type == 165))
            {
              WorldGen.KillTile(i, j, false, false, false);
              NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) i, (float) j, 0.0f, 0, 0, 0);
            }
            if (!Main.tile[i, j].active())
            {
              WorldGen.PlaceTile(i, j, type, false, false, -1, 0);
              NetMessage.SendData(17, -1, -1, (NetworkText) null, 1, (float) i, (float) j, (float) type, 0, 0, 0);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.ai[1];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + 1f;
            }
            else
              num = 0;
            ++j;
          }
          else
            break;
        }
        this.Kill();
      }
      else if (this.aiStyle == 36)
      {
        if (this.type != 307 && this.wet && !this.honeyWet)
          this.Kill();
        if (this.alpha > 0)
          this.alpha = this.alpha - 50;
        else
          this.extraUpdates = 0;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.type == 307)
        {
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 6)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame >= 2)
            this.frame = 0;
          for (int index1 = 0; index1 < 3; ++index1)
          {
            float num1 = this.velocity.X / 3f * (float) index1;
            float num2 = this.velocity.Y / 3f * (float) index1;
            int index2 = Dust.NewDust(this.position, this.width, this.height, 184, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position.X = this.Center.X - num1;
            Main.dust[index2].position.Y = this.Center.Y - num2;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.0f;
            Main.dust[index2].scale = 0.5f;
          }
        }
        else
        {
          if (this.type == 316)
          {
            if ((double) this.velocity.X > 0.0)
              this.spriteDirection = -1;
            else if ((double) this.velocity.X < 0.0)
              this.spriteDirection = 1;
          }
          else if ((double) this.velocity.X > 0.0)
            this.spriteDirection = 1;
          else if ((double) this.velocity.X < 0.0)
            this.spriteDirection = -1;
          this.rotation = this.velocity.X * 0.1f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 3)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame >= 3)
            this.frame = 0;
        }
        float num3 = this.position.X;
        float num4 = this.position.Y;
        float num5 = 100000f;
        bool flag = false;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] > 30.0)
        {
          this.ai[0] = 30f;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, false) && (!Main.npc[index].wet || this.type == 307))
            {
              float num1 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num2 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - num1) + Math.Abs(this.position.Y + (float) (this.height / 2) - num2);
              if ((double) num6 < 800.0 && (double) num6 < (double) num5 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num5 = num6;
                num3 = num1;
                num4 = num2;
                flag = true;
              }
            }
          }
        }
        if (!flag)
        {
          num3 = (float) ((double) this.position.X + (double) (this.width / 2) + (double) this.velocity.X * 100.0);
          num4 = (float) ((double) this.position.Y + (double) (this.height / 2) + (double) this.velocity.Y * 100.0);
        }
        else if (this.type == 307)
          this.friendly = true;
        float num7 = 6f;
        float num8 = 0.1f;
        if (this.type == 189)
        {
          num7 = 7f;
          num8 = 0.15f;
        }
        if (this.type == 307)
        {
          num7 = 9f;
          num8 = 0.2f;
        }
        if (this.type == 316)
        {
          num7 = 10f;
          num8 = 0.25f;
        }
        if (this.type == 566)
        {
          num7 = 6.8f;
          num8 = 0.14f;
        }
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num9 = num3 - vector2.X;
        float num10 = num4 - vector2.Y;
        float num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
        float num12 = num7 / num11;
        float num13 = num9 * num12;
        float num14 = num10 * num12;
        if ((double) this.velocity.X < (double) num13)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + num8;
          if ((double) this.velocity.X < 0.0 && (double) num13 > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + num8 * 2f;
          }
        }
        else if ((double) this.velocity.X > (double) num13)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - num8;
          if ((double) this.velocity.X > 0.0 && (double) num13 < 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - num8 * 2f;
          }
        }
        if ((double) this.velocity.Y < (double) num14)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + num8;
          if ((double) this.velocity.Y >= 0.0 || (double) num14 <= 0.0)
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + num8 * 2f;
        }
        else
        {
          if ((double) this.velocity.Y <= (double) num14)
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - num8;
          if ((double) this.velocity.Y <= 0.0 || (double) num14 >= 0.0)
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - num8 * 2f;
        }
      }
      else if (this.aiStyle == 37)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          this.localAI[0] = this.Center.X - this.velocity.X * 1.5f;
          this.localAI[1] = this.Center.Y - this.velocity.Y * 1.5f;
        }
        Vector2 vector2 = new Vector2(this.localAI[0], this.localAI[1]);
        this.rotation = (this.Center - vector2).ToRotation() - 1.570796f;
        if ((double) this.ai[0] == 0.0)
        {
          if (Collision.SolidCollision(this.position, this.width, this.height))
          {
            this.velocity = this.velocity * -1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
          else
          {
            if ((double) Vector2.Distance(this.Center, vector2) <= 300.0)
              return;
            this.velocity = this.velocity * -1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
        }
        else
        {
          if (!Collision.SolidCollision(this.position, this.width, this.height) && (double) Vector2.Distance(this.Center, vector2) >= (double) this.velocity.Length())
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 38)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] < 6.0)
          return;
        this.ai[0] = 0.0f;
        Main.PlaySound(SoundID.Item34, this.position);
        if (Main.myPlayer != this.owner)
          return;
        Projectile.NewProjectile(this.position.X, this.position.Y, this.velocity.X, this.velocity.Y, 188, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
      }
      else if (this.aiStyle == 39)
      {
        this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (Main.player[this.owner].dead)
        {
          this.Kill();
        }
        else
        {
          if (this.alpha == 0)
          {
            Main.player[this.owner].itemAnimation = 5;
            Main.player[this.owner].itemTime = 5;
            if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
              Main.player[this.owner].ChangeDir(1);
            else
              Main.player[this.owner].ChangeDir(-1);
          }
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num1 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num2 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          float num3 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2);
          if (!Main.player[this.owner].channel && this.alpha == 0)
          {
            this.ai[0] = 1f;
            this.ai[1] = -1f;
          }
          if ((double) this.ai[1] > 0.0 && (double) num3 > 1500.0)
          {
            this.ai[1] = 0.0f;
            this.ai[0] = 1f;
          }
          if ((double) this.ai[1] > 0.0)
          {
            this.tileCollide = false;
            int index1 = (int) this.ai[1] - 1;
            if (Main.npc[index1].active && Main.npc[index1].life > 0)
            {
              float num4 = 16f;
              vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
              float num5 = Main.npc[index1].position.X + (float) (Main.npc[index1].width / 2) - vector2.X;
              float num6 = Main.npc[index1].position.Y + (float) (Main.npc[index1].height / 2) - vector2.Y;
              float num7 = (float) Math.Sqrt((double) num5 * (double) num5 + (double) num6 * (double) num6);
              if ((double) num7 < (double) num4)
              {
                this.velocity.X = num5;
                this.velocity.Y = num6;
                if ((double) num7 > (double) num4 / 2.0)
                {
                  if ((double) this.velocity.X < 0.0)
                  {
                    this.spriteDirection = -1;
                    this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
                  }
                  else
                  {
                    this.spriteDirection = 1;
                    this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                  }
                }
              }
              else
              {
                float num8 = num4 / num7;
                float num9 = num5 * num8;
                float num10 = num6 * num8;
                this.velocity.X = num9;
                this.velocity.Y = num10;
                if ((double) this.velocity.X < 0.0)
                {
                  this.spriteDirection = -1;
                  this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
                }
                else
                {
                  this.spriteDirection = 1;
                  this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
                }
              }
              this.ai[0] = 1f;
            }
            else
            {
              this.ai[1] = 0.0f;
              float num4 = this.position.X;
              float num5 = this.position.Y;
              float num6 = 3000f;
              int num7 = -1;
              for (int index2 = 0; index2 < 200; ++index2)
              {
                if (Main.npc[index2].CanBeChasedBy((object) this, false))
                {
                  float num8 = Main.npc[index2].position.X + (float) (Main.npc[index2].width / 2);
                  float num9 = Main.npc[index2].position.Y + (float) (Main.npc[index2].height / 2);
                  float num10 = Math.Abs(this.position.X + (float) (this.width / 2) - num8) + Math.Abs(this.position.Y + (float) (this.height / 2) - num9);
                  if ((double) num10 < (double) num6 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index2].position, Main.npc[index2].width, Main.npc[index2].height))
                  {
                    num6 = num10;
                    num4 = num8;
                    num5 = num9;
                    num7 = index2;
                  }
                }
              }
              if (num7 >= 0)
              {
                float num8 = 16f;
                vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
                float num9 = num4 - vector2.X;
                float num10 = num5 - vector2.Y;
                float num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
                float num12 = num8 / num11;
                float num13 = num9 * num12;
                float num14 = num10 * num12;
                this.velocity.X = num13;
                this.velocity.Y = num14;
                this.ai[0] = 0.0f;
                this.ai[1] = (float) (num7 + 1);
              }
            }
          }
          else if ((double) this.ai[0] == 0.0)
          {
            if ((double) num3 > 700.0)
              this.ai[0] = 1f;
            if ((double) this.velocity.X < 0.0)
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            }
            else
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            }
          }
          else if ((double) this.ai[0] == 1.0)
          {
            this.tileCollide = false;
            if ((double) this.velocity.X < 0.0)
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            }
            else
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            }
            if ((double) this.velocity.X < 0.0)
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
            }
            else
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            }
            float num4 = 20f;
            if ((double) num3 < 70.0)
              this.Kill();
            float num5 = num4 / num3;
            float num6 = num1 * num5;
            float num7 = num2 * num5;
            this.velocity.X = num6;
            this.velocity.Y = num7;
          }
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 4)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame < 4)
            return;
          this.frame = 0;
        }
      }
      else if (this.aiStyle == 40)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.localAI[0] > 3.0)
        {
          this.localAI[0] = 100f;
          this.alpha = this.alpha - 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
        }
        if (this.frame >= 5)
          this.frame = 0;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @this.velocity.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 + this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local3 = @this.velocity.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local3 = ^local3 + this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local4 = @this.localAI[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local4 = ^local4 + 1f;
        if ((double) this.localAI[1] == 50.0)
        {
          this.localAI[1] = 51f;
          this.ai[0] = (float) Main.rand.Next(-100, 101) * 6E-05f;
          this.ai[1] = (float) Main.rand.Next(-100, 101) * 6E-05f;
        }
        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > 16.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 * 0.95f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 * 0.95f;
        }
        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 12.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 * 1.05f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 * 1.05f;
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
      }
      else if (this.aiStyle == 41)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          this.frame = Main.rand.Next(3);
        }
        this.rotation = this.rotation + this.velocity.X * 0.01f;
      }
      else if (this.aiStyle == 42)
      {
        if (!Main.player[this.owner].crystalLeaf)
        {
          this.Kill();
        }
        else
        {
          this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
          this.position.Y = (float) ((double) Main.player[this.owner].Center.Y - (double) (this.height / 2) + (double) Main.player[this.owner].gfxOffY - 60.0);
          if ((double) Main.player[this.owner].gravDir == -1.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 120f;
            this.rotation = 3.14f;
          }
          else
            this.rotation = 0.0f;
          this.position.X = (float) (int) this.position.X;
          this.position.Y = (float) (int) this.position.Y;
          this.scale = (float) ((double) Main.mouseTextColor / 200.0 - 0.349999994039536) * 0.2f + 0.95f;
          if (this.owner != Main.myPlayer)
            return;
          if ((double) this.ai[0] == 0.0)
          {
            float num1 = this.position.X;
            float num2 = this.position.Y;
            float num3 = 700f;
            bool flag = false;
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].CanBeChasedBy((object) this, true))
              {
                float num4 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                float num5 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - num4) + Math.Abs(this.position.Y + (float) (this.height / 2) - num5);
                if ((double) num6 < (double) num3 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                {
                  num3 = num6;
                  num1 = num4;
                  num2 = num5;
                  flag = true;
                }
              }
            }
            if (!flag)
              return;
            float num7 = 12f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num8 = num1 - vector2.X;
            float num9 = num2 - vector2.Y;
            float num10 = (float) Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9);
            float num11 = num7 / num10;
            Projectile.NewProjectile(this.Center.X - 4f, this.Center.Y, num8 * num11, num9 * num11, 227, Player.crystalLeafDamage, (float) Player.crystalLeafKB, this.owner, 0.0f, 0.0f);
            this.ai[0] = 50f;
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 1f;
          }
        }
      }
      else if (this.aiStyle == 43)
      {
        if ((double) this.localAI[1] == 0.0)
        {
          Main.PlaySound(6, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          for (int index1 = 0; index1 < 5; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 3f;
            Main.dust[index2].scale = 1.5f;
          }
        }
        this.ai[0] = (float) Main.rand.Next(-100, 101) * (1f / 400f);
        this.ai[1] = (float) Main.rand.Next(-100, 101) * (1f / 400f);
        if ((double) this.localAI[0] == 0.0)
        {
          this.scale = this.scale + 0.05f;
          if ((double) this.scale > 1.2)
            this.localAI[0] = 1f;
        }
        else
        {
          this.scale = this.scale - 0.05f;
          if ((double) this.scale < 0.8)
            this.localAI[0] = 0.0f;
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f;
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0.0f, 0.0f, 0, new Color(), 1f);
        Main.dust[index].noGravity = true;
        Dust dust1 = Main.dust[index];
        dust1.velocity = dust1.velocity * 0.1f;
        Main.dust[index].scale = 1.5f;
      }
      else if (this.aiStyle == 44)
      {
        if (this.type == 228)
        {
          this.velocity = this.velocity * 0.96f;
          this.alpha = this.alpha + 4;
          if (this.alpha > (int) byte.MaxValue)
            this.Kill();
        }
        else if (this.type == 229)
        {
          if ((double) this.ai[0] == 0.0)
            Main.PlaySound(SoundID.Item8, this.position);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[0] > 20.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.98f;
          }
        }
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter > 5)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
        }
        if (this.frame < Main.projFrames[this.type])
          return;
        this.frame = 0;
      }
      else if (this.aiStyle == 45)
      {
        if (this.type == 237 || this.type == 243)
        {
          float num1 = this.ai[0];
          float num2 = this.ai[1];
          if ((double) num1 != 0.0 && (double) num2 != 0.0)
          {
            bool flag1 = false;
            bool flag2 = false;
            if ((double) this.velocity.X < 0.0 && (double) this.Center.X < (double) num1 || (double) this.velocity.X > 0.0 && (double) this.Center.X > (double) num1)
              flag1 = true;
            if ((double) this.velocity.Y < 0.0 && (double) this.Center.Y < (double) num2 || (double) this.velocity.Y > 0.0 && (double) this.Center.Y > (double) num2)
              flag2 = true;
            if (flag1 & flag2)
              this.Kill();
          }
          this.rotation = this.rotation + this.velocity.X * 0.02f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter <= 4)
            return;
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame <= 3)
            return;
          this.frame = 0;
        }
        else if (this.type == 238 || this.type == 244)
        {
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter > 8)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
            if (this.frame > 5)
              this.frame = 0;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if (this.type == 244 && (double) this.ai[1] >= 3600.0)
          {
            this.alpha = this.alpha + 5;
            if (this.alpha > (int) byte.MaxValue)
            {
              this.alpha = (int) byte.MaxValue;
              this.Kill();
            }
          }
          else if (this.type == 238 && (double) this.ai[1] >= 7200.0)
          {
            this.alpha = this.alpha + 5;
            if (this.alpha > (int) byte.MaxValue)
            {
              this.alpha = (int) byte.MaxValue;
              this.Kill();
            }
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 1f;
            if (this.type == 244)
            {
              if ((double) this.ai[0] > 10.0)
              {
                this.ai[0] = 0.0f;
                if (this.owner == Main.myPlayer)
                  Projectile.NewProjectile((float) (int) ((double) this.position.X + 14.0 + (double) Main.rand.Next(this.width - 28)), (float) (int) ((double) this.position.Y + (double) this.height + 4.0), 0.0f, 5f, 245, this.damage, 0.0f, this.owner, 0.0f, 0.0f);
              }
            }
            else if ((double) this.ai[0] > 8.0)
            {
              this.ai[0] = 0.0f;
              if (this.owner == Main.myPlayer)
                Projectile.NewProjectile((float) (int) ((double) this.position.X + 14.0 + (double) Main.rand.Next(this.width - 28)), (float) (int) ((double) this.position.Y + (double) this.height + 4.0), 0.0f, 5f, 239, this.damage, 0.0f, this.owner, 0.0f, 0.0f);
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + 1f;
          if ((double) this.localAI[0] < 10.0)
            return;
          this.localAI[0] = 0.0f;
          int num1 = 0;
          int index1 = 0;
          float num2 = 0.0f;
          int type = this.type;
          for (int index2 = 0; index2 < 1000; ++index2)
          {
            if (Main.projectile[index2].active && Main.projectile[index2].owner == this.owner && (Main.projectile[index2].type == type && (double) Main.projectile[index2].ai[1] < 3600.0))
            {
              ++num1;
              if ((double) Main.projectile[index2].ai[1] > (double) num2)
              {
                index1 = index2;
                num2 = Main.projectile[index2].ai[1];
              }
            }
          }
          if (this.type == 244)
          {
            if (num1 <= 1)
              return;
            Main.projectile[index1].netUpdate = true;
            Main.projectile[index1].ai[1] = 36000f;
          }
          else
          {
            if (num1 <= 2)
              return;
            Main.projectile[index1].netUpdate = true;
            Main.projectile[index1].ai[1] = 36000f;
          }
        }
        else if (this.type == 239)
          this.alpha = 50;
        else if (this.type == 245)
        {
          this.alpha = 100;
        }
        else
        {
          if (this.type != 264)
            return;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
      }
      else if (this.aiStyle == 46)
      {
        int num1 = 1200;
        if (this.type == 250)
        {
          if (this.owner == Main.myPlayer)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
            if ((double) this.localAI[0] > 4.0)
            {
              this.localAI[0] = 3f;
              Projectile.NewProjectile(this.Center.X, this.Center.Y, this.velocity.X * (1f / 1000f), this.velocity.Y * (1f / 1000f), 251, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            }
            if (this.timeLeft > num1)
              this.timeLeft = num1;
          }
          float num2 = 1f;
          if ((double) this.velocity.Y < 0.0)
            num2 -= this.velocity.Y / 3f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + num2;
          if ((double) this.ai[0] > 30.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.5f;
            if ((double) this.velocity.Y > 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 * 0.95f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 * 1.05f;
            }
          }
          float x = this.velocity.X;
          float y = this.velocity.Y;
          float num3 = 15.95f * this.scale / (float) Math.Sqrt((double) x * (double) x + (double) y * (double) y);
          float num4 = x * num3;
          float num5 = y * num3;
          this.velocity.X = num4;
          this.velocity.Y = num5;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
          {
            if ((double) this.velocity.X > 0.0)
            {
              this.spriteDirection = -1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
            }
            else
            {
              this.spriteDirection = 1;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
            }
            this.localAI[0] = 1f;
            this.timeLeft = num1;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 * 0.98f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * 0.98f;
          if ((double) this.rotation == 0.0)
            this.alpha = (int) byte.MaxValue;
          else if (this.timeLeft < 10)
            this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.timeLeft / 10.0);
          else if (this.timeLeft > num1 - 10)
            this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) (num1 - this.timeLeft) / 10.0);
          else
            this.alpha = 0;
        }
      }
      else if (this.aiStyle == 47)
      {
        if ((double) this.ai[0] == 0.0)
        {
          this.ai[0] = this.velocity.X;
          this.ai[1] = this.velocity.Y;
        }
        this.rotation = (double) this.velocity.X <= 0.0 ? this.rotation - (float) (((double) Math.Abs(this.velocity.Y) + (double) Math.Abs(this.velocity.X)) * (1.0 / 1000.0)) : this.rotation + (float) (((double) Math.Abs(this.velocity.Y) + (double) Math.Abs(this.velocity.X)) * (1.0 / 1000.0));
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter > 6)
        {
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame > 4)
            this.frame = 0;
        }
        if (Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y) > 2.0)
          this.velocity = this.velocity * 0.98f;
        for (int index = 0; index < 1000; ++index)
        {
          if (index != this.whoAmI && Main.projectile[index].active && (Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type) && (this.timeLeft > Main.projectile[index].timeLeft && Main.projectile[index].timeLeft > 30))
            Main.projectile[index].timeLeft = 30;
        }
        int[] numArray = new int[20];
        int maxValue = 0;
        float num1 = 300f;
        bool flag = false;
        float num2 = 0.0f;
        float num3 = 0.0f;
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].CanBeChasedBy((object) this, false))
          {
            float num4 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
            float num5 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
            if ((double) (Math.Abs(this.position.X + (float) (this.width / 2) - num4) + Math.Abs(this.position.Y + (float) (this.height / 2) - num5)) < (double) num1 && Collision.CanHit(this.Center, 1, 1, Main.npc[index].Center, 1, 1))
            {
              if (maxValue < 20)
              {
                numArray[maxValue] = index;
                ++maxValue;
                num2 = num4;
                num3 = num5;
              }
              flag = true;
            }
          }
        }
        if (this.timeLeft < 30)
          flag = false;
        if (!flag)
          return;
        int index1 = Main.rand.Next(maxValue);
        int index2 = numArray[index1];
        float num6 = Main.npc[index2].position.X + (float) (Main.npc[index2].width / 2);
        float num7 = Main.npc[index2].position.Y + (float) (Main.npc[index2].height / 2);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.localAI[0] <= 8.0)
          return;
        this.localAI[0] = 0.0f;
        float num8 = 6f;
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f) + this.velocity * 4f;
        float num9 = num6 - vector2.X;
        float num10 = num7 - vector2.Y;
        float num11 = (float) Math.Sqrt((double) num9 * (double) num9 + (double) num10 * (double) num10);
        float num12 = num8 / num11;
        float SpeedX = num9 * num12;
        float SpeedY = num10 * num12;
        Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, (int) byte.MaxValue, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
      }
      else if (this.aiStyle == 48)
      {
        if (this.type == (int) byte.MaxValue)
        {
          for (int index1 = 0; index1 < 4; ++index1)
          {
            Vector2 Position = this.position - this.velocity * ((float) index1 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index2 = Dust.NewDust(Position, 1, 1, 160, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = Position;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            Main.dust[index2].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.2f;
          }
        }
        else if (this.type == 433)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            Vector2 Position = this.position - this.velocity * ((float) index1 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index2 = Dust.NewDust(Position, 1, 1, 160, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = Position;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            Main.dust[index2].color = Main.rand.Next(2) != 0 ? Color.CornflowerBlue : Color.LimeGreen;
            Main.dust[index2].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.2f;
          }
        }
        else if (this.type == 290)
        {
          if ((double) this.localAI[0] == 0.0)
            Main.PlaySound(SoundID.Item8, this.position);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] <= 3.0)
            return;
          for (int index1 = 0; index1 < 3; ++index1)
          {
            Vector2 Position = this.position - this.velocity * ((float) index1 * 0.3334f);
            this.alpha = (int) byte.MaxValue;
            int index2 = Dust.NewDust(Position, 1, 1, 173, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = Position;
            Main.dust[index2].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.2f;
          }
        }
        else if (this.type == 294)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] <= 9.0)
            return;
          for (int index1 = 0; index1 < 4; ++index1)
          {
            Vector2 Position = this.position - this.velocity * ((float) index1 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index2 = Dust.NewDust(Position, 1, 1, 173, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = Position;
            Main.dust[index2].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.2f;
          }
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.localAI[0] <= 3.0)
            return;
          for (int index1 = 0; index1 < 4; ++index1)
          {
            Vector2 Position = this.position - this.velocity * ((float) index1 * 0.25f);
            this.alpha = (int) byte.MaxValue;
            int index2 = Dust.NewDust(Position, 1, 1, 162, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = Position;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + (float) (this.height / 2);
            Main.dust[index2].scale = (float) Main.rand.Next(70, 110) * 0.013f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.2f;
          }
        }
      }
      else if (this.aiStyle == 49)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item14, this.position);
        }
        if ((double) this.ai[1] == 1.0)
        {
          if ((double) this.velocity.X > 0.0)
            this.direction = 1;
          else if ((double) this.velocity.X < 0.0)
            this.direction = -1;
          this.spriteDirection = this.direction;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          this.rotation = this.rotation + (float) ((double) this.velocity.X * 0.0500000007450581 + (double) this.direction * 0.0500000007450581);
          if ((double) this.ai[0] >= 18.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.28f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.99f;
          }
          if ((double) this.velocity.Y > 15.9)
            this.velocity.Y = 15.9f;
          if ((double) this.ai[0] <= 2.0)
            return;
          this.alpha = 0;
          if ((double) this.ai[0] != 3.0)
            return;
          for (int index1 = 0; index1 < 10; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.5f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + this.velocity * 0.1f;
          }
          for (int index1 = 0; index1 < 5; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 3f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + this.velocity * 0.2f;
            int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
            Dust dust3 = Main.dust[index3];
            dust3.velocity = dust3.velocity * 2f;
            Dust dust4 = Main.dust[index3];
            dust4.velocity = dust4.velocity + this.velocity * 0.3f;
          }
          for (int index1 = 0; index1 < 1; ++index1)
          {
            int index2 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore1 = Main.gore[index2];
            gore1.position = gore1.position + this.velocity * 1.25f;
            Main.gore[index2].scale = 1.5f;
            Gore gore2 = Main.gore[index2];
            gore2.velocity = gore2.velocity + this.velocity * 0.5f;
            Gore gore3 = Main.gore[index2];
            gore3.velocity = gore3.velocity * 0.02f;
          }
        }
        else
        {
          if ((double) this.ai[1] != 2.0)
            return;
          this.rotation = 0.0f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 * 0.95f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 0.2f;
        }
      }
      else if (this.aiStyle == 50)
      {
        if (this.type == 291)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            Main.PlaySound(SoundID.Item20, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
          bool flag1 = false;
          bool flag2 = false;
          if ((double) this.velocity.X < 0.0 && (double) this.position.X < (double) this.ai[0])
            flag1 = true;
          if ((double) this.velocity.X > 0.0 && (double) this.position.X > (double) this.ai[0])
            flag1 = true;
          if ((double) this.velocity.Y < 0.0 && (double) this.position.Y < (double) this.ai[1])
            flag2 = true;
          if ((double) this.velocity.Y > 0.0 && (double) this.position.Y > (double) this.ai[1])
            flag2 = true;
          if (flag1 & flag2)
            this.Kill();
          for (int index1 = 0; index1 < 10; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0.0f, 0.0f, 100, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.5f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + this.velocity * 0.1f;
          }
        }
        else if (this.type == 295)
        {
          for (int index1 = 0; index1 < 8; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0.0f, 0.0f, 100, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.5f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + this.velocity * 0.1f;
          }
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
          {
            Main.PlaySound(SoundID.Item74, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if (this.type == 296)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 3f;
          }
          float num1 = 25f;
          if ((double) this.ai[0] > 180.0)
            num1 -= (float) (((double) this.ai[0] - 180.0) / 2.0);
          if ((double) num1 <= 0.0)
          {
            num1 = 0.0f;
            this.Kill();
          }
          if (this.type == 296)
            num1 *= 0.7f;
          for (int index1 = 0; (double) index1 < (double) num1; ++index1)
          {
            float num2 = (float) Main.rand.Next(-10, 11);
            float num3 = (float) Main.rand.Next(-10, 11);
            float num4 = (float) Main.rand.Next(3, 9) / (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            float num5 = num2 * num4;
            float num6 = num3 * num4;
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 174, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position.X = this.Center.X;
            Main.dust[index2].position.Y = this.Center.Y;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) Main.rand.Next(-10, 11);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + (float) Main.rand.Next(-10, 11);
            Main.dust[index2].velocity.X = num5;
            Main.dust[index2].velocity.Y = num6;
          }
        }
      }
      else if (this.aiStyle == 51)
      {
        if (this.type == 297)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] > 4.0)
          {
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0.0f, 0.0f, 100, new Color(), 2f);
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.0f;
            }
          }
        }
        else
        {
          if ((double) this.localAI[0] == 0.0)
          {
            Main.PlaySound(SoundID.Item8, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
          for (int index1 = 0; index1 < 9; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0.0f, 0.0f, 100, new Color(), 1.3f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.0f;
          }
        }
        float num1 = this.Center.X;
        float num2 = this.Center.Y;
        float num3 = 400f;
        bool flag = false;
        int num4 = 0;
        if (this.type == 297)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, false) && (double) this.Distance(Main.npc[index].Center) < (double) num3 && Collision.CanHit(this.Center, 1, 1, Main.npc[index].Center, 1, 1))
            {
              float num5 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num6 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num7 = Math.Abs(this.position.X + (float) (this.width / 2) - num5) + Math.Abs(this.position.Y + (float) (this.height / 2) - num6);
              if ((double) num7 < (double) num3)
              {
                num3 = num7;
                num1 = num5;
                num2 = num6;
                flag = true;
                num4 = index;
              }
            }
          }
        }
        else
        {
          float num5 = 200f;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead)
            {
              float num6 = Main.player[index].position.X + (float) (Main.player[index].width / 2);
              float num7 = Main.player[index].position.Y + (float) (Main.player[index].height / 2);
              float num8 = Math.Abs(this.position.X + (float) (this.width / 2) - num6) + Math.Abs(this.position.Y + (float) (this.height / 2) - num7);
              if ((double) num8 < (double) num5)
              {
                num5 = num8;
                num1 = num6;
                num2 = num7;
                flag = true;
                num4 = index;
              }
            }
          }
        }
        if (!flag)
          return;
        float num9 = 3f;
        if (this.type == 297)
          num9 = 6f;
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num10 = num1 - vector2.X;
        float num11 = num2 - vector2.Y;
        float num12 = (float) Math.Sqrt((double) num10 * (double) num10 + (double) num11 * (double) num11);
        float num13 = num9 / num12;
        float num14 = num10 * num13;
        float num15 = num11 * num13;
        if (this.type == 297)
        {
          this.velocity.X = (float) (((double) this.velocity.X * 20.0 + (double) num14) / 21.0);
          this.velocity.Y = (float) (((double) this.velocity.Y * 20.0 + (double) num15) / 21.0);
        }
        else
        {
          this.velocity.X = (float) (((double) this.velocity.X * 100.0 + (double) num14) / 101.0);
          this.velocity.Y = (float) (((double) this.velocity.Y * 100.0 + (double) num15) / 101.0);
        }
      }
      else if (this.aiStyle == 52)
      {
        int number = (int) this.ai[0];
        float num1 = 4f;
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num2 = Main.player[number].Center.X - vector2.X;
        float num3 = Main.player[number].Center.Y - vector2.Y;
        float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
        if ((double) num4 < 50.0 && (double) this.position.X < (double) Main.player[number].position.X + (double) Main.player[number].width && ((double) this.position.X + (double) this.width > (double) Main.player[number].position.X && (double) this.position.Y < (double) Main.player[number].position.Y + (double) Main.player[number].height) && (double) this.position.Y + (double) this.height > (double) Main.player[number].position.Y)
        {
          if (this.owner == Main.myPlayer && !Main.player[Main.myPlayer].moonLeech)
          {
            int healAmount = (int) this.ai[1];
            Main.player[number].HealEffect(healAmount, false);
            Player player = Main.player[number];
            player.statLife = player.statLife + healAmount;
            if (Main.player[number].statLife > Main.player[number].statLifeMax2)
              Main.player[number].statLife = Main.player[number].statLifeMax2;
            NetMessage.SendData(66, -1, -1, (NetworkText) null, number, (float) healAmount, 0.0f, 0.0f, 0, 0, 0);
          }
          this.Kill();
        }
        float num5 = num1 / num4;
        float num6 = num2 * num5;
        float num7 = num3 * num5;
        this.velocity.X = (float) (((double) this.velocity.X * 15.0 + (double) num6) / 16.0);
        this.velocity.Y = (float) (((double) this.velocity.Y * 15.0 + (double) num7) / 16.0);
        if (this.type == 305)
        {
          for (int index1 = 0; index1 < 3; ++index1)
          {
            float num8 = this.velocity.X * 0.334f * (float) index1;
            float num9 = (float) -((double) this.velocity.Y * 0.333999991416931) * (float) index1;
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 183, 0.0f, 0.0f, 100, new Color(), 1.1f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.0f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - num8;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - num9;
          }
        }
        else
        {
          for (int index1 = 0; index1 < 5; ++index1)
          {
            float num8 = this.velocity.X * 0.2f * (float) index1;
            float num9 = (float) -((double) this.velocity.Y * 0.200000002980232) * (float) index1;
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0.0f, 0.0f, 100, new Color(), 1.3f);
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.0f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - num8;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - num9;
          }
        }
      }
      else if (this.aiStyle == 53)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[1] = 1f;
          this.localAI[0] = 1f;
          this.ai[0] = 120f;
          int num1 = 80;
          Main.PlaySound(SoundID.Item46, this.position);
          if (this.type == 308)
          {
            for (int index1 = 0; index1 < num1; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185, 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2f;
              Main.dust[index2].noGravity = true;
              Dust dust2 = Main.dust[index2];
              dust2.scale = dust2.scale * 1.15f;
            }
          }
          if (this.type == 377)
          {
            this.frame = 4;
            int num2 = 40;
            for (int index1 = 0; index1 < num2; ++index1)
            {
              int index2 = Dust.NewDust(this.position + Vector2.UnitY * 16f, this.width, this.height - 16, 171, 0.0f, 0.0f, 100, new Color(), 1f);
              Main.dust[index2].scale = (float) Main.rand.Next(1, 10) * 0.1f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].fadeIn = 1.5f;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.75f;
            }
          }
        }
        this.velocity.X = 0.0f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.velocity.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 0.2f;
        if ((double) this.velocity.Y > 16.0)
          this.velocity.Y = 16f;
        bool flag = false;
        float num3 = this.Center.X;
        float num4 = this.Center.Y;
        float num5 = 1000f;
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
        {
          float num1 = minionAttackTargetNpc.position.X + (float) (minionAttackTargetNpc.width / 2);
          float num2 = minionAttackTargetNpc.position.Y + (float) (minionAttackTargetNpc.height / 2);
          float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - num1) + Math.Abs(this.position.Y + (float) (this.height / 2) - num2);
          if ((double) num6 < (double) num5 && Collision.CanHit(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
          {
            num5 = num6;
            num3 = num1;
            num4 = num2;
            flag = true;
          }
        }
        if (!flag)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, false))
            {
              float num1 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num2 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - num1) + Math.Abs(this.position.Y + (float) (this.height / 2) - num2);
              if ((double) num6 < (double) num5 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num5 = num6;
                num3 = num1;
                num4 = num2;
                flag = true;
              }
            }
          }
        }
        if (flag)
        {
          float num1 = num3;
          float num2 = num4;
          float num6 = num3 - this.Center.X;
          float num7 = num4 - this.Center.Y;
          int num8 = 0;
          if (this.frameCounter > 0)
            this.frameCounter = this.frameCounter - 1;
          if (this.frameCounter <= 0)
          {
            int spriteDirection = this.spriteDirection;
            this.spriteDirection = (double) num6 >= 0.0 ? 1 : -1;
            num8 = (double) num7 <= 0.0 ? ((double) Math.Abs(num7) <= (double) Math.Abs(num6) * 3.0 ? ((double) Math.Abs(num7) <= (double) Math.Abs(num6) * 2.0 ? ((double) Math.Abs(num6) <= (double) Math.Abs(num7) * 3.0 ? ((double) Math.Abs(num6) <= (double) Math.Abs(num7) * 2.0 ? 2 : 1) : 0) : 3) : 4) : 0;
            int frame = this.frame;
            if (this.type == 308)
              this.frame = num8 * 2;
            else if (this.type == 377)
              this.frame = num8;
            if ((double) this.ai[0] > 40.0 && (double) this.localAI[1] == 0.0 && this.type == 308)
              this.frame = this.frame + 1;
            if (frame != this.frame || spriteDirection != this.spriteDirection)
            {
              this.frameCounter = 8;
              if ((double) this.ai[0] <= 0.0)
                this.frameCounter = 4;
            }
          }
          if ((double) this.ai[0] <= 0.0)
          {
            this.localAI[1] = 0.0f;
            this.ai[0] = 60f;
            if (Main.myPlayer == this.owner)
            {
              float num9 = 6f;
              int Type = 309;
              if (this.type == 377)
              {
                Type = 378;
                num9 = 9f;
              }
              Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
              if (num8 == 0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @vector2.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + 12f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @vector2.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + (float) (24 * this.spriteDirection);
              }
              else if (num8 == 1)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @vector2.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + 0.0f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @vector2.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + (float) (24 * this.spriteDirection);
              }
              else if (num8 == 2)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @vector2.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 - 2f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @vector2.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + (float) (24 * this.spriteDirection);
              }
              else if (num8 == 3)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @vector2.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 - 6f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @vector2.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + (float) (14 * this.spriteDirection);
              }
              else if (num8 == 4)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @vector2.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 - 14f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @vector2.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 + (float) (2 * this.spriteDirection);
              }
              if (this.spriteDirection < 0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @vector2.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + 10f;
              }
              float num10 = num1 - vector2.X;
              float num11 = num2 - vector2.Y;
              float num12 = (float) Math.Sqrt((double) num10 * (double) num10 + (double) num11 * (double) num11);
              float num13 = num9 / num12;
              float SpeedX = num10 * num13;
              float SpeedY = num11 * num13;
              int damage = this.damage;
              Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, damage, this.knockBack, Main.myPlayer, 0.0f, 0.0f);
            }
          }
        }
        else if ((double) this.ai[0] <= 60.0 && (this.frame == 1 || this.frame == 3 || (this.frame == 5 || this.frame == 7) || this.frame == 9))
          this.frame = this.frame - 1;
        if ((double) this.ai[0] <= 0.0)
          return;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local4 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local4 = ^local4 - 1f;
      }
      else if (this.aiStyle == 54)
      {
        if (this.type == 317)
        {
          if (Main.player[Main.myPlayer].dead)
            Main.player[Main.myPlayer].raven = false;
          if (Main.player[Main.myPlayer].raven)
            this.timeLeft = 2;
        }
        for (int index = 0; index < 1000; ++index)
        {
          if (index != this.whoAmI && Main.projectile[index].active && (Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type) && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.projectile[index].position.X)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 0.05f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 0.05f;
            }
            if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 0.05f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 0.05f;
            }
          }
        }
        float num1 = this.position.X;
        float num2 = this.position.Y;
        float num3 = 900f;
        bool flag = false;
        int num4 = 500;
        if ((double) this.ai[1] != 0.0 || this.friendly)
          num4 = 1400;
        if ((double) Math.Abs(this.Center.X - Main.player[this.owner].Center.X) + (double) Math.Abs(this.Center.Y - Main.player[this.owner].Center.Y) > (double) num4)
          this.ai[0] = 1f;
        if ((double) this.ai[0] == 0.0)
        {
          this.tileCollide = true;
          NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
          if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
          {
            float num5 = minionAttackTargetNpc.position.X + (float) (minionAttackTargetNpc.width / 2);
            float num6 = minionAttackTargetNpc.position.Y + (float) (minionAttackTargetNpc.height / 2);
            float num7 = Math.Abs(this.position.X + (float) (this.width / 2) - num5) + Math.Abs(this.position.Y + (float) (this.height / 2) - num6);
            if ((double) num7 < (double) num3 && Collision.CanHit(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
            {
              num3 = num7;
              num1 = num5;
              num2 = num6;
              flag = true;
            }
          }
          if (!flag)
          {
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].CanBeChasedBy((object) this, false))
              {
                float num5 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                float num6 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                float num7 = Math.Abs(this.position.X + (float) (this.width / 2) - num5) + Math.Abs(this.position.Y + (float) (this.height / 2) - num6);
                if ((double) num7 < (double) num3 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                {
                  num3 = num7;
                  num1 = num5;
                  num2 = num6;
                  flag = true;
                }
              }
            }
          }
        }
        else
          this.tileCollide = false;
        if (!flag)
        {
          this.friendly = true;
          float num5 = 8f;
          if ((double) this.ai[0] == 1.0)
            num5 = 12f;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num6 = Main.player[this.owner].Center.X - vector2.X;
          float num7 = (float) ((double) Main.player[this.owner].Center.Y - (double) vector2.Y - 60.0);
          float num8 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7);
          if ((double) num8 < 100.0 && (double) this.ai[0] == 1.0 && !Collision.SolidCollision(this.position, this.width, this.height))
            this.ai[0] = 0.0f;
          if ((double) num8 > 2000.0)
          {
            this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
            this.position.Y = Main.player[this.owner].Center.Y - (float) (this.width / 2);
          }
          if ((double) num8 > 70.0)
          {
            float num9 = num5 / num8;
            float num10 = num6 * num9;
            float num11 = num7 * num9;
            this.velocity.X = (float) (((double) this.velocity.X * 20.0 + (double) num10) / 21.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 20.0 + (double) num11) / 21.0);
          }
          else
          {
            if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
            {
              this.velocity.X = -0.15f;
              this.velocity.Y = -0.05f;
            }
            this.velocity = this.velocity * 1.01f;
          }
          this.friendly = false;
          this.rotation = this.velocity.X * 0.05f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
          }
          if (this.frame > 3)
            this.frame = 0;
          if ((double) Math.Abs(this.velocity.X) <= 0.2)
            return;
          this.spriteDirection = -this.direction;
        }
        else
        {
          if ((double) this.ai[1] == -1.0)
            this.ai[1] = 17f;
          if ((double) this.ai[1] > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 1f;
          }
          if ((double) this.ai[1] == 0.0)
          {
            this.friendly = true;
            float num5 = 8f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num6 = num1 - vector2.X;
            float num7 = num2 - vector2.Y;
            float num8 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7);
            if ((double) num8 < 100.0)
              num5 = 10f;
            float num9 = num5 / num8;
            float num10 = num6 * num9;
            float num11 = num7 * num9;
            this.velocity.X = (float) (((double) this.velocity.X * 14.0 + (double) num10) / 15.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 14.0 + (double) num11) / 15.0);
          }
          else
          {
            this.friendly = false;
            if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 10.0)
              this.velocity = this.velocity * 1.05f;
          }
          this.rotation = this.velocity.X * 0.05f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 4)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
          }
          if (this.frame < 4)
            this.frame = 4;
          if (this.frame > 7)
            this.frame = 4;
          if ((double) Math.Abs(this.velocity.X) <= 0.2)
            return;
          this.spriteDirection = -this.direction;
        }
      }
      else if (this.aiStyle == 55)
      {
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter > 0)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame > 2)
            this.frame = 0;
        }
        if ((double) this.velocity.X < 0.0)
        {
          this.spriteDirection = -1;
          this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
        }
        else
        {
          this.spriteDirection = 1;
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
        }
        if ((double) this.ai[0] >= 0.0 && (double) this.ai[0] < 200.0)
        {
          int index1 = (int) this.ai[0];
          if (Main.npc[index1].active)
          {
            float num1 = 8f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num2 = Main.npc[index1].position.X - vector2.X;
            float num3 = Main.npc[index1].position.Y - vector2.Y;
            float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
            float num5 = num1 / num4;
            float num6 = num2 * num5;
            float num7 = num3 * num5;
            this.velocity.X = (float) (((double) this.velocity.X * 14.0 + (double) num6) / 15.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 14.0 + (double) num7) / 15.0);
          }
          else
          {
            float num1 = 1000f;
            for (int index2 = 0; index2 < 200; ++index2)
            {
              if (Main.npc[index2].CanBeChasedBy((object) this, false))
              {
                float num2 = Math.Abs(this.position.X + (float) (this.width / 2) - (Main.npc[index2].position.X + (float) (Main.npc[index2].width / 2))) + Math.Abs(this.position.Y + (float) (this.height / 2) - (Main.npc[index2].position.Y + (float) (Main.npc[index2].height / 2)));
                if ((double) num2 < (double) num1 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index2].position, Main.npc[index2].width, Main.npc[index2].height))
                {
                  num1 = num2;
                  this.ai[0] = (float) index2;
                }
              }
            }
          }
          int num = 8;
          int index3 = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 6, 0.0f, 0.0f, 0, new Color(), 1f);
          Dust dust1 = Main.dust[index3];
          dust1.velocity = dust1.velocity * 0.5f;
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity + this.velocity * 0.5f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].noLight = true;
          Main.dust[index3].scale = 1.4f;
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 56)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          this.rotation = this.ai[0];
          this.spriteDirection = -(int) this.ai[1];
        }
        if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 16.0)
          this.velocity = this.velocity * 1.05f;
        if ((double) this.velocity.X < 0.0)
          this.direction = -1;
        else
          this.direction = 1;
        this.rotation = this.rotation + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.025000000372529) * (float) this.direction;
      }
      else if (this.aiStyle == 57)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] > 30.0)
        {
          this.ai[0] = 30f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 0.25f;
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * 0.995f;
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.owner != Main.myPlayer)
          return;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local4 = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local4 = ^local4 + 1f;
        if ((double) this.localAI[0] < 4.0)
          return;
        this.localAI[0] = 0.0f;
        int num1 = 0;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == 344)
            ++num1;
        }
        float num2 = (float) this.damage * 0.8f;
        if (num1 > 100)
        {
          float num3 = (float) (1.0 - (double) (num1 - 100) / 100.0);
          num2 *= num3;
        }
        if (num1 > 100)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f;
        }
        if (num1 > 120)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f;
        }
        if (num1 > 140)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f;
        }
        if (num1 > 150)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f;
        }
        if (num1 > 160)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f;
        }
        if (num1 > 165)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f;
        }
        if (num1 > 170)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 2f;
        }
        if (num1 > 175)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 3f;
        }
        if (num1 > 180)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 4f;
        }
        if (num1 > 185)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 5f;
        }
        if (num1 > 190)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 6f;
        }
        if (num1 > 195)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 7f;
        }
        if ((double) num2 <= (double) this.damage * 0.100000001490116)
          return;
        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 344, (int) num2, this.knockBack * 0.55f, this.owner, 0.0f, (float) Main.rand.Next(3));
      }
      else if (this.aiStyle == 58)
      {
        this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] == 0.0)
        {
          this.frame = 0;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[1] > 30.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.1f;
          }
          if ((double) this.velocity.Y >= 0.0)
            this.ai[0] = 1f;
        }
        if ((double) this.ai[0] == 1.0)
        {
          this.frame = 1;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 0.1f;
          if ((double) this.velocity.Y > 3.0)
            this.velocity.Y = 3f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * 0.99f;
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      }
      else if (this.aiStyle == 59)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[1] >= 60.0)
        {
          this.friendly = true;
          int index1 = (int) this.ai[0];
          if (!Main.npc[index1].active)
          {
            int[] numArray = new int[200];
            int maxValue = 0;
            for (int index2 = 0; index2 < 200; ++index2)
            {
              if (Main.npc[index2].CanBeChasedBy((object) this, false) && (double) (Math.Abs(Main.npc[index2].position.X + (float) (Main.npc[index2].width / 2) - this.position.X + (float) (this.width / 2)) + Math.Abs(Main.npc[index2].position.Y + (float) (Main.npc[index2].height / 2) - this.position.Y + (float) (this.height / 2))) < 800.0)
              {
                numArray[maxValue] = index2;
                ++maxValue;
              }
            }
            if (maxValue == 0)
            {
              this.Kill();
              return;
            }
            index1 = numArray[Main.rand.Next(maxValue)];
            this.ai[0] = (float) index1;
          }
          float num1 = 4f;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num2 = Main.npc[index1].Center.X - vector2.X;
          float num3 = Main.npc[index1].Center.Y - vector2.Y;
          float num4 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) num3 * (double) num3);
          float num5 = num1 / num4;
          float num6 = num2 * num5;
          float num7 = num3 * num5;
          int num8 = 30;
          this.velocity.X = (this.velocity.X * (float) (num8 - 1) + num6) / (float) num8;
          this.velocity.Y = (this.velocity.Y * (float) (num8 - 1) + num7) / (float) num8;
        }
        for (int index1 = 0; index1 < 5; ++index1)
        {
          float num1 = this.velocity.X * 0.2f * (float) index1;
          float num2 = (float) -((double) this.velocity.Y * 0.200000002980232) * (float) index1;
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 175, 0.0f, 0.0f, 100, new Color(), 1.3f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 0.0f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index2].position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - num1;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index2].position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - num2;
        }
      }
      else if (this.aiStyle == 60)
      {
        this.scale = this.scale - 0.015f;
        if ((double) this.scale <= 0.0)
        {
          this.velocity = this.velocity * 5f;
          this.oldVelocity = this.velocity;
          this.Kill();
        }
        if ((double) this.ai[0] > 3.0)
        {
          int type = 103;
          if (this.type == 406)
            type = 137;
          if (this.owner == Main.myPlayer)
          {
            Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].active && !Main.npc[index].dontTakeDamage && Main.npc[index].lifeMax > 1)
              {
                Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index].position.X, (int) Main.npc[index].position.Y, Main.npc[index].width, Main.npc[index].height);
                if (rectangle1.Intersects(rectangle2))
                {
                  Main.npc[index].AddBuff(type, 1500, false);
                  this.Kill();
                }
              }
            }
            for (int index = 0; index < (int) byte.MaxValue; ++index)
            {
              if (index != this.owner && Main.player[index].active && !Main.player[index].dead)
              {
                Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.player[index].position.X, (int) Main.player[index].position.Y, Main.player[index].width, Main.player[index].height);
                if (rectangle1.Intersects(rectangle2))
                {
                  Main.player[index].AddBuff(type, 1500, false);
                  this.Kill();
                }
              }
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + this.ai[1];
          if ((double) this.ai[0] > 30.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.1f;
          }
          if (this.type == 358)
          {
            for (int index1 = 0; index1 < 1; ++index1)
            {
              for (int index2 = 0; index2 < 6; ++index2)
              {
                float num1 = this.velocity.X / 6f * (float) index2;
                float num2 = this.velocity.Y / 6f * (float) index2;
                int num3 = 6;
                int index3 = Dust.NewDust(new Vector2(this.position.X + (float) num3, this.position.Y + (float) num3), this.width - num3 * 2, this.height - num3 * 2, 211, 0.0f, 0.0f, 75, new Color(), 1.2f);
                if (Main.rand.Next(2) == 0)
                {
                  Dust dust = Main.dust[index3];
                  dust.alpha = dust.alpha + 25;
                }
                if (Main.rand.Next(2) == 0)
                {
                  Dust dust = Main.dust[index3];
                  dust.alpha = dust.alpha + 25;
                }
                if (Main.rand.Next(2) == 0)
                {
                  Dust dust = Main.dust[index3];
                  dust.alpha = dust.alpha + 25;
                }
                Main.dust[index3].noGravity = true;
                Dust dust1 = Main.dust[index3];
                dust1.velocity = dust1.velocity * 0.3f;
                Dust dust2 = Main.dust[index3];
                dust2.velocity = dust2.velocity + this.velocity * 0.5f;
                Main.dust[index3].position = this.Center;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index3].position.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 - num1;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local3 = @Main.dust[index3].position.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local3 = ^local3 - num2;
                Dust dust3 = Main.dust[index3];
                dust3.velocity = dust3.velocity * 0.2f;
              }
              if (Main.rand.Next(4) == 0)
              {
                int num = 6;
                int index2 = Dust.NewDust(new Vector2(this.position.X + (float) num, this.position.Y + (float) num), this.width - num * 2, this.height - num * 2, 211, 0.0f, 0.0f, 75, new Color(), 0.65f);
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.5f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + this.velocity * 0.5f;
              }
            }
          }
          if (this.type != 406)
            return;
          int Alpha = 175;
          Color newColor = new Color(0, 80, (int) byte.MaxValue, 100);
          for (int index1 = 0; index1 < 6; ++index1)
          {
            Vector2 vector2 = this.velocity * (float) index1 / 6f;
            int num = 6;
            int index2 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num * 2, this.height - num * 2, 4, 0.0f, 0.0f, Alpha, newColor, 1.2f);
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Main.dust[index2];
              dust.alpha = dust.alpha + 25;
            }
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Main.dust[index2];
              dust.alpha = dust.alpha + 25;
            }
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Main.dust[index2];
              dust.alpha = dust.alpha + 25;
            }
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.3f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + this.velocity * 0.5f;
            Main.dust[index2].position = this.Center;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - vector2.X;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @Main.dust[index2].position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - vector2.Y;
            Dust dust3 = Main.dust[index2];
            dust3.velocity = dust3.velocity * 0.2f;
          }
          if (Main.rand.Next(4) != 0)
            return;
          int num4 = 6;
          int index4 = Dust.NewDust(this.position + Vector2.One * 6f, this.width - num4 * 2, this.height - num4 * 2, 4, 0.0f, 0.0f, Alpha, newColor, 1.2f);
          Dust dust4 = Main.dust[index4];
          dust4.velocity = dust4.velocity * 0.5f;
          Dust dust5 = Main.dust[index4];
          dust5.velocity = dust5.velocity + this.velocity * 0.5f;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
      }
      else if (this.aiStyle == 61)
        this.AI_061_FishingBobber();
      else if (this.aiStyle == 62)
        this.AI_062();
      else if (this.aiStyle == 63)
      {
        if (!Main.player[this.owner].active)
        {
          this.active = false;
        }
        else
        {
          Vector2 vector2 = this.position;
          bool flag1 = false;
          float num1 = 500f;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this, false))
            {
              float num2 = Vector2.Distance(npc.Center, this.Center);
              if (((double) Vector2.Distance(this.Center, vector2) > (double) num2 && (double) num2 < (double) num1 || !flag1) && Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num1 = num2;
                vector2 = npc.Center;
                flag1 = true;
              }
            }
          }
          if (!flag1)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local * 0.95f;
          }
          else
          {
            float num2 = 5f;
            float num3 = 0.08f;
            if ((double) this.velocity.Y == 0.0)
            {
              bool flag2 = false;
              if ((double) this.Center.Y - 50.0 > (double) vector2.Y)
                flag2 = true;
              if (flag2)
                this.velocity.Y = -6f;
            }
            else
            {
              num2 = 8f;
              num3 = 0.12f;
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + (float) Math.Sign(vector2.X - this.Center.X) * num3;
            if ((double) this.velocity.X < -(double) num2)
              this.velocity.X = -num2;
            if ((double) this.velocity.X > (double) num2)
              this.velocity.X = num2;
          }
          float stepSpeed = 0.0f;
          Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref stepSpeed, ref this.gfxOffY, 1, false, 0);
          if ((double) this.velocity.Y != 0.0)
          {
            this.frame = 3;
          }
          else
          {
            if ((double) Math.Abs(this.velocity.X) > 0.200000002980232)
              this.frameCounter = this.frameCounter + 1;
            if (this.frameCounter >= 9)
              this.frameCounter = 0;
            this.frame = this.frameCounter < 6 ? (this.frameCounter < 3 ? 0 : 1) : 2;
          }
          if ((double) this.velocity.X != 0.0)
            this.direction = Math.Sign(this.velocity.X);
          this.spriteDirection = -this.direction;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 0.2f;
          if ((double) this.velocity.Y <= 16.0)
            return;
          this.velocity.Y = 16f;
        }
      }
      else if (this.aiStyle == 64)
      {
        int num1 = 10;
        int num2 = 15;
        float num3 = 1f;
        int num4 = 150;
        int num5 = 42;
        if (this.type == 386)
        {
          num1 = 16;
          num2 = 16;
          num3 = 1.5f;
        }
        if ((double) this.velocity.X != 0.0)
          this.direction = this.spriteDirection = -Math.Sign(this.velocity.X);
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter > 2)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
        }
        if (this.frame >= 6)
          this.frame = 0;
        if ((double) this.localAI[0] == 0.0 && Main.myPlayer == this.owner)
        {
          this.localAI[0] = 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) (this.height / 2);
          this.scale = ((float) (num1 + num2) - this.ai[1]) * num3 / (float) (num2 + num1);
          this.width = (int) ((double) num4 * (double) this.scale);
          this.height = (int) ((double) num5 * (double) this.scale);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 - (float) (this.height / 2);
          this.netUpdate = true;
        }
        if ((double) this.ai[1] != -1.0)
        {
          this.scale = ((float) (num1 + num2) - this.ai[1]) * num3 / (float) (num2 + num1);
          this.width = (int) ((double) num4 * (double) this.scale);
          this.height = (int) ((double) num5 * (double) this.scale);
        }
        if (!Collision.SolidCollision(this.position, this.width, this.height))
        {
          this.alpha = this.alpha - 30;
          if (this.alpha < 60)
            this.alpha = 60;
          if (this.type == 386 && this.alpha < 100)
            this.alpha = 100;
        }
        else
        {
          this.alpha = this.alpha + 30;
          if (this.alpha > 150)
            this.alpha = 150;
        }
        if ((double) this.ai[0] > 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local - 1f;
        }
        if ((double) this.ai[0] == 1.0 && (double) this.ai[1] > 0.0 && this.owner == Main.myPlayer)
        {
          this.netUpdate = true;
          Vector2 center = this.Center;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @center.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 - (float) ((double) num5 * (double) this.scale / 2.0);
          float num6 = (float) ((double) (num1 + num2) - (double) this.ai[1] + 1.0) * num3 / (float) (num2 + num1);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @center.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - (float) ((double) num5 * (double) num6 / 2.0);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @center.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + 2f;
          Projectile.NewProjectile(center.X, center.Y, this.velocity.X, this.velocity.Y, this.type, this.damage, this.knockBack, this.owner, 10f, this.ai[1] - 1f);
          int num7 = 4;
          if (this.type == 386)
            num7 = 2;
          if ((int) this.ai[1] % num7 == 0 && (double) this.ai[1] != 0.0)
          {
            int Type = 372;
            if (this.type == 386)
              Type = 373;
            int index = NPC.NewNPC((int) center.X, (int) center.Y, Type, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
            Main.npc[index].velocity = this.velocity;
            Main.npc[index].netUpdate = true;
            if (this.type == 386)
            {
              Main.npc[index].ai[2] = (float) this.width;
              Main.npc[index].ai[3] = -1.5f;
            }
          }
        }
        if ((double) this.ai[0] > 0.0)
          return;
        float num8 = (float) Math.PI / 30f;
        float num9 = (float) this.width / 5f;
        if (this.type == 386)
          num9 *= 2f;
        float num10 = (float) (Math.Cos((double) num8 * -(double) this.ai[0]) - 0.5) * num9;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local5 = @this.position.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local5 = ^local5 - num10 * (float) -this.direction;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local6 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local6 = ^local6 - 1f;
        float num11 = (float) (Math.Cos((double) num8 * -(double) this.ai[0]) - 0.5) * num9;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local7 = @this.position.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local7 = ^local7 + num11 * (float) -this.direction;
      }
      else if (this.aiStyle == 65)
      {
        if ((double) this.ai[1] > 0.0)
        {
          int index1 = (int) this.ai[1] - 1;
          if (index1 < (int) byte.MaxValue)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
            if ((double) this.localAI[0] > 10.0)
            {
              int num = 6;
              for (int index2 = 0; index2 < num; ++index2)
              {
                Vector2 vector2_1 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width / 2f, (float) this.height) * 0.75f).RotatedBy((double) (index2 - (num / 2 - 1)) * Math.PI / (double) num, new Vector2()) + this.Center;
                Vector2 vector2_2 = ((float) (Main.rand.NextDouble() * 3.14159274101257) - 1.570796f).ToRotationVector2() * (float) Main.rand.Next(3, 8);
                int index3 = Dust.NewDust(vector2_1 + vector2_2, 0, 0, 172, vector2_2.X * 2f, vector2_2.Y * 2f, 100, new Color(), 1.4f);
                Main.dust[index3].noGravity = true;
                Main.dust[index3].noLight = true;
                Dust dust1 = Main.dust[index3];
                dust1.velocity = dust1.velocity / 4f;
                Dust dust2 = Main.dust[index3];
                dust2.velocity = dust2.velocity - this.velocity;
              }
              this.alpha = this.alpha - 5;
              if (this.alpha < 100)
                this.alpha = 100;
              this.rotation = this.rotation + this.velocity.X * 0.1f;
              this.frame = (int) ((double) this.localAI[0] / 3.0) % 3;
            }
            Vector2 vector2 = Main.player[index1].Center - this.Center;
            float num1 = 4f + this.localAI[0] / 20f;
            this.velocity = Vector2.Normalize(vector2) * num1;
            if ((double) vector2.Length() < 50.0)
              this.Kill();
          }
        }
        else
        {
          float num1 = 0.2094395f;
          float num2 = 4f;
          float num3 = (float) (Math.Cos((double) num1 * (double) this.ai[0]) - 0.5) * num2;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 - num3;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 1f;
          float num4 = (float) (Math.Cos((double) num1 * (double) this.ai[0]) - 0.5) * num2;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + num4;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 + 1f;
          if ((double) this.localAI[0] > 10.0)
          {
            this.alpha = this.alpha - 5;
            if (this.alpha < 100)
              this.alpha = 100;
            this.rotation = this.rotation + this.velocity.X * 0.1f;
            this.frame = (int) ((double) this.localAI[0] / 3.0) % 3;
          }
        }
        if (!this.wet)
          return;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local5 = @this.position.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local5 = ^local5 - 16f;
        this.Kill();
      }
      else if (this.aiStyle == 66)
      {
        float num1 = 0.0f;
        float num2 = 0.0f;
        float num3 = 0.0f;
        float num4 = 0.0f;
        if (this.type == 387 || this.type == 388)
        {
          num1 = 700f;
          num2 = 800f;
          num3 = 1200f;
          num4 = 150f;
          if (Main.player[this.owner].dead)
            Main.player[this.owner].twinsMinion = false;
          if (Main.player[this.owner].twinsMinion)
            this.timeLeft = 2;
        }
        if (this.type == 533)
        {
          num1 = 1500f;
          num2 = 900f;
          num3 = 1500f;
          num4 = 450f;
          if (Main.player[this.owner].dead)
            Main.player[this.owner].DeadlySphereMinion = false;
          if (Main.player[this.owner].DeadlySphereMinion)
            this.timeLeft = 2;
        }
        float num5 = 0.05f;
        for (int index = 0; index < 1000; ++index)
        {
          bool flag = (Main.projectile[index].type == 387 || Main.projectile[index].type == 388) && (this.type == 387 || this.type == 388);
          if (!flag)
            flag = this.type == 533 && Main.projectile[index].type == 533;
          if (((index == this.whoAmI || !Main.projectile[index].active ? 0 : (Main.projectile[index].owner == this.owner ? 1 : 0)) & (flag ? 1 : 0)) != 0 && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) this.width)
          {
            if ((double) this.position.X < (double) Main.projectile[index].position.X)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - num5;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + num5;
            }
            if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - num5;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + num5;
            }
          }
        }
        if (this.type == 533)
        {
          if ((int) this.ai[0] % 3 != 2)
            Lighting.AddLight(this.Center, 0.8f, 0.3f, 0.1f);
          else
            Lighting.AddLight(this.Center, 0.3f, 0.5f, 0.7f);
        }
        bool flag1 = false;
        if ((double) this.ai[0] == 2.0 && this.type == 388)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          this.extraUpdates = 1;
          this.rotation = this.velocity.ToRotation() + 3.141593f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter > 1)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame > 2)
            this.frame = 0;
          if ((double) this.ai[1] > 40.0)
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.extraUpdates = 0;
            this.numUpdates = 0;
            this.netUpdate = true;
          }
          else
            flag1 = true;
        }
        if (this.type == 533 && (double) this.ai[0] >= 3.0 && (double) this.ai[0] <= 5.0)
        {
          int num6 = 2;
          flag1 = true;
          this.velocity = this.velocity * 0.9f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          int num7 = (int) this.ai[1] / num6 + (int) ((double) this.ai[0] - 3.0) * 8;
          this.frame = num7 >= 4 ? (num7 >= 5 ? (num7 >= 8 ? (num7 >= 11 ? (num7 >= 12 ? (num7 >= 16 ? (num7 >= 20 ? (num7 >= 21 ? num7 - 4 : 0) : 29 - num7) : num7 - 2) : 0) : 11 - num7) : 1 + num7 - 5) : 0) : 17 + num7;
          if ((double) this.ai[1] > (double) (num6 * 8))
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - 3f;
            this.ai[1] = 0.0f;
          }
        }
        if (this.type == 533 && (double) this.ai[0] >= 6.0 && (double) this.ai[0] <= 8.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          this.MaxUpdates = 2;
          this.rotation = (double) this.ai[0] != 7.0 ? this.rotation + 0.5235988f : this.velocity.ToRotation() + 3.141593f;
          int num6 = 0;
          switch (this.ai[0])
          {
            case 6f:
              this.frame = 5;
              num6 = 40;
              break;
            case 7f:
              this.frame = 13;
              num6 = 30;
              break;
            case 8f:
              this.frame = 17;
              num6 = 30;
              break;
          }
          if ((double) this.ai[1] > (double) num6)
          {
            this.ai[1] = 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - 6f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + 1f;
            this.extraUpdates = 0;
            this.numUpdates = 0;
            this.netUpdate = true;
          }
          else
            flag1 = true;
          if ((double) this.ai[0] == 8.0)
          {
            for (int index1 = 0; index1 < 4; ++index1)
            {
              int index2 = Dust.NewDust(this.Center, 0, 0, Utils.SelectRandom<int>(Main.rand, new int[3]{ 226, 228, 75 }), 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust = Main.dust[index2];
              Vector2 vector2 = Vector2.One.RotatedBy((double) index1 * 1.57079637050629, new Vector2()).RotatedBy((double) this.rotation, new Vector2());
              dust.position = this.Center + vector2 * 10f;
              dust.velocity = vector2 * 1f;
              dust.scale = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.5);
              dust.noGravity = true;
            }
          }
        }
        if (flag1)
          return;
        Vector2 Position2 = this.position;
        bool flag2 = false;
        if ((double) this.ai[0] != 1.0 && (this.type == 387 || this.type == 388))
          this.tileCollide = true;
        if (this.type == 533 && (double) this.ai[0] < 9.0)
          this.tileCollide = true;
        if (this.tileCollide && WorldGen.SolidTile(Framing.GetTileSafely((int) this.Center.X / 16, (int) this.Center.Y / 16)))
          this.tileCollide = false;
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
        {
          float num6 = Vector2.Distance(minionAttackTargetNpc.Center, this.Center);
          if (((double) Vector2.Distance(this.Center, Position2) > (double) num6 && (double) num6 < (double) num1 || !flag2) && Collision.CanHitLine(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
          {
            num1 = num6;
            Position2 = minionAttackTargetNpc.Center;
            flag2 = true;
          }
        }
        if (!flag2)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this, false))
            {
              float num6 = Vector2.Distance(npc.Center, this.Center);
              if (((double) Vector2.Distance(this.Center, Position2) > (double) num6 && (double) num6 < (double) num1 || !flag2) && Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num1 = num6;
                Position2 = npc.Center;
                flag2 = true;
              }
            }
          }
        }
        float num8 = num2;
        if (flag2)
          num8 = num3;
        Player player = Main.player[this.owner];
        if ((double) Vector2.Distance(player.Center, this.Center) > (double) num8)
        {
          if (this.type == 387 || this.type == 388)
            this.ai[0] = 1f;
          if (this.type == 533 && (double) this.ai[0] < 9.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + (float) (3 * (3 - (int) ((double) this.ai[0] / 3.0)));
          }
          this.tileCollide = false;
          this.netUpdate = true;
        }
        if (((this.type == 388 ? 1 : (this.type == 387 ? 1 : 0)) & (flag2 ? 1 : 0)) != 0 && (double) this.ai[0] == 0.0)
        {
          Vector2 vector2 = Position2 - this.Center;
          float num6 = vector2.Length();
          vector2.Normalize();
          if ((double) num6 > 200.0)
          {
            float num7 = 6f;
            if (this.type == 388)
              num7 = 8f;
            this.velocity = (this.velocity * 40f + vector2 * num7) / 41f;
          }
          else
          {
            float num7 = 4f;
            this.velocity = (this.velocity * 40f + vector2 * -num7) / 41f;
          }
        }
        else
        {
          bool flag3 = false;
          if (!flag3)
            flag3 = (double) this.ai[0] == 1.0 && (this.type == 387 || this.type == 388);
          if (!flag3)
            flag3 = (double) this.ai[0] >= 9.0 && this.type == 533;
          float num6 = 6f;
          if (this.type == 533)
            num6 = 12f;
          if (flag3)
            num6 = 15f;
          Vector2 center = this.Center;
          Vector2 vector2 = player.Center - center + new Vector2(0.0f, -60f);
          float num7 = vector2.Length();
          if ((double) num7 > 200.0 && (double) num6 < 8.0)
            num6 = 8f;
          if ((double) num7 < (double) num4 & flag3 && !Collision.SolidCollision(this.position, this.width, this.height))
          {
            if (this.type == 387 || this.type == 388)
              this.ai[0] = 0.0f;
            if (this.type == 533)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 9f;
            }
            this.netUpdate = true;
          }
          if ((double) num7 > 2000.0)
          {
            this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
            this.position.Y = Main.player[this.owner].Center.Y - (float) (this.height / 2);
            this.netUpdate = true;
          }
          if ((double) num7 > 70.0)
          {
            vector2.Normalize();
            vector2 *= num6;
            this.velocity = (this.velocity * 40f + vector2) / 41f;
          }
          else if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.velocity.X = -0.15f;
            this.velocity.Y = -0.05f;
          }
        }
        if (this.type == 388)
          this.rotation = this.velocity.ToRotation() + 3.141593f;
        if (this.type == 387)
          this.rotation = !flag2 ? this.velocity.ToRotation() + 3.141593f : (Position2 - this.Center).ToRotation() + 3.141593f;
        if (this.type == 533 && ((double) this.ai[0] < 3.0 || (double) this.ai[0] >= 9.0))
          this.rotation = this.rotation + this.velocity.X * 0.04f;
        if (this.type == 388 || this.type == 387)
        {
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter > 3)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame > 2)
            this.frame = 0;
        }
        else if (this.type == 533)
        {
          if ((double) this.ai[0] < 3.0 || (double) this.ai[0] >= 9.0)
          {
            this.frameCounter = this.frameCounter + 1;
            if (this.frameCounter >= 24)
              this.frameCounter = 0;
            int num6 = this.frameCounter / 4;
            this.frame = 4 + num6;
            switch ((int) this.ai[0])
            {
              case 0:
              case 9:
                this.frame = 4 + num6;
                break;
              case 1:
              case 10:
                this.frame = 14 + this.frameCounter / 8;
                break;
              case 2:
              case 11:
                int num7 = this.frameCounter / 3;
                if (num7 >= 4)
                  num7 -= 4;
                this.frame = 17 + num7;
                break;
            }
          }
          if ((double) this.ai[0] == 2.0 && Main.rand.Next(2) == 0)
          {
            for (int index1 = 0; index1 < 4; ++index1)
            {
              if (Main.rand.Next(2) != 0)
              {
                int index2 = Dust.NewDust(this.Center, 0, 0, Utils.SelectRandom<int>(Main.rand, new int[3]{ 226, 228, 75 }), 0.0f, 0.0f, 0, new Color(), 1f);
                Dust dust = Main.dust[index2];
                Vector2 vector2 = Vector2.One.RotatedBy((double) index1 * 1.57079637050629, new Vector2()).RotatedBy((double) this.rotation, new Vector2());
                dust.position = this.Center + vector2 * 10f;
                dust.velocity = vector2 * 1f;
                dust.scale = (float) (0.300000011920929 + (double) Main.rand.NextFloat() * 0.5);
                dust.noGravity = true;
                dust.customData = (object) this;
                dust.noLight = true;
              }
            }
          }
        }
        if ((double) this.ai[1] > 0.0 && (this.type == 387 || this.type == 388))
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + (float) Main.rand.Next(1, 4);
        }
        if ((double) this.ai[1] > 90.0 && this.type == 387)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) this.ai[1] > 40.0 && this.type == 388)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) this.ai[1] > 0.0 && this.type == 533)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[1] > 10.0)
          {
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        if ((double) this.ai[0] == 0.0 && (this.type == 387 || this.type == 388))
        {
          if (this.type == 387)
          {
            float num6 = 8f;
            int Type = 389;
            if (flag2 && (double) this.ai[1] == 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[1];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1f;
              if (Main.myPlayer == this.owner && Collision.CanHitLine(this.position, this.width, this.height, Position2, 0, 0))
              {
                Vector2 vector2_1 = Position2 - this.Center;
                vector2_1.Normalize();
                Vector2 vector2_2 = vector2_1 * num6;
                int index = Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, Type, (int) ((double) this.damage * 0.800000011920929), 0.0f, Main.myPlayer, 0.0f, 0.0f);
                Main.projectile[index].timeLeft = 300;
                this.netUpdate = true;
              }
            }
          }
          if (this.type != 388 || (double) this.ai[1] != 0.0 || (!flag2 || (double) num1 >= 500.0))
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if (Main.myPlayer != this.owner)
            return;
          this.ai[0] = 2f;
          Vector2 vector2 = Position2 - this.Center;
          vector2.Normalize();
          this.velocity = vector2 * 8f;
          this.netUpdate = true;
        }
        else
        {
          if (this.type != 533 || (double) this.ai[0] >= 3.0)
            return;
          int num6 = 0;
          switch ((int) this.ai[0])
          {
            case 0:
            case 3:
            case 6:
              num6 = 400;
              break;
            case 1:
            case 4:
            case 7:
              num6 = 400;
              break;
            case 2:
            case 5:
            case 8:
              num6 = 600;
              break;
          }
          if (!((double) this.ai[1] == 0.0 & flag2) || (double) num1 >= (double) num6)
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if (Main.myPlayer != this.owner)
            return;
          if ((double) this.localAI[0] >= 3.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 4f;
            if ((double) this.ai[0] == 6.0)
              this.ai[0] = 3f;
            this.localAI[0] = 0.0f;
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 6f;
            Vector2 vector2 = Position2 - this.Center;
            vector2.Normalize();
            float num7 = (double) this.ai[0] == 8.0 ? 12f : 10f;
            this.velocity = vector2 * num7;
            this.netUpdate = true;
          }
        }
      }
      else if (this.aiStyle == 67)
      {
        Player player = Main.player[this.owner];
        if (!player.active)
        {
          this.active = false;
        }
        else
        {
          bool flag1 = this.type == 393 || this.type == 394 || this.type == 395;
          if (flag1)
          {
            if (player.dead)
              player.pirateMinion = false;
            if (player.pirateMinion)
              this.timeLeft = 2;
          }
          if (this.type == 500)
          {
            if (player.dead)
              player.crimsonHeart = false;
            if (player.crimsonHeart)
              this.timeLeft = 2;
          }
          if (this.type == 653)
          {
            if (player.dead)
              player.companionCube = false;
            if (player.companionCube)
              this.timeLeft = 2;
          }
          Vector2 vector2_1 = player.Center;
          if (flag1)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - (float) ((15 + player.width / 2) * player.direction);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - (float) (this.minionPos * 40 * player.direction);
          }
          if (this.type == 500)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - (float) ((15 + player.width / 2) * player.direction);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - (float) (40 * player.direction);
          }
          if (this.type == 653)
          {
            float num = (float) (15 + (player.crimsonHeart ? 40 : 0));
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - (num + (float) (player.width / 2)) * (float) player.direction;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - (float) (40 * player.direction);
          }
          if (this.type == 500)
          {
            Lighting.AddLight(this.Center, 0.9f, 0.1f, 0.3f);
            int num1 = 6;
            if (this.frame == 0 || this.frame == 2)
              num1 = 12;
            int num2 = this.frameCounter + 1;
            this.frameCounter = num2;
            if (num2 >= num1)
            {
              this.frameCounter = 0;
              int num3 = this.frame + 1;
              this.frame = num3;
              if (num3 >= Main.projFrames[this.type])
                this.frame = 0;
            }
            this.rotation = this.rotation + this.velocity.X / 20f;
            Vector2 spinninpoint = (-Vector2.UnitY).RotatedBy((double) this.rotation, new Vector2()).RotatedBy((double) this.direction * 0.200000002980232, new Vector2());
            int index = Dust.NewDust(this.Center + spinninpoint * 10f - new Vector2(4f), 0, 0, 5, spinninpoint.X, spinninpoint.Y, 0, Color.Transparent, 1f);
            Main.dust[index].scale = 1f;
            Main.dust[index].velocity = spinninpoint.RotatedByRandom(0.785398185253143) * 3.5f;
            Main.dust[index].noGravity = true;
            Main.dust[index].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
          }
          Color color;
          if (this.type == 653)
          {
            this.rotation = this.rotation + this.velocity.X / 20f;
            if ((double) this.velocity.Y == 0.0)
              this.rotation = this.rotation.AngleTowards(0.0f, 0.7f);
            if (this.owner >= 0 && this.owner < (int) byte.MaxValue)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Projectile._CompanionCubeScreamCooldown[this.owner];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1f;
              if ((double) Projectile._CompanionCubeScreamCooldown[this.owner] < 0.0)
                Projectile._CompanionCubeScreamCooldown[this.owner] = 0.0f;
            }
            Tile tileSafely = Framing.GetTileSafely(this.Center);
            if ((int) tileSafely.liquid > 0 && tileSafely.lava())
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.localAI[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1f;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.localAI[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1f;
            }
            this.localAI[0] = MathHelper.Clamp(this.localAI[0], 0.0f, 20f);
            if ((double) this.localAI[0] >= 20.0)
            {
              if ((double) Projectile._CompanionCubeScreamCooldown[this.owner] == 0.0)
              {
                Projectile._CompanionCubeScreamCooldown[this.owner] = 3600f;
                Main.PlaySound(Main.rand.Next(10) == 0 ? SoundID.NPCDeath61 : SoundID.NPCDeath59, this.position);
              }
              this.Kill();
            }
            color = Lighting.GetColor((int) this.Center.X / 16, (int) this.Center.Y / 16);
            Vector3 vector3_1 = color.ToVector3();
            color = Lighting.GetColor((int) player.Center.X / 16, (int) player.Center.Y / 16);
            Vector3 vector3_2 = color.ToVector3();
            if ((double) vector3_1.Length() < 0.150000005960464 && (double) vector3_2.Length() < 0.150000005960464)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.localAI[1];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 1f;
            }
            else if ((double) this.localAI[1] > 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.localAI[1];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1f;
            }
            this.localAI[1] = MathHelper.Clamp(this.localAI[1], -3600f, 120f);
            if ((double) this.localAI[1] > (double) Main.rand.Next(30, 120) && !player.immune && player.velocity == Vector2.Zero)
            {
              if (Main.rand.Next(5) == 0)
              {
                Main.PlaySound(SoundID.Item16, this.Center);
                this.localAI[1] = -600f;
              }
              else
              {
                Main.PlaySound(SoundID.Item1, this.Center);
                player.Hurt(PlayerDeathReason.ByOther(6), 3, 0, false, false, false, -1);
                player.immune = false;
                player.immuneTime = 0;
                this.localAI[1] = (float) (Main.rand.Next(30) * -10 - 300);
              }
            }
          }
          bool flag2 = true;
          if (this.type == 500 || this.type == 653)
            flag2 = false;
          int index1 = -1;
          float num4 = 450f;
          if (flag1)
            num4 = 800f;
          int num5 = 15;
          if ((double) this.ai[0] == 0.0 & flag2)
          {
            NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
            if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
            {
              float num1 = (minionAttackTargetNpc.Center - this.Center).Length();
              if ((double) num1 < (double) num4)
              {
                index1 = minionAttackTargetNpc.whoAmI;
                num4 = num1;
              }
            }
            if (index1 < 0)
            {
              for (int index2 = 0; index2 < 200; ++index2)
              {
                NPC npc = Main.npc[index2];
                if (npc.CanBeChasedBy((object) this, false))
                {
                  float num1 = (npc.Center - this.Center).Length();
                  if ((double) num1 < (double) num4)
                  {
                    index1 = index2;
                    num4 = num1;
                  }
                }
              }
            }
          }
          if ((double) this.ai[0] == 1.0)
          {
            this.tileCollide = false;
            float num1 = 0.2f;
            float num2 = 10f;
            int num3 = 200;
            if ((double) num2 < (double) Math.Abs(player.velocity.X) + (double) Math.Abs(player.velocity.Y))
              num2 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
            Vector2 vector2_2 = player.Center - this.Center;
            float num6 = vector2_2.Length();
            if ((double) num6 > 2000.0)
              this.position = player.Center - new Vector2((float) this.width, (float) this.height) / 2f;
            if ((double) num6 < (double) num3 && (double) player.velocity.Y == 0.0 && ((double) this.position.Y + (double) this.height <= (double) player.position.Y + (double) player.height && !Collision.SolidCollision(this.position, this.width, this.height)))
            {
              this.ai[0] = 0.0f;
              this.netUpdate = true;
              if ((double) this.velocity.Y < -6.0)
                this.velocity.Y = -6f;
            }
            if ((double) num6 >= 60.0)
            {
              vector2_2.Normalize();
              vector2_2 *= num2;
              if ((double) this.velocity.X < (double) vector2_2.X)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num1;
                if ((double) this.velocity.X < 0.0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local2 = @this.velocity.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local2 = ^local2 + num1 * 1.5f;
                }
              }
              if ((double) this.velocity.X > (double) vector2_2.X)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 - num1;
                if ((double) this.velocity.X > 0.0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local2 = @this.velocity.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local2 = ^local2 - num1 * 1.5f;
                }
              }
              if ((double) this.velocity.Y < (double) vector2_2.Y)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num1;
                if ((double) this.velocity.Y < 0.0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local2 = @this.velocity.Y;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local2 = ^local2 + num1 * 1.5f;
                }
              }
              if ((double) this.velocity.Y > (double) vector2_2.Y)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 - num1;
                if ((double) this.velocity.Y > 0.0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local2 = @this.velocity.Y;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local2 = ^local2 - num1 * 1.5f;
                }
              }
            }
            if ((double) this.velocity.X != 0.0)
              this.spriteDirection = Math.Sign(this.velocity.X);
            if (flag1)
            {
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 3)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame < 10 | this.frame > 13)
                this.frame = 10;
              this.rotation = this.velocity.X * 0.1f;
            }
          }
          if ((double) this.ai[0] == 2.0)
          {
            this.friendly = true;
            this.spriteDirection = this.direction;
            this.rotation = 0.0f;
            this.frame = 4 + (int) ((double) num5 - (double) this.ai[1]) / (num5 / 3);
            if ((double) this.velocity.Y != 0.0)
              this.frame = this.frame + 3;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 0.4f;
            if ((double) this.velocity.Y > 10.0)
              this.velocity.Y = 10f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - 1f;
            if ((double) this.ai[1] <= 0.0)
            {
              this.ai[1] = 0.0f;
              this.ai[0] = 0.0f;
              this.friendly = false;
              this.netUpdate = true;
              return;
            }
          }
          if (index1 >= 0)
          {
            float num1 = 400f;
            float num2 = 20f;
            if (flag1)
              num1 = 700f;
            if ((double) this.position.Y > Main.worldSurface * 16.0)
              num1 *= 0.7f;
            NPC npc = Main.npc[index1];
            Vector2 center = npc.Center;
            float num3 = (center - this.Center).Length();
            Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height);
            if ((double) num3 < (double) num1)
            {
              vector2_1 = center;
              if ((double) center.Y < (double) this.Center.Y - 30.0 && (double) this.velocity.Y == 0.0)
              {
                float num6 = Math.Abs(center.Y - this.Center.Y);
                if ((double) num6 < 120.0)
                  this.velocity.Y = -10f;
                else if ((double) num6 < 210.0)
                  this.velocity.Y = -13f;
                else if ((double) num6 < 270.0)
                  this.velocity.Y = -15f;
                else if ((double) num6 < 310.0)
                  this.velocity.Y = -17f;
                else if ((double) num6 < 380.0)
                  this.velocity.Y = -18f;
              }
            }
            if ((double) num3 < (double) num2)
            {
              this.ai[0] = 2f;
              this.ai[1] = (float) num5;
              this.netUpdate = true;
            }
          }
          if ((double) this.ai[0] == 0.0 && index1 < 0)
          {
            float num1 = 500f;
            if (this.type == 500)
              num1 = 200f;
            if (this.type == 653)
              num1 = 170f;
            if (Main.player[this.owner].rocketDelay2 > 0)
            {
              this.ai[0] = 1f;
              this.netUpdate = true;
            }
            Vector2 vector2_2 = player.Center - this.Center;
            if ((double) vector2_2.Length() > 2000.0)
              this.position = player.Center - new Vector2((float) this.width, (float) this.height) / 2f;
            else if ((double) vector2_2.Length() > (double) num1 || (double) Math.Abs(vector2_2.Y) > 300.0)
            {
              this.ai[0] = 1f;
              this.netUpdate = true;
              if ((double) this.velocity.Y > 0.0 && (double) vector2_2.Y < 0.0)
                this.velocity.Y = 0.0f;
              if ((double) this.velocity.Y < 0.0 && (double) vector2_2.Y > 0.0)
                this.velocity.Y = 0.0f;
            }
          }
          if ((double) this.ai[0] == 0.0)
          {
            this.tileCollide = true;
            float num1 = 0.5f;
            float num2 = 4f;
            float num3 = 4f;
            float num6 = 0.1f;
            if ((double) num3 < (double) Math.Abs(player.velocity.X) + (double) Math.Abs(player.velocity.Y))
            {
              num3 = Math.Abs(player.velocity.X) + Math.Abs(player.velocity.Y);
              num1 = 0.7f;
            }
            int num7 = 0;
            bool flag3 = false;
            float num8 = vector2_1.X - this.Center.X;
            if ((double) Math.Abs(num8) > 5.0)
            {
              if ((double) num8 < 0.0)
              {
                num7 = -1;
                if ((double) this.velocity.X > -(double) num2)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @this.velocity.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local - num1;
                }
                else
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @this.velocity.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local - num6;
                }
              }
              else
              {
                num7 = 1;
                if ((double) this.velocity.X < (double) num2)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @this.velocity.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local + num1;
                }
                else
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @this.velocity.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local + num6;
                }
              }
              if (!flag1)
                flag3 = true;
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local * 0.9f;
              if ((double) Math.Abs(this.velocity.X) < (double) num1 * 2.0)
                this.velocity.X = 0.0f;
            }
            if (num7 != 0)
            {
              int num9 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
              int num10 = (int) this.position.Y / 16;
              int i = num9 + num7 + (int) this.velocity.X;
              for (int j = num10; j < num10 + this.height / 16 + 1; ++j)
              {
                if (WorldGen.SolidTile(i, j))
                  flag3 = true;
              }
            }
            if (this.type == 500 && (double) this.velocity.X != 0.0)
              flag3 = true;
            if (this.type == 653 && (double) this.velocity.X != 0.0)
              flag3 = true;
            Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
            if ((double) this.velocity.Y == 0.0 && flag3)
            {
              for (int index2 = 0; index2 < 3; ++index2)
              {
                int i1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                if (index2 == 0)
                  i1 = (int) this.position.X / 16;
                if (index2 == 2)
                  i1 = (int) ((double) this.position.X + (double) this.width) / 16;
                int j = (int) ((double) this.position.Y + (double) this.height) / 16;
                if (WorldGen.SolidTile(i1, j) || Main.tile[i1, j].halfBrick() || (int) Main.tile[i1, j].slope() > 0 || TileID.Sets.Platforms[(int) Main.tile[i1, j].type] && Main.tile[i1, j].active() && !Main.tile[i1, j].inActive())
                {
                  try
                  {
                    int num9 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                    int num10 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                    int i2 = num9 + num7 + (int) this.velocity.X;
                    if (!WorldGen.SolidTile(i2, num10 - 1) && !WorldGen.SolidTile(i2, num10 - 2))
                      this.velocity.Y = -5.1f;
                    else if (!WorldGen.SolidTile(i2, num10 - 2))
                      this.velocity.Y = -7.1f;
                    else if (WorldGen.SolidTile(i2, num10 - 5))
                      this.velocity.Y = -11.1f;
                    else if (WorldGen.SolidTile(i2, num10 - 4))
                      this.velocity.Y = -10.1f;
                    else
                      this.velocity.Y = -9.1f;
                  }
                  catch
                  {
                    this.velocity.Y = -9.1f;
                  }
                }
              }
            }
            if ((double) this.velocity.X > (double) num3)
              this.velocity.X = num3;
            if ((double) this.velocity.X < -(double) num3)
              this.velocity.X = -num3;
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            if ((double) this.velocity.X > (double) num1 && num7 == 1)
              this.direction = 1;
            if ((double) this.velocity.X < -(double) num1 && num7 == -1)
              this.direction = -1;
            this.spriteDirection = this.direction;
            if (flag1)
            {
              this.rotation = 0.0f;
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) Math.Abs(this.velocity.X) >= 0.5)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 10)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 4)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y != 0.0)
              {
                this.frameCounter = 0;
                this.frame = 14;
              }
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 0.4f;
            if ((double) this.velocity.Y > 10.0)
              this.velocity.Y = 10f;
          }
          if (!flag1)
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + 1f;
          if ((double) this.velocity.X == 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 1f;
          }
          if ((double) this.localAI[0] < (double) Main.rand.Next(900, 1200))
            return;
          this.localAI[0] = 0.0f;
          for (int index2 = 0; index2 < 6; ++index2)
          {
            Vector2 Position = this.Center + Vector2.UnitX * (float) -this.direction * 8f - Vector2.One * 5f + Vector2.UnitY * 8f;
            int Width = 3;
            int Height = 6;
            int Type = 216;
            double num1 = (double) -this.direction;
            double num2 = 1.0;
            int Alpha = 0;
            color = new Color();
            Color newColor = color;
            double num3 = 1.0;
            int index3 = Dust.NewDust(Position, Width, Height, Type, (float) num1, (float) num2, Alpha, newColor, (float) num3);
            Dust dust = Main.dust[index3];
            dust.velocity = dust.velocity / 2f;
            Main.dust[index3].scale = 0.8f;
          }
          int index4 = Gore.NewGore(this.Center + Vector2.UnitX * (float) -this.direction * 8f, Vector2.Zero, Main.rand.Next(580, 583), 1f);
          Gore gore = Main.gore[index4];
          gore.velocity = gore.velocity / 2f;
          Main.gore[index4].velocity.Y = Math.Abs(Main.gore[index4].velocity.Y);
          Main.gore[index4].velocity.X = -Math.Abs(Main.gore[index4].velocity.X) * (float) this.direction;
        }
      }
      else if (this.aiStyle == 68)
      {
        this.rotation = this.rotation + 0.25f * (float) this.direction;
        bool flag1 = this.type == 399;
        bool flag2 = this.type == 669;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] >= 3.0)
        {
          this.alpha = this.alpha - 40;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if ((double) this.ai[0] >= 15.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 0.2f;
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * 0.99f;
        }
        if (this.alpha == 0)
        {
          if (flag1)
          {
            Vector2 spinningpoint = new Vector2(4f, -8f);
            float rotation = this.rotation;
            if (this.direction == -1)
              spinningpoint.X = -4f;
            Vector2 vector2 = spinningpoint.RotatedBy((double) rotation, new Vector2());
            for (int index1 = 0; index1 < 1; ++index1)
            {
              int index2 = Dust.NewDust(this.Center + vector2 - Vector2.One * 5f, 4, 4, 6, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].scale = 1.5f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].velocity = Main.dust[index2].velocity * 0.25f + Vector2.Normalize(vector2) * 1f;
              Main.dust[index2].velocity = Main.dust[index2].velocity.RotatedBy(-1.57079637050629 * (double) this.direction, new Vector2());
            }
          }
          if (flag2)
          {
            for (int index1 = 0; index1 < 2; ++index1)
            {
              Vector2 spinningpoint = new Vector2(MathHelper.Lerp(-8f, 8f, Main.rand.NextFloat()), -4f);
              float rotation = this.rotation;
              spinningpoint = spinningpoint.RotatedBy((double) rotation, new Vector2());
              int index2 = Dust.NewDust(this.Center + spinningpoint - Vector2.One * 5f, 4, 4, 4, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].scale = (float) (0.800000011920929 - (double) Main.rand.NextFloat() * 0.200000002980232);
              Main.dust[index2].velocity = Main.dust[index2].velocity * 0.25f + Vector2.Normalize(spinningpoint) * 1f;
              Main.dust[index2].velocity = Main.dust[index2].velocity.RotatedBy(-1.57079637050629 * (double) this.direction, new Vector2());
              Main.dust[index2].color = Utils.SelectRandom<Color>(Main.rand, new Color[2]
              {
                new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 110),
                new Color(245, 200, 30, 110)
              });
            }
          }
        }
        this.spriteDirection = this.direction;
        if (this.owner == Main.myPlayer && this.timeLeft <= 3)
        {
          this.tileCollide = false;
          this.alpha = (int) byte.MaxValue;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + (float) (this.height / 2);
          this.width = 80;
          this.height = 80;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 - (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 - (float) (this.height / 2);
          this.knockBack = 8f;
        }
        if (!this.wet || this.timeLeft <= 3)
          return;
        this.timeLeft = 3;
      }
      else if (this.aiStyle == 69)
      {
        Vector2 v = Main.player[this.owner].Center - this.Center;
        this.rotation = v.ToRotation() - 1.57f;
        if (Main.player[this.owner].dead)
        {
          this.Kill();
        }
        else
        {
          Main.player[this.owner].itemAnimation = 10;
          Main.player[this.owner].itemTime = 10;
          double x = (double) v.X;
          if ((double) v.X < 0.0)
          {
            Main.player[this.owner].ChangeDir(1);
            this.direction = 1;
          }
          else
          {
            Main.player[this.owner].ChangeDir(-1);
            this.direction = -1;
          }
          Main.player[this.owner].itemRotation = (v * -1f * (float) this.direction).ToRotation();
          this.spriteDirection = (double) v.X > 0.0 ? -1 : 1;
          if ((double) this.ai[0] == 0.0 && (double) v.Length() > 400.0)
            this.ai[0] = 1f;
          if ((double) this.ai[0] == 1.0 || (double) this.ai[0] == 2.0)
          {
            float num1 = v.Length();
            if ((double) num1 > 1500.0)
            {
              this.Kill();
              return;
            }
            if ((double) num1 > 600.0)
              this.ai[0] = 2f;
            this.tileCollide = false;
            float num2 = 20f;
            if ((double) this.ai[0] == 2.0)
              num2 = 40f;
            this.velocity = Vector2.Normalize(v) * num2;
            if ((double) v.Length() < (double) num2)
            {
              this.Kill();
              return;
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[1] > 5.0)
            this.alpha = 0;
          if ((int) this.ai[1] % 4 != 0 || this.owner != Main.myPlayer)
            return;
          Vector2 vector2_1 = v * -1f;
          vector2_1.Normalize();
          Vector2 vector2_2 = (vector2_1 * ((float) Main.rand.Next(45, 65) * 0.1f)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.57079637050629, new Vector2());
          Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, 405, this.damage, this.knockBack, this.owner, -10f, 0.0f);
        }
      }
      else if (this.aiStyle == 70)
      {
        if ((double) this.ai[0] == 0.0)
        {
          float num1 = 500f;
          int num2 = -1;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this, false) && Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height))
            {
              float num3 = (npc.Center - this.Center).Length();
              if ((double) num3 < (double) num1)
              {
                num2 = index;
                num1 = num3;
              }
            }
          }
          this.ai[0] = (float) (num2 + 1);
          if ((double) this.ai[0] == 0.0)
            this.ai[0] = -15f;
          if ((double) this.ai[0] > 0.0)
          {
            float num3 = (float) Main.rand.Next(35, 75) / 30f;
            this.velocity = (this.velocity * 20f + Vector2.Normalize(Main.npc[(int) this.ai[0] - 1].Center - this.Center + new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101))) * num3) / 21f;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[0] > 0.0)
        {
          this.velocity = (this.velocity * 40f + Vector2.Normalize(Main.npc[(int) this.ai[0] - 1].Center - this.Center) * 12f) / 41f;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          this.alpha = this.alpha - 25;
          if (this.alpha < 50)
            this.alpha = 50;
          this.velocity = this.velocity * 0.95f;
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = (float) Main.rand.Next(80, 121) / 100f;
          this.netUpdate = true;
        }
        this.scale = this.ai[1];
      }
      else if (this.aiStyle == 71)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.localAI[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.localAI[1] > 10.0 && Main.rand.Next(3) == 0)
        {
          int num = 6;
          for (int index1 = 0; index1 < num; ++index1)
          {
            Vector2 vector2_1 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width, (float) this.height) / 2f).RotatedBy((double) (index1 - (num / 2 - 1)) * Math.PI / (double) num, new Vector2()) + this.Center;
            Vector2 vector2_2 = ((float) (Main.rand.NextDouble() * 3.14159274101257) - 1.570796f).ToRotationVector2() * (float) Main.rand.Next(3, 8);
            int index2 = Dust.NewDust(vector2_1 + vector2_2, 0, 0, 217, vector2_2.X * 2f, vector2_2.Y * 2f, 100, new Color(), 1.4f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].noLight = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity / 4f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity - this.velocity;
          }
          this.alpha = this.alpha - 5;
          if (this.alpha < 50)
            this.alpha = 50;
          this.rotation = this.rotation + this.velocity.X * 0.1f;
          this.frame = (int) ((double) this.localAI[1] / 3.0) % 3;
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.1f, 0.4f, 0.6f);
        }
        int num1 = -1;
        Vector2 vector2 = this.Center;
        float num2 = 500f;
        if ((double) this.localAI[0] > 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f;
        }
        if ((double) this.ai[0] == 0.0 && (double) this.localAI[0] == 0.0)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this, false) && ((double) this.ai[0] == 0.0 || (double) this.ai[0] == (double) (index + 1)))
            {
              Vector2 center = npc.Center;
              float num3 = Vector2.Distance(center, vector2);
              if ((double) num3 < (double) num2 && Collision.CanHit(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num2 = num3;
                vector2 = center;
                num1 = index;
              }
            }
          }
          if (num1 >= 0)
          {
            this.ai[0] = (float) (num1 + 1);
            this.netUpdate = true;
          }
        }
        if ((double) this.localAI[0] == 0.0 && (double) this.ai[0] == 0.0)
          this.localAI[0] = 30f;
        bool flag = false;
        if ((double) this.ai[0] != 0.0)
        {
          int index = (int) ((double) this.ai[0] - 1.0);
          if (Main.npc[index].active && !Main.npc[index].dontTakeDamage && Main.npc[index].immune[this.owner] == 0)
          {
            if ((double) (Math.Abs(this.position.X + (float) (this.width / 2) - (Main.npc[index].position.X + (float) (Main.npc[index].width / 2))) + Math.Abs(this.position.Y + (float) (this.height / 2) - (Main.npc[index].position.Y + (float) (Main.npc[index].height / 2)))) < 1000.0)
            {
              flag = true;
              vector2 = Main.npc[index].Center;
            }
          }
          else
          {
            this.ai[0] = 0.0f;
            flag = false;
            this.netUpdate = true;
          }
        }
        if (flag)
        {
          double num3 = (double) (vector2 - this.Center).ToRotation() - (double) this.velocity.ToRotation();
          if (num3 > Math.PI)
            num3 -= 2.0 * Math.PI;
          if (num3 < -1.0 * Math.PI)
            num3 += 2.0 * Math.PI;
          this.velocity = this.velocity.RotatedBy(num3 * 0.100000001490116, new Vector2());
        }
        float num4 = this.velocity.Length();
        this.velocity.Normalize();
        this.velocity = this.velocity * (num4 + 1f / 400f);
      }
      else if (this.aiStyle == 72)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.localAI[0] > 5.0)
        {
          this.alpha = this.alpha - 25;
          if (this.alpha < 50)
            this.alpha = 50;
        }
        this.velocity = this.velocity * 0.96f;
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = (float) Main.rand.Next(60, 121) / 100f;
          this.netUpdate = true;
        }
        this.scale = this.ai[1];
        this.position = this.Center;
        int num1 = 14;
        int num2 = 14;
        this.width = (int) ((double) num1 * (double) this.ai[1]);
        this.height = (int) ((double) num2 * (double) this.ai[1]);
        this.position = this.position - new Vector2((float) (this.width / 2), (float) (this.height / 2));
      }
      else if (this.aiStyle == 73)
      {
        int index1 = (int) this.ai[0];
        int index2 = (int) this.ai[1];
        Tile tile = Main.tile[index1, index2];
        if (tile == null || !tile.active() || (int) tile.type != 338)
        {
          this.Kill();
        }
        else
        {
          float num1 = 2f;
          float num2 = (float) this.timeLeft / 60f;
          if ((double) num2 < 1.0)
            num1 *= num2;
          if (this.type == 419)
          {
            for (int index3 = 0; index3 < 2; ++index3)
            {
              Vector2 vector2 = new Vector2(0.0f, -num1);
              vector2 = (vector2 * (float) (0.850000023841858 + Main.rand.NextDouble() * 0.200000002980232)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.57079637050629, new Vector2());
              int index4 = Dust.NewDust(this.position, this.width, this.height, 222, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust1 = Main.dust[index4];
              dust1.scale = (float) (1.0 + Main.rand.NextDouble() * 0.300000011920929);
              Dust dust2 = dust1;
              dust2.velocity = dust2.velocity * 0.5f;
              if ((double) dust1.velocity.Y > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @dust1.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * -1f;
              }
              Dust dust3 = dust1;
              dust3.position = dust3.position - new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
              Dust dust4 = dust1;
              dust4.velocity = dust4.velocity + vector2;
              dust1.scale = 0.6f;
              dust1.fadeIn = dust1.scale + 0.2f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @dust1.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 * 2f;
            }
          }
          if (this.type == 420)
          {
            for (int index3 = 0; index3 < 2; ++index3)
            {
              Vector2 vector2 = new Vector2(0.0f, -num1);
              vector2 = (vector2 * (float) (0.850000023841858 + Main.rand.NextDouble() * 0.200000002980232)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.57079637050629, new Vector2());
              int Type = 219;
              if (Main.rand.Next(5) == 0)
                Type = 222;
              int index4 = Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust1 = Main.dust[index4];
              dust1.scale = (float) (1.0 + Main.rand.NextDouble() * 0.300000011920929);
              Dust dust2 = dust1;
              dust2.velocity = dust2.velocity * 0.5f;
              if ((double) dust1.velocity.Y > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @dust1.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * -1f;
              }
              Dust dust3 = dust1;
              dust3.position = dust3.position - new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
              Dust dust4 = dust1;
              dust4.velocity = dust4.velocity + vector2;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @dust1.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 * 0.5f;
              dust1.scale = 0.6f;
              dust1.fadeIn = dust1.scale + 0.2f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @dust1.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 2f;
            }
          }
          if (this.type == 421)
          {
            for (int index3 = 0; index3 < 2; ++index3)
            {
              Vector2 vector2 = new Vector2(0.0f, -num1);
              vector2 = (vector2 * (float) (0.850000023841858 + Main.rand.NextDouble() * 0.200000002980232)).RotatedBy((Main.rand.NextDouble() - 0.5) * 0.785398185253143, new Vector2());
              int index4 = Dust.NewDust(this.position, this.width, this.height, 221, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust1 = Main.dust[index4];
              dust1.scale = (float) (1.0 + Main.rand.NextDouble() * 0.300000011920929);
              Dust dust2 = dust1;
              dust2.velocity = dust2.velocity * 0.1f;
              if ((double) dust1.velocity.Y > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @dust1.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * -1f;
              }
              Dust dust3 = dust1;
              dust3.position = dust3.position - new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
              Dust dust4 = dust1;
              dust4.velocity = dust4.velocity + vector2;
              dust1.scale = 0.6f;
              dust1.fadeIn = dust1.scale + 0.2f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @dust1.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 * 2.5f;
            }
            if (this.timeLeft % 10 == 0)
            {
              float num3 = (float) (0.850000023841858 + Main.rand.NextDouble() * 0.200000002980232);
              for (int index3 = 0; index3 < 9; ++index3)
              {
                Vector2 vector2 = new Vector2((float) (index3 - 4) / 5f, -num1 * num3);
                int index4 = Dust.NewDust(this.position, this.width, this.height, 222, 0.0f, 0.0f, 100, new Color(), 1f);
                Dust dust1 = Main.dust[index4];
                dust1.scale = (float) (0.699999988079071 + Main.rand.NextDouble() * 0.300000011920929);
                Dust dust2 = dust1;
                dust2.velocity = dust2.velocity * 0.0f;
                if ((double) dust1.velocity.Y > 0.0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @dust1.velocity.Y;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local * -1f;
                }
                Dust dust3 = dust1;
                dust3.position = dust3.position - new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
                Dust dust4 = dust1;
                dust4.velocity = dust4.velocity + vector2;
                dust1.scale = 0.6f;
                dust1.fadeIn = dust1.scale + 0.2f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @dust1.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 * 2f;
              }
            }
          }
          if (this.type != 422)
            return;
          for (int index3 = 0; index3 < 2; ++index3)
          {
            Vector2 vector2 = new Vector2(0.0f, -num1);
            vector2 = (vector2 * (float) (0.850000023841858 + Main.rand.NextDouble() * 0.200000002980232)).RotatedBy((Main.rand.NextDouble() - 0.5) * 1.57079637050629, new Vector2());
            int index4 = Dust.NewDust(this.position, this.width, this.height, 219 + Main.rand.Next(5), 0.0f, 0.0f, 100, new Color(), 1f);
            Dust dust1 = Main.dust[index4];
            dust1.scale = (float) (1.0 + Main.rand.NextDouble() * 0.300000011920929);
            Dust dust2 = dust1;
            dust2.velocity = dust2.velocity * 0.5f;
            if ((double) dust1.velocity.Y > 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @dust1.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local * -1f;
            }
            Dust dust3 = dust1;
            dust3.position = dust3.position - new Vector2((float) (2 + Main.rand.Next(-2, 3)), 0.0f);
            Dust dust4 = dust1;
            dust4.velocity = dust4.velocity + vector2;
            dust1.scale = 0.6f;
            dust1.fadeIn = dust1.scale + 0.2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @dust1.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * 2f;
          }
        }
      }
      else if (this.aiStyle == 74)
      {
        if (this.extraUpdates != 1)
          return;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 * this.localAI[1];
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @this.localAI[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 - 1f / 1000f;
        if ((double) this.localAI[0] >= 0.01)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 75)
        this.AI_075();
      else if (this.aiStyle == 76)
      {
        Player mountedPlayer = Main.player[this.owner];
        mountedPlayer.heldProj = this.whoAmI;
        if (this.type == 441)
        {
          if (mountedPlayer.mount.Type != 9)
          {
            this.Kill();
            return;
          }
        }
        else if (this.type == 453 && mountedPlayer.mount.Type != 8)
        {
          this.Kill();
          return;
        }
        if (Main.myPlayer == this.owner)
        {
          this.position.X = Main.screenPosition.X + (float) Main.mouseX;
          this.position.Y = Main.screenPosition.Y + (float) Main.mouseY;
          if ((double) this.ai[0] != (double) this.position.X - (double) mountedPlayer.position.X || (double) this.ai[1] != (double) this.position.Y - (double) mountedPlayer.position.Y)
            this.netUpdate = true;
          this.ai[0] = this.position.X - mountedPlayer.position.X;
          this.ai[1] = this.position.Y - mountedPlayer.position.Y;
          mountedPlayer.mount.AimAbility(mountedPlayer, this.position);
          if (mountedPlayer.channel)
            return;
          mountedPlayer.mount.UseAbility(mountedPlayer, this.position, false);
          this.Kill();
        }
        else
        {
          this.position.X = mountedPlayer.position.X + this.ai[0];
          this.position.Y = mountedPlayer.position.Y + this.ai[1];
          if (this.type == 441)
          {
            if (!mountedPlayer.mount.AbilityCharging)
              mountedPlayer.mount.StartAbilityCharge(mountedPlayer);
          }
          else if (this.type == 453 && !mountedPlayer.mount.AbilityActive)
            mountedPlayer.mount.UseAbility(mountedPlayer, this.position, false);
          mountedPlayer.mount.AimAbility(mountedPlayer, this.position);
        }
      }
      else if (this.aiStyle == 77)
      {
        ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
        if (activeSound != null)
        {
          if ((double) activeSound.Volume == 0.0)
          {
            activeSound.Stop();
            float[] localAi = this.localAI;
            int index = 0;
            SlotId invalid = (SlotId) SlotId.Invalid;
            // ISSUE: explicit reference operation
            double num = (double) ((SlotId) @invalid).ToFloat();
            localAi[index] = (float) num;
          }
          activeSound.Volume = Math.Max(0.0f, activeSound.Volume - 0.05f);
        }
        else
        {
          float[] localAi = this.localAI;
          int index = 0;
          SlotId invalid = (SlotId) SlotId.Invalid;
          // ISSUE: explicit reference operation
          double num = (double) ((SlotId) @invalid).ToFloat();
          localAi[index] = (float) num;
        }
        if ((double) this.ai[1] == 1.0)
        {
          this.friendly = false;
          if (this.alpha < (int) byte.MaxValue)
            this.alpha = this.alpha + 51;
          if (this.alpha >= (int) byte.MaxValue)
          {
            this.alpha = (int) byte.MaxValue;
            this.Kill();
            return;
          }
        }
        else
        {
          if (this.alpha > 0)
            this.alpha = this.alpha - 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        float num1 = 30f;
        float num2 = num1 * 4f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] > (double) num2)
          this.ai[0] = 0.0f;
        Vector2 vector2 = -Vector2.UnitY.RotatedBy(6.28318548202515 * (double) this.ai[0] / (double) num1, new Vector2());
        float num3 = Math.Max((float) (0.75 + (double) vector2.Y * 0.25), (float) (0.800000011920929 - (double) vector2.Y * 0.200000002980232));
        this.position = this.position + new Vector2((float) this.width, (float) this.height) / 2f;
        this.width = this.height = (int) (80.0 * (double) num3);
        this.position = this.position - new Vector2((float) this.width, (float) this.height) / 2f;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame >= 4)
            this.frame = 0;
        }
        for (int index1 = 0; index1 < 1; ++index1)
        {
          float num4 = 55f * num3;
          float num5 = 11f * num3;
          float num6 = 0.5f;
          int index2 = Dust.NewDust(this.position, this.width, this.height, 226, 0.0f, 0.0f, 100, new Color(), 0.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 2f;
          Main.dust[index2].position = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() * (num5 + num6 * (float) Main.rand.NextDouble() * num4) + this.Center;
          Main.dust[index2].velocity = Main.dust[index2].velocity / 2f + Vector2.Normalize(Main.dust[index2].position - this.Center);
          if (Main.rand.Next(2) == 0)
          {
            int index3 = Dust.NewDust(this.position, this.width, this.height, 226, 0.0f, 0.0f, 100, new Color(), 0.9f);
            Main.dust[index3].noGravity = true;
            Dust dust2 = Main.dust[index3];
            dust2.velocity = dust2.velocity * 1.2f;
            Main.dust[index3].position = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() * (num5 + num6 * (float) Main.rand.NextDouble() * num4) + this.Center;
            Main.dust[index3].velocity = Main.dust[index3].velocity / 2f + Vector2.Normalize(Main.dust[index3].position - this.Center);
          }
          if (Main.rand.Next(4) == 0)
          {
            int index3 = Dust.NewDust(this.position, this.width, this.height, 226, 0.0f, 0.0f, 100, new Color(), 0.7f);
            Main.dust[index3].noGravity = true;
            Dust dust2 = Main.dust[index3];
            dust2.velocity = dust2.velocity * 1.2f;
            Main.dust[index3].position = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() * (num5 + num6 * (float) Main.rand.NextDouble() * num4) + this.Center;
            Main.dust[index3].velocity = Main.dust[index3].velocity / 2f + Vector2.Normalize(Main.dust[index3].position - this.Center);
          }
        }
      }
      else if (this.aiStyle == 78)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 30;
        if (this.alpha < 0)
          this.alpha = 0;
        double num = (double) this.ai[0].ToRotationVector2().ToRotation() - (double) this.velocity.ToRotation();
        if (num > Math.PI)
          num -= 2.0 * Math.PI;
        if (num < -1.0 * Math.PI)
          num += 2.0 * Math.PI;
        this.velocity = this.velocity.RotatedBy(num * 0.0500000007450581, new Vector2());
        this.velocity = this.velocity * 0.96f;
        this.rotation = this.velocity.ToRotation() - 1.570796f;
        if (Main.myPlayer != this.owner || this.timeLeft <= 60)
          return;
        this.timeLeft = 60;
      }
      else if (this.aiStyle == 79)
      {
        bool flag = true;
        int index1 = (int) this.ai[0] - 1;
        if (this.type == 447 && ((double) this.ai[0] == 0.0 || (!Main.npc[index1].active || Main.npc[index1].type != 392) && (!Main.npc[index1].active || Main.npc[index1].type != 395 || ((double) Main.npc[index1].ai[3] % 120.0 < 60.0 || (double) Main.npc[index1].ai[0] != 2.0))))
          flag = false;
        if (!flag)
        {
          this.Kill();
        }
        else
        {
          NPC npc = Main.npc[index1];
          float num1 = npc.Center.Y + 46f;
          int index2 = (int) npc.Center.X / 16;
          int index3 = (int) num1 / 16;
          int num2 = 0;
          if (Main.tile[index2, index3].nactive() && Main.tileSolid[(int) Main.tile[index2, index3].type] && !Main.tileSolidTop[(int) Main.tile[index2, index3].type])
          {
            num2 = 1;
          }
          else
          {
            for (; num2 < 150 && index3 + num2 < Main.maxTilesY; ++num2)
            {
              int index4 = index3 + num2;
              if (Main.tile[index2, index4].nactive() && Main.tileSolid[(int) Main.tile[index2, index4].type] && !Main.tileSolidTop[(int) Main.tile[index2, index4].type])
              {
                --num2;
                break;
              }
            }
          }
          this.position.X = npc.Center.X - (float) (this.width / 2);
          this.position.Y = num1;
          this.height = (num2 + 1) * 16;
          int num3 = (int) this.position.Y + this.height;
          if (Main.tile[index2, num3 / 16].nactive() && Main.tileSolid[(int) Main.tile[index2, num3 / 16].type] && !Main.tileSolidTop[(int) Main.tile[index2, num3 / 16].type])
            this.height = this.height - (num3 % 16 - 2);
          if (this.type == 447)
          {
            for (int index4 = 0; index4 < 2; ++index4)
            {
              int index5 = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 16.0)), this.width, 16, 228, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index5].noGravity = true;
              Dust dust = Main.dust[index5];
              dust.velocity = dust.velocity * 0.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index5].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - ((float) index4 - (float) ((double) npc.velocity.X * 2.0 / 3.0));
              Main.dust[index5].scale = 2.8f;
            }
            if (Main.rand.Next(5) == 0)
            {
              int index4 = Dust.NewDust(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - (double) (this.width / 2 * Math.Sign(npc.velocity.X)) - 4.0), (float) ((double) this.position.Y + (double) this.height - 16.0)), 4, 16, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust = Main.dust[index4];
              dust.velocity = dust.velocity * 0.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index4].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - npc.velocity.X / 2f;
              Main.dust[index4].velocity.Y = -Math.Abs(Main.dust[index4].velocity.Y);
            }
          }
          if (this.type != 447)
            return;
          int num4 = this.frameCounter + 1;
          this.frameCounter = num4;
          if (num4 < 5)
            return;
          this.frameCounter = 0;
          int num5 = this.frame + 1;
          this.frame = num5;
          if (num5 < 4)
            return;
          this.frame = 0;
        }
      }
      else if (this.aiStyle == 80)
      {
        if ((double) this.ai[0] == 0.0 && (double) this.ai[1] > 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local - 1f;
        }
        else if ((double) this.ai[0] == 0.0 && (double) this.ai[1] == 0.0)
        {
          this.ai[0] = 1f;
          this.ai[1] = (float) Player.FindClosest(this.position, this.width, this.height);
          this.netUpdate = true;
          this.velocity = Vector2.Normalize(this.velocity) * (this.velocity.Length() + 4f);
          for (int index1 = 0; index1 < 8; ++index1)
          {
            Vector2 vector2 = (Vector2.UnitX * -8f + -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 4.0, new Vector2()) * new Vector2(2f, 8f)).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
            int index2 = Dust.NewDust(this.Center, 0, 0, 228, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].scale = 1.5f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + vector2;
            Main.dust[index2].velocity = this.velocity * 0.0f;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          this.tileCollide = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          float num1 = 180f;
          float num2 = 0.0f;
          float num3 = 30f;
          if ((double) this.localAI[1] == (double) num1)
          {
            this.Kill();
            return;
          }
          if ((double) this.localAI[1] >= (double) num2 && (double) this.localAI[1] < (double) num2 + (double) num3)
          {
            double num4 = (double) (Main.player[(int) this.ai[1]].Center - this.Center).ToRotation() - (double) this.velocity.ToRotation();
            if (num4 > Math.PI)
              num4 -= 2.0 * Math.PI;
            if (num4 < -1.0 * Math.PI)
              num4 += 2.0 * Math.PI;
            this.velocity = this.velocity.RotatedBy(num4 * 0.200000002980232, new Vector2());
          }
          if ((double) this.localAI[1] % 5.0 == 0.0)
          {
            for (int index1 = 0; index1 < 4; ++index1)
            {
              Vector2 vector2 = (Vector2.UnitX * -8f + -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 4.0, new Vector2()) * new Vector2(2f, 4f)).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
              int index2 = Dust.NewDust(this.Center, 0, 0, 228, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].scale = 1.5f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].position = this.Center + vector2;
              Main.dust[index2].velocity = this.velocity * 0.0f;
            }
          }
        }
        this.rotation = this.velocity.ToRotation() + 1.570796f;
        int num5 = this.frameCounter + 1;
        this.frameCounter = num5;
        if (num5 >= 3)
        {
          this.frameCounter = 0;
          int num1 = this.frame + 1;
          this.frame = num1;
          if (num1 >= 3)
            this.frame = 0;
        }
        for (int index1 = 0; (double) index1 < 1.0 + (double) this.ai[0]; ++index1)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedBy((double) this.rotation, new Vector2()) * 8f * (float) (index1 + 1);
          int index2 = Dust.NewDust(this.Center, 0, 0, 228, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].position = this.Center + vector2;
          Main.dust[index2].scale = 1f;
          Main.dust[index2].noGravity = true;
        }
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          Player player = Main.player[index];
          if (player.active && !player.dead && (double) Vector2.Distance(player.Center, this.Center) <= 42.0)
          {
            this.Kill();
            break;
          }
        }
      }
      else if (this.aiStyle == 81)
      {
        int penetrate = this.penetrate;
        if ((double) this.ai[0] == 0.0)
        {
          this.tileCollide = true;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] > 7.0)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[2]{ 226, 229 });
            Vector2 center = this.Center;
            Vector2 spinningpoint = new Vector2(-16f, 16f);
            float Scale = 1f;
            spinningpoint += new Vector2(-16f, 16f);
            Vector2 vector2 = spinningpoint.RotatedBy((double) this.rotation, new Vector2());
            int num = 4;
            int index = Dust.NewDust(center + vector2 + Vector2.One * (float) -num, num * 2, num * 2, Type, 0.0f, 0.0f, 100, new Color(), Scale);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.1f;
            if (Main.rand.Next(6) != 0)
              Main.dust[index].noGravity = true;
          }
          float num1 = 0.01f;
          int num2 = 5;
          int num3 = num2 * 15;
          int num4 = 0;
          if ((double) this.localAI[0] > 7.0)
          {
            if ((double) this.localAI[1] == 0.0)
            {
              this.scale = this.scale - num1;
              this.alpha = this.alpha + num2;
              if (this.alpha > num3)
              {
                this.alpha = num3;
                this.localAI[1] = 1f;
              }
            }
            else if ((double) this.localAI[1] == 1.0)
            {
              this.scale = this.scale + num1;
              this.alpha = this.alpha - num2;
              if (this.alpha <= num4)
              {
                this.alpha = num4;
                this.localAI[1] = 0.0f;
              }
            }
          }
          this.rotation = this.velocity.ToRotation() + 0.7853982f;
        }
        else if ((double) this.ai[0] >= 1.0 && (double) this.ai[0] < (double) (1 + penetrate))
        {
          this.tileCollide = false;
          this.alpha = this.alpha + 15;
          this.velocity = this.velocity * 0.98f;
          this.localAI[0] = 0.0f;
          if (this.alpha >= (int) byte.MaxValue)
          {
            if ((double) this.ai[0] == 1.0)
            {
              this.Kill();
              return;
            }
            int num1 = -1;
            Vector2 vector2 = this.Center;
            float num2 = 250f;
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.CanBeChasedBy((object) this, false))
              {
                Vector2 center = npc.Center;
                float num3 = Vector2.Distance(center, this.Center);
                if ((double) num3 < (double) num2)
                {
                  num2 = num3;
                  vector2 = center;
                  num1 = index;
                }
              }
            }
            if (num1 >= 0)
            {
              this.netUpdate = true;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.ai[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + (float) penetrate;
              this.position = vector2 + ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() * 100f - new Vector2((float) this.width, (float) this.height) / 2f;
              this.velocity = Vector2.Normalize(vector2 - this.Center) * 15f;
              this.rotation = this.velocity.ToRotation() + 0.7853982f;
            }
            else
              this.Kill();
          }
          if (Main.rand.Next(3) == 0)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[2]{ 226, 229 });
            Vector2 center = this.Center;
            Vector2 spinningpoint = new Vector2(-16f, 16f);
            spinningpoint = spinningpoint;
            float Scale = 0.6f;
            spinningpoint += new Vector2(-16f, 16f);
            Vector2 vector2 = spinningpoint.RotatedBy((double) this.rotation, new Vector2());
            int num = 4;
            int index = Dust.NewDust(center + vector2 + Vector2.One * (float) -num, num * 2, num * 2, Type, 0.0f, 0.0f, 100, new Color(), Scale);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.1f;
            Main.dust[index].noGravity = true;
          }
        }
        else if ((double) this.ai[0] >= (double) (1 + penetrate) && (double) this.ai[0] < (double) (1 + penetrate * 2))
        {
          this.scale = 0.9f;
          this.tileCollide = false;
          this.rotation = this.velocity.ToRotation() + 0.7853982f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[1] >= 15.0)
          {
            this.alpha = this.alpha + 51;
            this.velocity = this.velocity * 0.8f;
            if (this.alpha >= (int) byte.MaxValue)
              this.Kill();
          }
          else
          {
            this.alpha = this.alpha - 125;
            if (this.alpha < 0)
              this.alpha = 0;
            this.velocity = this.velocity * 0.98f;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 1f;
          int Type = Utils.SelectRandom<int>(Main.rand, new int[2]{ 226, 229 });
          Vector2 center = this.Center;
          Vector2 vector2_1 = new Vector2(-16f, 16f);
          float Scale = 0.6f;
          Vector2 vector2_2 = (vector2_1 + new Vector2(-16f, 16f)).RotatedBy((double) this.rotation, new Vector2());
          int num = 4;
          int index = Dust.NewDust(center + vector2_2 + Vector2.One * (float) -num, num * 2, num * 2, Type, 0.0f, 0.0f, 100, new Color(), Scale);
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.1f;
          Main.dust[index].noGravity = true;
        }
        float num5 = (float) this.alpha / (float) byte.MaxValue;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f * num5, 0.4f * num5, 1f * num5);
      }
      else if (this.aiStyle == 82)
      {
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] == 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.localAI[0] >= 45.0)
          {
            this.localAI[0] = 0.0f;
            this.ai[0] = 1f;
            this.ai[1] = -this.ai[1];
            this.netUpdate = true;
          }
          this.velocity.X = this.velocity.RotatedBy((double) this.ai[1], new Vector2()).X;
          this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 0.08f;
          if ((double) this.velocity.Y > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - 0.2f;
          }
          if ((double) this.velocity.Y < -7.0)
            this.velocity.Y = -7f;
        }
        else if ((double) this.ai[0] == 1.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.localAI[0] >= 90.0)
          {
            this.localAI[0] = 0.0f;
            this.ai[0] = 2f;
            this.ai[1] = (float) Player.FindClosest(this.position, this.width, this.height);
            this.netUpdate = true;
          }
          this.velocity.X = this.velocity.RotatedBy((double) this.ai[1], new Vector2()).X;
          this.velocity.X = MathHelper.Clamp(this.velocity.X, -6f, 6f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 0.08f;
          if ((double) this.velocity.Y > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - 0.2f;
          }
          if ((double) this.velocity.Y < -7.0)
            this.velocity.Y = -7f;
        }
        else if ((double) this.ai[0] == 2.0)
        {
          Vector2 vector2 = Main.player[(int) this.ai[1]].Center - this.Center;
          if ((double) vector2.Length() < 30.0)
          {
            this.Kill();
            return;
          }
          vector2.Normalize();
          vector2 *= 14f;
          vector2 = Vector2.Lerp(this.velocity, vector2, 0.6f);
          if ((double) vector2.Y < 6.0)
            vector2.Y = 6f;
          float num = 0.4f;
          if ((double) this.velocity.X < (double) vector2.X)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + num;
            if ((double) this.velocity.X < 0.0 && (double) vector2.X > 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + num;
            }
          }
          else if ((double) this.velocity.X > (double) vector2.X)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - num;
            if ((double) this.velocity.X > 0.0 && (double) vector2.X < 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - num;
            }
          }
          if ((double) this.velocity.Y < (double) vector2.Y)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + num;
            if ((double) this.velocity.Y < 0.0 && (double) vector2.Y > 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + num;
            }
          }
          else if ((double) this.velocity.Y > (double) vector2.Y)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - num;
            if ((double) this.velocity.Y > 0.0 && (double) vector2.Y < 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - num;
            }
          }
        }
        if (this.alpha < 40)
        {
          int index = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 229, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 1.2f);
          Main.dust[index].noGravity = true;
        }
        this.rotation = this.velocity.ToRotation() + 1.570796f;
      }
      else if (this.aiStyle == 83)
      {
        if (this.alpha > 200)
          this.alpha = 200;
        this.alpha = this.alpha - 5;
        if (this.alpha < 0)
          this.alpha = 0;
        this.scale = 1f - (float) this.alpha / (float) byte.MaxValue;
        if ((double) this.ai[0] >= 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        if ((double) this.ai[0] == -1.0)
        {
          this.frame = 1;
          this.extraUpdates = 1;
        }
        else if ((double) this.ai[0] < 30.0)
        {
          this.position = Main.npc[(int) this.ai[1]].Center - new Vector2((float) this.width, (float) this.height) / 2f - this.velocity;
        }
        else
        {
          this.velocity = this.velocity * 0.96f;
          int num1 = this.frameCounter + 1;
          this.frameCounter = num1;
          if (num1 >= 6)
          {
            this.frameCounter = 0;
            int num2 = this.frame + 1;
            this.frame = num2;
            if (num2 >= 2)
              this.frame = 0;
          }
        }
        if (this.alpha >= 40)
          return;
        for (int index1 = 0; index1 < 2; ++index1)
        {
          float num = (float) (Main.rand.NextDouble() * 1.0 - 0.5);
          if ((double) num < -0.5)
            num = -0.5f;
          if ((double) num > 0.5)
            num = 0.5f;
          Vector2 vector2 = new Vector2((float) -this.width * 0.65f * this.scale, 0.0f).RotatedBy((double) num * 6.28318548202515, new Vector2()).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
          int index2 = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 229, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 0.7f);
          Main.dust[index2].velocity = Vector2.Zero;
          Main.dust[index2].position = this.Center + vector2;
          Main.dust[index2].noGravity = true;
        }
      }
      else if (this.aiStyle == 84)
      {
        Vector2? nullable = new Vector2?();
        if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
          this.velocity = -Vector2.UnitY;
        if (this.type == 455 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 396)
        {
          Vector2 vector2_1 = new Vector2(27f, 59f);
          Vector2 vector2_2 = Utils.Vector2FromElipse(Main.npc[(int) this.ai[1]].localAI[0].ToRotationVector2(), vector2_1 * Main.npc[(int) this.ai[1]].localAI[1]);
          this.position = Main.npc[(int) this.ai[1]].Center + vector2_2 - new Vector2((float) this.width, (float) this.height) / 2f;
        }
        else if (this.type == 455 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 400)
        {
          Vector2 vector2_1 = new Vector2(30f, 30f);
          Vector2 vector2_2 = Utils.Vector2FromElipse(Main.npc[(int) this.ai[1]].localAI[0].ToRotationVector2(), vector2_1 * Main.npc[(int) this.ai[1]].localAI[1]);
          this.position = Main.npc[(int) this.ai[1]].Center + vector2_2 - new Vector2((float) this.width, (float) this.height) / 2f;
        }
        else if (this.type == 537 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 411)
        {
          Vector2 vector2 = new Vector2((float) (Main.npc[(int) this.ai[1]].direction * 6), -4f);
          this.position = Main.npc[(int) this.ai[1]].Center + vector2 - this.Size / 2f + new Vector2(0.0f, -Main.npc[(int) this.ai[1]].gfxOffY);
        }
        else if (this.type == 461 && Main.projectile[(int) this.ai[1]].active && Main.projectile[(int) this.ai[1]].type == 460)
        {
          Vector2 vector2 = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
          this.position = Main.projectile[(int) this.ai[1]].Center + vector2 * 16f - new Vector2((float) this.width, (float) this.height) / 2f + new Vector2(0.0f, -Main.projectile[(int) this.ai[1]].gfxOffY);
          this.velocity = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
        }
        else if (this.type == 642 && Main.projectile[(int) this.ai[1]].active && Main.projectile[(int) this.ai[1]].type == 641)
        {
          this.Center = Main.projectile[(int) this.ai[1]].Center;
          this.velocity = Vector2.Normalize(Main.projectile[(int) this.ai[1]].ai[1].ToRotationVector2());
        }
        else if (this.type == 632 && Main.projectile[(int) this.ai[1]].active && Main.projectile[(int) this.ai[1]].type == 633)
        {
          float num1 = (float) (int) this.ai[0] - 2.5f;
          Vector2 vector2_1 = Vector2.Normalize(Main.projectile[(int) this.ai[1]].velocity);
          Projectile projectile = Main.projectile[(int) this.ai[1]];
          float num2 = num1 * 0.5235988f;
          Vector2 zero = Vector2.Zero;
          float num3;
          float y;
          float num4;
          float num5;
          if ((double) projectile.ai[0] < 180.0)
          {
            num3 = (float) (1.0 - (double) projectile.ai[0] / 180.0);
            y = (float) (20.0 - (double) projectile.ai[0] / 180.0 * 14.0);
            if ((double) projectile.ai[0] < 120.0)
            {
              num4 = (float) (20.0 - 4.0 * ((double) projectile.ai[0] / 120.0));
              this.Opacity = (float) ((double) projectile.ai[0] / 120.0 * 0.400000005960464);
            }
            else
            {
              num4 = (float) (16.0 - 10.0 * (((double) projectile.ai[0] - 120.0) / 60.0));
              this.Opacity = (float) (0.400000005960464 + ((double) projectile.ai[0] - 120.0) / 60.0 * 0.600000023841858);
            }
            num5 = (float) ((double) projectile.ai[0] / 180.0 * 20.0 - 22.0);
          }
          else
          {
            num3 = 0.0f;
            num4 = 1.75f;
            y = 6f;
            this.Opacity = 1f;
            num5 = -2f;
          }
          float num6 = (float) (((double) projectile.ai[0] + (double) num1 * (double) num4) / ((double) num4 * 6.0) * 6.28318548202515);
          float num7 = Vector2.UnitY.RotatedBy((double) num6, new Vector2()).Y * 0.5235988f * num3;
          Vector2 vector2_2 = (Vector2.UnitY.RotatedBy((double) num6, new Vector2()) * new Vector2(4f, y)).RotatedBy((double) projectile.velocity.ToRotation(), new Vector2());
          this.position = projectile.Center + vector2_1 * 16f - this.Size / 2f + new Vector2(0.0f, -Main.projectile[(int) this.ai[1]].gfxOffY);
          this.position = this.position + projectile.velocity.ToRotation().ToRotationVector2() * num5;
          this.position = this.position + vector2_2;
          this.velocity = Vector2.Normalize(projectile.velocity).RotatedBy((double) num7, new Vector2());
          this.scale = (float) (1.39999997615814 * (1.0 - (double) num3));
          this.damage = projectile.damage;
          if ((double) projectile.ai[0] >= 180.0)
          {
            this.damage = this.damage * 3;
            nullable = new Vector2?(projectile.Center);
          }
          if (!Collision.CanHitLine(Main.player[this.owner].Center, 0, 0, projectile.Center, 0, 0))
            nullable = new Vector2?(Main.player[this.owner].Center);
          this.friendly = (double) projectile.ai[0] > 30.0;
        }
        else
        {
          this.Kill();
          return;
        }
        if (this.velocity.HasNaNs() || this.velocity == Vector2.Zero)
          this.velocity = -Vector2.UnitY;
        if (this.type == 461)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] >= 300.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.ai[0] * 3.14159274101257 / 300.0) * 10f;
          if ((double) this.scale > 1.0)
            this.scale = 1f;
        }
        if (this.type == 455)
        {
          if ((double) this.localAI[0] == 0.0)
            Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 104, 1f, 0.0f);
          float num = 1f;
          if (Main.npc[(int) this.ai[1]].type == 400)
            num = 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] >= 180.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.localAI[0] * 3.14159274101257 / 180.0) * 10f * num;
          if ((double) this.scale > (double) num)
            this.scale = num;
        }
        if (this.type == 642)
        {
          float num = 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] >= 50.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.localAI[0] * 3.14159274101257 / 50.0) * 10f * num;
          if ((double) this.scale > (double) num)
            this.scale = num;
        }
        if (this.type == 537)
        {
          float num = 0.8f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] >= 60.0)
          {
            this.Kill();
            return;
          }
          this.scale = (float) Math.Sin((double) this.localAI[0] * 3.14159274101257 / 60.0) * 10f * num;
          if ((double) this.scale > (double) num)
            this.scale = num;
        }
        float rotation1 = this.velocity.ToRotation();
        if (this.type == 455)
          rotation1 += this.ai[0];
        this.rotation = rotation1 - 1.570796f;
        this.velocity = rotation1.ToRotationVector2();
        float num8 = 0.0f;
        float num9 = 0.0f;
        Vector2 center = this.Center;
        if (nullable.HasValue)
          center = nullable.Value;
        if (this.type == 455)
        {
          num8 = 3f;
          num9 = (float) this.width;
        }
        else if (this.type == 461)
        {
          num8 = 2f;
          num9 = 0.0f;
        }
        else if (this.type == 642)
        {
          num8 = 2f;
          num9 = 0.0f;
        }
        else if (this.type == 632)
        {
          num8 = 2f;
          num9 = 0.0f;
        }
        else if (this.type == 537)
        {
          num8 = 2f;
          num9 = 0.0f;
        }
        float[] samples = new float[(int) num8];
        Collision.LaserScan(center, this.velocity, num9 * this.scale, 2400f, samples);
        float num10 = 0.0f;
        for (int index = 0; index < samples.Length; ++index)
          num10 += samples[index];
        float num11 = num10 / num8;
        float amount = 0.5f;
        if (this.type == 632)
          amount = 0.75f;
        this.localAI[1] = MathHelper.Lerp(this.localAI[1], num11, amount);
        if (this.type == 455)
        {
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 14f);
          for (int index1 = 0; index1 < 2; ++index1)
          {
            float num1 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
            float num2 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
            Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
            int index2 = Dust.NewDust(Position, 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.7f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
        }
        else if (this.type == 642)
        {
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 14f);
          for (int index1 = 0; index1 < 2; ++index1)
          {
            float num1 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
            float num2 = (float) (Main.rand.NextDouble() * 2.0 + 2.0);
            Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
            int index2 = Dust.NewDust(Position, 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.7f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.3f, 0.65f, 0.7f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
        }
        if (this.type == 461)
        {
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 8f);
          for (int index1 = 0; index1 < 2; ++index1)
          {
            float num1 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
            float num2 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
            Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
            int index2 = Dust.NewDust(Position, 0, 0, 226, vector2.X, vector2.Y, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.2f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
        }
        if (this.type == 537)
        {
          Vector2 Position = this.Center + this.velocity * (this.localAI[1] - 8f);
          for (int index1 = 0; index1 < 2; ++index1)
          {
            float num1 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
            float num2 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
            Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
            int index2 = Dust.NewDust(Position, 0, 0, 226, vector2.X, vector2.Y, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.2f;
          }
          if (Main.rand.Next(5) == 0)
          {
            Vector2 vector2 = this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
            int index = Dust.NewDust(Position + vector2 - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 0.5f;
            Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
          }
          DelegateMethods.v3_1 = new Vector3(0.4f, 0.85f, 0.9f);
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
        }
        if (this.type != 632 || (double) Math.Abs(this.localAI[1] - num11) >= 100.0 || (double) this.scale <= 0.150000005960464)
          return;
        Color rgb = Main.hslToRgb(this.GetPrismHue(this.ai[0]), 1f, 0.5f);
        rgb.A = (byte) 0;
        Vector2 Position1 = this.Center + this.velocity * (this.localAI[1] - 14.5f * this.scale);
        float x = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
        for (int index = 0; index < 2; ++index)
        {
          float num1 = this.velocity.ToRotation() + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
          float num2 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
          Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
          int dustIndex = Dust.NewDust(Position1, 0, 0, 267, vector2.X, vector2.Y, 0, new Color(), 1f);
          Main.dust[dustIndex].color = rgb;
          Main.dust[dustIndex].scale = 1.2f;
          if ((double) this.scale > 1.0)
          {
            Dust dust1 = Main.dust[dustIndex];
            dust1.velocity = dust1.velocity * this.scale;
            Dust dust2 = Main.dust[dustIndex];
            dust2.scale = dust2.scale * this.scale;
          }
          Main.dust[dustIndex].noGravity = true;
          if ((double) this.scale != 1.39999997615814)
          {
            Dust dust1 = Dust.CloneDust(dustIndex);
            dust1.color = Color.White;
            Dust dust2 = dust1;
            dust2.scale = dust2.scale / 2f;
          }
          float Hue = (float) (((double) x + (double) Main.rand.NextFloat() * 0.400000005960464) % 1.0);
          Main.dust[dustIndex].color = Color.Lerp(rgb, Main.hslToRgb(Hue, 1f, 0.75f), this.scale / 1.4f);
        }
        if (Main.rand.Next(5) == 0)
        {
          Vector2 vector2 = this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width;
          int index = Dust.NewDust(Position1 + vector2 - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.5f;
          Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
        }
        DelegateMethods.v3_1 = rgb.ToVector3() * 0.3f;
        float num12 = 0.1f * (float) Math.Sin((double) Main.GlobalTime * 20.0);
        Vector2 size = new Vector2(this.velocity.Length() * this.localAI[1], (float) this.width * this.scale);
        float rotation2 = this.velocity.ToRotation();
        if (Main.netMode != 2)
          ((WaterShaderData) Filters.Scene["WaterDistortion"].GetShader()).QueueRipple(this.position + new Vector2(size.X * 0.5f, 0.0f).RotatedBy((double) rotation2, new Vector2()), new Color(0.5f, (float) (0.100000001490116 * (double) Math.Sign(num12) + 0.5), 0.0f, 1f) * Math.Abs(num12), size, RippleShape.Square, rotation2);
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * this.localAI[1], (float) this.width * this.scale, new Utils.PerLinePoint(DelegateMethods.CastLight));
      }
      else if (this.aiStyle == 85)
      {
        Vector2 vector2_1 = new Vector2(0.0f, 216f);
        this.alpha = this.alpha - 15;
        if (this.alpha < 0)
          this.alpha = 0;
        int index1 = (int) Math.Abs(this.ai[0]) - 1;
        int index2 = (int) this.ai[1];
        if (!Main.npc[index1].active || Main.npc[index1].type != 396)
        {
          this.Kill();
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.localAI[0] >= 330.0 && (double) this.ai[0] > 0.0 && Main.netMode != 1)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * -1f;
            this.netUpdate = true;
          }
          if (Main.netMode != 1 && (double) this.ai[0] > 0.0 && (!Main.player[(int) this.ai[1]].active || Main.player[(int) this.ai[1]].dead))
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * -1f;
            this.netUpdate = true;
          }
          this.rotation = (Main.npc[(int) Math.Abs(this.ai[0]) - 1].Center - Main.player[(int) this.ai[1]].Center + vector2_1).ToRotation() + 1.570796f;
          if ((double) this.ai[0] > 0.0)
          {
            Vector2 vector2_2 = Main.player[(int) this.ai[1]].Center - this.Center;
            if ((double) vector2_2.X != 0.0 || (double) vector2_2.Y != 0.0)
              this.velocity = Vector2.Normalize(vector2_2) * Math.Min(16f, vector2_2.Length());
            else
              this.velocity = Vector2.Zero;
            if ((double) vector2_2.Length() >= 20.0 || (double) this.localAI[1] != 0.0)
              return;
            this.localAI[1] = 1f;
            int time1 = 840;
            if (Main.expertMode)
              time1 = 960;
            Main.player[index2].AddBuff(145, time1, true);
          }
          else
          {
            Vector2 vector2_2 = Main.npc[(int) Math.Abs(this.ai[0]) - 1].Center - this.Center + vector2_1;
            if ((double) vector2_2.X != 0.0 || (double) vector2_2.Y != 0.0)
              this.velocity = Vector2.Normalize(vector2_2) * Math.Min(16f, vector2_2.Length());
            else
              this.velocity = Vector2.Zero;
            if ((double) vector2_2.Length() >= 20.0)
              return;
            this.Kill();
          }
        }
      }
      else if (this.aiStyle == 86)
      {
        if ((double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          Main.PlaySound(SoundID.Item120, this.position);
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[1] == 1.0)
        {
          this.alpha = (double) this.ai[0] < 130.0 ? this.alpha - 10 : this.alpha + 10;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
          if ((double) this.ai[0] >= 150.0)
          {
            this.Kill();
          }
          else
          {
            if ((double) this.ai[0] % 30.0 == 0.0 && Main.netMode != 1)
            {
              Vector2 rotationVector2 = this.rotation.ToRotationVector2();
              Projectile.NewProjectile(this.Center.X, this.Center.Y, rotationVector2.X, rotationVector2.Y, 464, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            }
            this.rotation = this.rotation + (float) Math.PI / 30f;
            Lighting.AddLight(this.Center, 0.3f, 0.75f, 0.9f);
          }
        }
        else
        {
          this.position = this.position - this.velocity;
          this.alpha = (double) this.ai[0] < 40.0 ? this.alpha - 40 : this.alpha + 3;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
          if ((double) this.ai[0] >= 45.0)
          {
            this.Kill();
          }
          else
          {
            Vector2 spinningpoint = new Vector2(0.0f, -720f).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) ((double) this.ai[0] % 45.0 / 45.0);
            for (int index1 = 0; index1 < 6; ++index1)
            {
              Vector2 position = this.Center + spinningpoint.RotatedBy((double) index1 * 6.28318548202515 / 6.0, new Vector2());
              Lighting.AddLight(position, 0.3f, 0.75f, 0.9f);
              for (int index2 = 0; index2 < 2; ++index2)
              {
                int index3 = Dust.NewDust(position + Utils.RandomVector2(Main.rand, -8f, 8f) / 2f, 8, 8, 197, 0.0f, 0.0f, 100, Color.Transparent, 1f);
                Main.dust[index3].noGravity = true;
              }
            }
          }
        }
      }
      else if (this.aiStyle == 87)
      {
        this.position.Y = this.ai[0];
        this.height = (int) this.ai[1];
        if ((double) this.Center.X > (double) Main.player[this.owner].Center.X)
          this.direction = 1;
        else
          this.direction = -1;
        this.velocity.X = (float) this.direction * 1E-06f;
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && index != this.whoAmI && (Main.projectile[index].type == this.type && Main.projectile[index].owner == this.owner) && Main.projectile[index].timeLeft > this.timeLeft)
            {
              this.Kill();
              return;
            }
          }
        }
        float num = (float) (this.width * this.height) * 0.0045f;
        for (int index1 = 0; (double) index1 < (double) num; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 75, 0.0f, 0.0f, 100, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 0.5f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 - 0.5f;
          Main.dust[index2].scale = 1.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index2].position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 6f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index2].position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - 2f;
        }
      }
      else if (this.aiStyle == 88)
      {
        if (this.type == 465)
        {
          if ((double) this.localAI[1] == 0.0)
          {
            Main.PlaySound(SoundID.Item121, this.position);
            this.localAI[1] = 1f;
          }
          if ((double) this.ai[0] < 180.0)
          {
            this.alpha = this.alpha - 5;
            if (this.alpha < 0)
              this.alpha = 0;
          }
          else
          {
            this.alpha = this.alpha + 5;
            if (this.alpha > (int) byte.MaxValue)
            {
              this.alpha = (int) byte.MaxValue;
              this.Kill();
              return;
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] % 30.0 == 0.0 && (double) this.ai[0] < 180.0 && Main.netMode != 1)
          {
            int[] numArray = new int[5];
            Vector2[] vector2Array = new Vector2[5];
            int index1 = 0;
            float num1 = 2000f;
            for (int index2 = 0; index2 < (int) byte.MaxValue; ++index2)
            {
              if (Main.player[index2].active && !Main.player[index2].dead)
              {
                Vector2 center = Main.player[index2].Center;
                if ((double) Vector2.Distance(center, this.Center) < (double) num1 && Collision.CanHit(this.Center, 1, 1, center, 1, 1))
                {
                  numArray[index1] = index2;
                  vector2Array[index1] = center;
                  int num2 = index1 + 1;
                  index1 = num2;
                  if (num2 >= vector2Array.Length)
                    break;
                }
              }
            }
            for (int index2 = 0; index2 < index1; ++index2)
            {
              Vector2 vector2_1 = vector2Array[index2] - this.Center;
              float ai1 = (float) Main.rand.Next(100);
              Vector2 vector2_2 = Vector2.Normalize(vector2_1.RotatedByRandom(0.785398185253143)) * 7f;
              Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, 466, this.damage, 0.0f, Main.myPlayer, vector2_1.ToRotation(), ai1);
            }
          }
          Lighting.AddLight(this.Center, 0.4f, 0.85f, 0.9f);
          int num3 = this.frameCounter + 1;
          this.frameCounter = num3;
          if (num3 >= 4)
          {
            this.frameCounter = 0;
            int num1 = this.frame + 1;
            this.frame = num1;
            if (num1 >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (this.alpha >= 150 || (double) this.ai[0] >= 180.0)
            return;
          for (int index1 = 0; index1 < 1; ++index1)
          {
            float num1 = (float) (Main.rand.NextDouble() * 1.0 - 0.5);
            if ((double) num1 < -0.5)
              num1 = -0.5f;
            if ((double) num1 > 0.5)
              num1 = 0.5f;
            Vector2 vector2 = new Vector2((float) -this.width * 0.2f * this.scale, 0.0f).RotatedBy((double) num1 * 6.28318548202515, new Vector2()).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 226, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 0.7f);
            Main.dust[index2].position = this.Center + vector2;
            Main.dust[index2].velocity = Vector2.Normalize(Main.dust[index2].position - this.Center) * 2f;
            Main.dust[index2].noGravity = true;
          }
          for (int index1 = 0; index1 < 1; ++index1)
          {
            float num1 = (float) (Main.rand.NextDouble() * 1.0 - 0.5);
            if ((double) num1 < -0.5)
              num1 = -0.5f;
            if ((double) num1 > 0.5)
              num1 = 0.5f;
            Vector2 vector2 = new Vector2((float) -this.width * 0.6f * this.scale, 0.0f).RotatedBy((double) num1 * 6.28318548202515, new Vector2()).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.Center - Vector2.One * 5f, 10, 10, 226, (float) (-(double) this.velocity.X / 3.0), (float) (-(double) this.velocity.Y / 3.0), 150, Color.Transparent, 0.7f);
            Main.dust[index2].velocity = Vector2.Zero;
            Main.dust[index2].position = this.Center + vector2;
            Main.dust[index2].noGravity = true;
          }
        }
        else if (this.type == 466)
        {
          this.frameCounter = this.frameCounter + 1;
          Lighting.AddLight(this.Center, 0.3f, 0.45f, 0.5f);
          if (this.velocity == Vector2.Zero)
          {
            if (this.frameCounter >= this.extraUpdates * 2)
            {
              this.frameCounter = 0;
              bool flag = true;
              for (int index = 1; index < this.oldPos.Length; ++index)
              {
                if (this.oldPos[index] != this.oldPos[0])
                  flag = false;
              }
              if (flag)
              {
                this.Kill();
                return;
              }
            }
            if (Main.rand.Next(this.extraUpdates) != 0)
              return;
            for (int index1 = 0; index1 < 2; ++index1)
            {
              float num1 = this.rotation + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
              float num2 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
              Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
              int index2 = Dust.NewDust(this.Center, 0, 0, 226, vector2.X, vector2.Y, 0, new Color(), 1f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].scale = 1.2f;
            }
            if (Main.rand.Next(5) != 0)
              return;
            int index3 = Dust.NewDust(this.Center + this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index3];
            dust.velocity = dust.velocity * 0.5f;
            Main.dust[index3].velocity.Y = -Math.Abs(Main.dust[index3].velocity.Y);
          }
          else
          {
            if (this.frameCounter < this.extraUpdates * 2)
              return;
            this.frameCounter = 0;
            float num1 = this.velocity.Length();
            UnifiedRandom unifiedRandom = new UnifiedRandom((int) this.ai[1]);
            int num2 = 0;
            Vector2 spinningpoint = -Vector2.UnitY;
            Vector2 rotationVector2;
            int num3;
            do
            {
              int num4 = unifiedRandom.Next();
              this.ai[1] = (float) num4;
              rotationVector2 = ((float) ((double) (num4 % 100) / 100.0 * 6.28318548202515)).ToRotationVector2();
              if ((double) rotationVector2.Y > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @rotationVector2.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * -1f;
              }
              bool flag = false;
              if ((double) rotationVector2.Y > -0.0199999995529652)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num1 + (double) this.localAI[0] > 40.0)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num1 + (double) this.localAI[0] < -40.0)
                flag = true;
              if (flag)
              {
                num3 = num2;
                num2 = num3 + 1;
              }
              else
                goto label_3460;
            }
            while (num3 < 100);
            this.velocity = Vector2.Zero;
            this.localAI[1] = 1f;
            goto label_3461;
label_3460:
            spinningpoint = rotationVector2;
label_3461:
            if (!(this.velocity != Vector2.Zero))
              return;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) ((double) spinningpoint.X * (double) (this.extraUpdates + 1) * 2.0) * num1;
            this.velocity = spinningpoint.RotatedBy((double) this.ai[0] + 1.57079637050629, new Vector2()) * num1;
            this.rotation = this.velocity.ToRotation() + 1.570796f;
          }
        }
        else
        {
          if (this.type != 580)
            return;
          if ((double) this.localAI[1] == 0.0 && (double) this.ai[0] >= 900.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 1000f;
            this.localAI[1] = -1f;
          }
          this.frameCounter = this.frameCounter + 1;
          Lighting.AddLight(this.Center, 0.3f, 0.45f, 0.5f);
          if (this.velocity == Vector2.Zero)
          {
            if (this.frameCounter >= this.extraUpdates * 2)
            {
              this.frameCounter = 0;
              bool flag = true;
              for (int index = 1; index < this.oldPos.Length; ++index)
              {
                if (this.oldPos[index] != this.oldPos[0])
                  flag = false;
              }
              if (flag)
              {
                this.Kill();
                return;
              }
            }
            if (Main.rand.Next(this.extraUpdates) != 0 || !(this.velocity != Vector2.Zero) && Main.rand.Next((double) this.localAI[1] == 2.0 ? 2 : 6) != 0)
              return;
            for (int index1 = 0; index1 < 2; ++index1)
            {
              float num1 = this.rotation + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
              float num2 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
              Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
              int index2 = Dust.NewDust(this.Center, 0, 0, 226, vector2.X, vector2.Y, 0, new Color(), 1f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].scale = 1.2f;
            }
            if (Main.rand.Next(5) != 0)
              return;
            int index3 = Dust.NewDust(this.Center + this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index3];
            dust.velocity = dust.velocity * 0.5f;
            Main.dust[index3].velocity.Y = -Math.Abs(Main.dust[index3].velocity.Y);
          }
          else
          {
            if (this.frameCounter < this.extraUpdates * 2)
              return;
            this.frameCounter = 0;
            float num1 = this.velocity.Length();
            UnifiedRandom unifiedRandom = new UnifiedRandom((int) this.ai[1]);
            int num2 = 0;
            Vector2 spinningpoint = -Vector2.UnitY;
            Vector2 rotationVector2;
            int num3;
            do
            {
              int num4 = unifiedRandom.Next();
              this.ai[1] = (float) num4;
              rotationVector2 = ((float) ((double) (num4 % 100) / 100.0 * 6.28318548202515)).ToRotationVector2();
              if ((double) rotationVector2.Y > 0.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @rotationVector2.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * -1f;
              }
              bool flag = false;
              if ((double) rotationVector2.Y > -0.0199999995529652)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num1 + (double) this.localAI[0] > 40.0)
                flag = true;
              if ((double) rotationVector2.X * (double) (this.extraUpdates + 1) * 2.0 * (double) num1 + (double) this.localAI[0] < -40.0)
                flag = true;
              if (flag)
              {
                num3 = num2;
                num2 = num3 + 1;
              }
              else
                goto label_3495;
            }
            while (num3 < 100);
            this.velocity = Vector2.Zero;
            if ((double) this.localAI[1] < 1.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @this.localAI[1];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + 2f;
              goto label_3496;
            }
            else
              goto label_3496;
label_3495:
            spinningpoint = rotationVector2;
label_3496:
            if (!(this.velocity != Vector2.Zero))
              return;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) ((double) spinningpoint.X * (double) (this.extraUpdates + 1) * 2.0) * num1;
            this.velocity = spinningpoint.RotatedBy((double) this.ai[0] + 1.57079637050629, new Vector2()) * num1;
            this.rotation = this.velocity.ToRotation() + 1.570796f;
            if (Main.rand.Next(4) != 0 || Main.netMode == 1 || (double) this.localAI[1] != 0.0)
              return;
            Vector2 v = this.ai[0].ToRotationVector2().RotatedBy((double) Main.rand.Next(-3, 4) * 1.04719758033752 / 3.0, new Vector2()) * this.velocity.Length();
            if (Collision.CanHitLine(this.Center, 0, 0, this.Center + v * 50f, 0, 0))
              return;
            Projectile.NewProjectile(this.Center.X - v.X, this.Center.Y - v.Y, v.X, v.Y, this.type, this.damage, this.knockBack, this.owner, v.ToRotation() + 1000f, this.ai[1]);
          }
        }
      }
      else if (this.aiStyle == 89)
      {
        this.alpha = (double) this.ai[1] != -1.0 ? ((double) this.ai[0] >= 300.0 ? this.alpha + 12 : this.alpha - 5) : this.alpha + 12;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha > (int) byte.MaxValue)
          this.alpha = (int) byte.MaxValue;
        this.scale = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        this.scale = this.scale * 0.6f;
        this.rotation = this.rotation + (float) Math.PI / 210f;
        if ((double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          Main.PlaySound(SoundID.Item123, this.position);
        }
        if (this.alpha == 0)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            float num = (float) Main.rand.Next(2, 4);
            float scale = this.scale;
            if (index1 == 1)
            {
              scale *= 0.42f;
              num *= -0.75f;
            }
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
            vector2.Normalize();
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0.0f, 0.0f, 100, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].noLight = true;
            Main.dust[index2].position = this.Center + vector2 * 204f * scale;
            if (Main.rand.Next(8) == 0)
            {
              Main.dust[index2].velocity = vector2 * -num * 2f;
              Dust dust = Main.dust[index2];
              dust.scale = dust.scale + 0.5f;
            }
            else
              Main.dust[index2].velocity = vector2 * -num;
          }
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] >= 60.0)
        {
          int num1 = (int) ((double) this.ai[0] - 0.0) / 60;
          float num2 = this.scale * 0.4f;
          for (int index1 = 0; index1 < 1; ++index1)
          {
            float num3 = (float) Main.rand.Next(1, 3);
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
            vector2.Normalize();
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0.0f, 0.0f, 100, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].noLight = true;
            Main.dust[index2].position = this.Center;
            if (Main.rand.Next(2) == 0)
            {
              Main.dust[index2].velocity = vector2 * num3 * 2f;
              Dust dust = Main.dust[index2];
              dust.scale = dust.scale + 0.5f;
            }
            else
              Main.dust[index2].velocity = vector2 * num3;
            Main.dust[index2].fadeIn = 2f;
          }
        }
        if ((double) this.ai[0] == 300.0 && (double) this.ai[1] != -1.0 && Main.netMode != 1)
          this.ai[1] = NPC.AnyNPCs(454) ? (float) NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 521, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue) : (float) NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 454, 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
        else if ((double) this.ai[0] == 320.0)
        {
          this.Kill();
          return;
        }
        bool flag = false;
        if ((double) this.ai[1] == -1.0)
        {
          if (this.alpha == (int) byte.MaxValue)
            flag = true;
        }
        else
        {
          flag = (double) this.ai[1] < 0.0 || !Main.npc[(int) this.ai[1]].active;
          if ((flag || Main.npc[(int) this.ai[1]].type != 439) && (flag || Main.npc[(int) this.ai[1]].type != 454) && (flag || Main.npc[(int) this.ai[1]].type != 521))
            flag = true;
        }
        if (flag)
          this.Kill();
        else
          Lighting.AddLight(this.Center, 1.1f, 0.9f, 0.4f);
      }
      else if (this.aiStyle == 90)
      {
        if (Main.player[this.owner].dead)
          this.Kill();
        if (Main.myPlayer == this.owner && Main.player[this.owner].magicLantern)
          this.timeLeft = 2;
        if (this.tileCollide)
        {
          if (!Collision.CanHit(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
            this.tileCollide = false;
          else if (!Collision.SolidCollision(this.position, this.width, this.height) && Collision.CanHitLine(this.position, this.width, this.height, Main.player[this.owner].Center, 1, 1))
            this.tileCollide = true;
        }
        this.direction = Main.player[this.owner].direction;
        this.spriteDirection = this.direction;
        Lighting.AddLight(this.position, 0.35f, 0.35f, 0.1f);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.localAI[0] >= 10.0)
        {
          this.localAI[0] = 0.0f;
          int num1 = 17;
          if ((double) (this.Center - Main.player[Main.myPlayer].Center).Length() < (double) (Main.screenWidth + num1 * 16))
          {
            int num2 = (int) this.Center.X / 16;
            int num3 = (int) this.Center.Y / 16;
            for (int index1 = num2 - num1; index1 <= num2 + num1; ++index1)
            {
              for (int index2 = num3 - num1; index2 <= num3 + num1; ++index2)
              {
                if (Main.rand.Next(4) == 0 && ((double) new Vector2((float) (num2 - index1), (float) (num3 - index2)).Length() < (double) num1 && index1 > 0 && (index1 < Main.maxTilesX - 1 && index2 > 0) && (index2 < Main.maxTilesY - 1 && Main.tile[index1, index2] != null && Main.tile[index1, index2].active())))
                {
                  bool flag = false;
                  if ((int) Main.tile[index1, index2].type == 185 && (int) Main.tile[index1, index2].frameY == 18)
                  {
                    if ((int) Main.tile[index1, index2].frameX >= 576 && (int) Main.tile[index1, index2].frameX <= 882)
                      flag = true;
                  }
                  else if ((int) Main.tile[index1, index2].type == 186 && (int) Main.tile[index1, index2].frameX >= 864 && (int) Main.tile[index1, index2].frameX <= 1170)
                    flag = true;
                  if (flag || Main.tileSpelunker[(int) Main.tile[index1, index2].type] || Main.tileAlch[(int) Main.tile[index1, index2].type] && (int) Main.tile[index1, index2].type != 82)
                  {
                    int index3 = Dust.NewDust(new Vector2((float) (index1 * 16), (float) (index2 * 16)), 16, 16, 204, 0.0f, 0.0f, 150, new Color(), 0.3f);
                    Main.dust[index3].fadeIn = 0.75f;
                    Dust dust = Main.dust[index3];
                    dust.velocity = dust.velocity * 0.1f;
                    Main.dust[index3].noLight = true;
                  }
                }
              }
            }
          }
        }
        Vector2 vector2 = Main.player[this.owner].Center - this.Center;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @vector2.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 + (float) (40 * this.direction);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local3 = @vector2.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local3 = ^local3 - 40f;
        float num4 = vector2.Length();
        if ((double) num4 > 1000.0)
          this.Center = Main.player[this.owner].Center;
        float num5 = 3f;
        float num6 = 4f;
        if ((double) num4 > 200.0)
        {
          num6 += (float) (((double) num4 - 200.0) * 0.100000001490116);
          this.tileCollide = false;
        }
        if ((double) num4 < (double) num6)
        {
          this.velocity = this.velocity * 0.25f;
          num6 = num4;
        }
        if ((double) vector2.X != 0.0 || (double) vector2.Y != 0.0)
        {
          vector2.Normalize();
          vector2 *= num6;
        }
        this.velocity = (this.velocity * (num5 - 1f) + vector2) / num5;
        if ((double) this.velocity.Length() > 6.0)
        {
          float num1 = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          if ((double) Math.Abs(this.rotation - num1) >= 3.14)
            this.rotation = (double) num1 >= (double) this.rotation ? this.rotation + 6.28f : this.rotation - 6.28f;
          this.rotation = (float) (((double) this.rotation * 4.0 + (double) num1) / 5.0);
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter > 4)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
            if (this.frame > 7)
              this.frame = 4;
          }
          if (this.frame >= 4)
            return;
          this.frame = 7;
        }
        else
        {
          if ((double) this.rotation > 3.14)
            this.rotation = this.rotation - 6.28f;
          this.rotation = (double) this.rotation <= -0.01 || (double) this.rotation >= 0.01 ? this.rotation * 0.9f : 0.0f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter <= 6)
            return;
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame <= 3)
            return;
          this.frame = 0;
        }
      }
      else if (this.aiStyle == 91)
      {
        Vector2 center = this.Center;
        this.scale = 1f - this.localAI[0];
        this.width = (int) (20.0 * (double) this.scale);
        this.height = this.width;
        this.position.X = center.X - (float) (this.width / 2);
        this.position.Y = center.Y - (float) (this.height / 2);
        if ((double) this.localAI[0] < 0.1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 0.01f;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 0.025f;
        }
        if ((double) this.localAI[0] >= 0.949999988079071)
          this.Kill();
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.velocity.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + this.ai[0] * 1.5f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @this.velocity.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 + this.ai[1] * 1.5f;
        if ((double) this.velocity.Length() > 16.0)
        {
          this.velocity.Normalize();
          this.velocity = this.velocity * 16f;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local3 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local3 = ^local3 * 1.05f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local4 = @this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local4 = ^local4 * 1.05f;
        if ((double) this.scale >= 1.0)
          return;
        for (int index1 = 0; (double) index1 < (double) this.scale * 10.0; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, new Color(), 1.1f);
          Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 0.1f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.velocity * (1.3f - this.scale);
          Main.dust[index2].fadeIn = (float) (100 + this.owner);
          Dust dust3 = Main.dust[index2];
          dust3.scale = dust3.scale + this.scale * 0.75f;
        }
      }
      else if (this.aiStyle == 92)
      {
        this.tileCollide = false;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[1] > 60.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 10f;
        }
        if ((double) this.ai[0] > (double) byte.MaxValue)
        {
          this.Kill();
          this.ai[0] = (float) byte.MaxValue;
        }
        this.alpha = (int) (100.0 + (double) this.ai[0] * 0.7);
        this.rotation = this.rotation + this.velocity.X * 0.1f;
        this.rotation = this.rotation + (float) this.direction * (3f / 1000f);
        this.velocity = this.velocity * 0.96f;
        Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
        for (int index = 0; index < 1000; ++index)
        {
          if (index != this.whoAmI && Main.projectile[index].active && (Main.projectile[index].type >= 511 && Main.projectile[index].type <= 513))
          {
            Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.projectile[index].position.X, (int) Main.projectile[index].position.Y, Main.projectile[index].width, Main.projectile[index].height);
            if (rectangle1.Intersects(rectangle2))
            {
              Vector2 vector2 = Main.projectile[index].Center - this.Center;
              if ((double) vector2.X == 0.0 && (double) vector2.Y == 0.0)
              {
                if (index < this.whoAmI)
                {
                  vector2.X = -1f;
                  vector2.Y = 1f;
                }
                else
                {
                  vector2.X = 1f;
                  vector2.Y = -1f;
                }
              }
              vector2.Normalize();
              vector2 *= 0.005f;
              this.velocity = this.velocity - vector2;
              Projectile projectile = Main.projectile[index];
              projectile.velocity = projectile.velocity + vector2;
            }
          }
        }
      }
      else if (this.aiStyle == 93)
      {
        if (this.alpha > 0)
        {
          this.alpha = this.alpha - 25;
          if (this.alpha <= 0)
            this.alpha = 0;
        }
        if ((double) this.velocity.Y > 18.0)
          this.velocity.Y = 18f;
        if ((double) this.ai[0] == 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if ((double) this.ai[1] > 20.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 0.1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 * 0.992f;
          }
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else
        {
          this.tileCollide = false;
          if ((double) this.ai[0] == 1.0)
          {
            this.tileCollide = false;
            this.velocity = this.velocity * 0.6f;
          }
          else
          {
            this.tileCollide = false;
            int index = (int) -(double) this.ai[0] - 1;
            this.position = Main.npc[index].Center - this.velocity;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - (float) (this.height / 2);
            if (!Main.npc[index].active || Main.npc[index].life < 0)
            {
              this.tileCollide = true;
              this.ai[0] = 0.0f;
              this.ai[1] = 20f;
              this.velocity = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
              this.velocity.Normalize();
              this.velocity = this.velocity * 6f;
              this.netUpdate = true;
            }
            else if ((double) this.velocity.Length() > (double) ((Main.npc[index].width + Main.npc[index].height) / 3))
              this.velocity = this.velocity * 0.99f;
          }
          if ((double) this.ai[0] == 0.0)
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[1] <= 90.0)
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 94)
      {
        int num1 = this.frameCounter + 1;
        this.frameCounter = num1;
        if (num1 >= 4)
        {
          this.frameCounter = 0;
          int num2 = this.frame + 1;
          this.frame = num2;
          if (num2 >= Main.projFrames[this.type])
            this.frame = 0;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] <= 40.0)
        {
          this.alpha = this.alpha - 5;
          if (this.alpha < 0)
            this.alpha = 0;
          this.velocity = this.velocity * 0.85f;
          if ((double) this.ai[0] == 40.0)
          {
            this.netUpdate = true;
            switch (Main.rand.Next(3))
            {
              case 0:
                this.ai[1] = 10f;
                break;
              case 1:
                this.ai[1] = 15f;
                break;
              case 2:
                this.ai[1] = 30f;
                break;
            }
          }
        }
        else if ((double) this.ai[0] <= 60.0)
        {
          this.velocity = Vector2.Zero;
          if ((double) this.ai[0] == 60.0)
            this.netUpdate = true;
        }
        else if ((double) this.ai[0] <= 210.0)
        {
          if (Main.netMode != 1)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.localAI[0];
            // ISSUE: variable of a reference type
            float& local3 = local2;
            // ISSUE: explicit reference operation
            float num2 = ^local2 + 1f;
            double num3 = (double) num2;
            // ISSUE: explicit reference operation
            ^local3 = (float) num3;
            if ((double) num2 >= (double) this.ai[1])
            {
              this.localAI[0] = 0.0f;
              int index = Item.NewItem((int) this.Center.X, (int) this.Center.Y, 0, 0, 73, 1, false, 0, false, false);
              Main.item[index].velocity = Vector2.UnitY.RotatedByRandom(6.28318548202515) * new Vector2(3f, 2f) * (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5) - Vector2.UnitY * 1f;
            }
          }
          if ((double) this.ai[0] == 210.0)
            this.netUpdate = true;
        }
        else
        {
          this.scale = this.scale - 0.03333334f;
          this.alpha = this.alpha + 15;
          if ((double) this.ai[0] == 239.0)
            this.netUpdate = true;
          if ((double) this.ai[0] == 240.0)
            this.Kill();
        }
        if (this.alpha < 90 && Main.rand.Next(3) == 0)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.28318548202515) * new Vector2((float) this.width, (float) this.height) * this.scale * 0.85f / 2f;
          int index = Dust.NewDust(this.Center + vector2, 0, 0, 246, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index].position = this.Center + vector2;
          Main.dust[index].velocity = Vector2.Zero;
        }
        Lighting.AddLight(this.Center, 0.8f * 0.3f, 0.7098039f * 0.3f, 0.282353f * 0.3f);
      }
      else if (this.aiStyle == 95)
      {
        if ((double) this.localAI[0] > 2.0)
        {
          this.alpha = this.alpha - 20;
          if (this.alpha < 100)
            this.alpha = 100;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        if ((double) this.ai[0] > 30.0)
        {
          if ((double) this.velocity.Y > -8.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 0.05f;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 * 0.98f;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
        }
        this.rotation = this.velocity.X * 0.1f;
        if (!this.wet)
          return;
        if ((double) this.velocity.Y > 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local * 0.98f;
        }
        if ((double) this.velocity.Y > -8.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local - 0.2f;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @this.velocity.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 * 0.94f;
      }
      else if (this.aiStyle == 96)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 0.6f;
        if ((double) this.ai[0] > 500.0)
          this.Kill();
        for (int index1 = 0; index1 < 2; ++index1)
        {
          if (Main.rand.Next(3) != 0)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 170, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.1f;
            if (index1 == 1)
            {
              Dust dust2 = Main.dust[index2];
              dust2.position = dust2.position + this.velocity / 2f;
            }
            float num = (float) ((800.0 - (double) this.ai[0]) / 800.0);
            Dust dust3 = Main.dust[index2];
            dust3.scale = dust3.scale * (num + 0.1f);
          }
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @this.velocity.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 + 0.008f;
      }
      else if (this.aiStyle == 97)
      {
        this.frameCounter = this.frameCounter + 1;
        float num1 = 4f;
        if ((double) this.frameCounter < (double) num1 * 1.0)
          this.frame = 0;
        else if ((double) this.frameCounter < (double) num1 * 2.0)
          this.frame = 1;
        else if ((double) this.frameCounter < (double) num1 * 3.0)
          this.frame = 2;
        else if ((double) this.frameCounter < (double) num1 * 4.0)
          this.frame = 3;
        else if ((double) this.frameCounter < (double) num1 * 5.0)
          this.frame = 4;
        else if ((double) this.frameCounter < (double) num1 * 6.0)
          this.frame = 3;
        else if ((double) this.frameCounter < (double) num1 * 7.0)
          this.frame = 2;
        else if ((double) this.frameCounter < (double) num1 * 8.0)
        {
          this.frame = 1;
        }
        else
        {
          this.frameCounter = 0;
          this.frame = 0;
        }
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI && Main.projectile[index].active && (Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type))
            {
              if (this.timeLeft >= Main.projectile[index].timeLeft)
                Main.projectile[index].Kill();
              else
                this.Kill();
            }
          }
        }
        if ((double) this.ai[0] == 0.0)
        {
          if ((double) this.velocity.Length() < 0.1)
          {
            this.velocity.X = 0.0f;
            this.velocity.Y = 0.0f;
            this.ai[0] = 1f;
            this.ai[1] = 45f;
          }
          else
          {
            this.velocity = this.velocity * 0.94f;
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            else
              this.direction = 1;
            this.spriteDirection = this.direction;
          }
        }
        else
        {
          if ((double) Main.player[this.owner].Center.X < (double) this.Center.X)
            this.direction = -1;
          else
            this.direction = 1;
          this.spriteDirection = this.direction;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          float num2 = 0.005f;
          if ((double) this.ai[1] > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - num2;
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + num2;
          }
          if ((double) this.ai[1] < 90.0)
            return;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * -1f;
        }
      }
      else if (this.aiStyle == 98)
      {
        Vector2 vector2 = new Vector2(this.ai[0], this.ai[1]) - this.Center;
        if ((double) vector2.Length() < (double) this.velocity.Length())
        {
          this.Kill();
        }
        else
        {
          vector2.Normalize();
          vector2 *= 15f;
          this.velocity = Vector2.Lerp(this.velocity, vector2, 0.1f);
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(this.Center, 0, 0, 228, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.position = dust1.position + new Vector2(4f);
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale + Main.rand.NextFloat() * 1f;
          }
        }
      }
      else if (this.aiStyle == 99 && this.type >= 556 && this.type <= 561)
        this.AI_099_1();
      else if (this.aiStyle == 99)
        this.AI_099_2();
      else if (this.aiStyle == 100)
      {
        Player player = Main.player[this.owner];
        Vector2 zero1 = Vector2.Zero;
        if (this.type == 535)
        {
          zero1.X = (float) player.direction * 6f;
          zero1.Y = player.gravDir * -14f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          int num1 = 0;
          if ((double) this.ai[0] >= 60.0)
            ++num1;
          if ((double) this.ai[0] >= 180.0)
            ++num1;
          if ((double) this.ai[0] >= 240.0)
          {
            this.Kill();
            return;
          }
          bool flag1 = false;
          if ((double) this.ai[0] == 60.0 || (double) this.ai[0] == 180.0)
            flag1 = true;
          bool flag2 = (double) this.ai[0] >= 180.0;
          if (flag2)
          {
            if (this.frame < 8)
              this.frame = 8;
            if (this.frame >= 12)
              this.frame = 8;
            this.frameCounter = this.frameCounter + 1;
            int num2 = this.frameCounter + 1;
            this.frameCounter = num2;
            if (num2 >= 5)
            {
              this.frameCounter = 0;
              int num3 = this.frame + 1;
              this.frame = num3;
              if (num3 >= 12)
                this.frame = 8;
            }
          }
          else
          {
            int num2 = this.frameCounter + 1;
            this.frameCounter = num2;
            if (num2 >= 5)
            {
              this.frameCounter = 0;
              int num3 = this.frame + 1;
              this.frame = num3;
              if (num3 >= 8)
                this.frame = 0;
            }
          }
          Vector2 center1 = player.Center;
          Vector2 vector2_1 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - center1;
          if ((double) player.gravDir == -1.0)
            vector2_1.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - center1.Y;
          Vector2 vector2_2 = new Vector2((float) Math.Sign((double) vector2_1.X == 0.0 ? (float) player.direction : vector2_1.X), 0.0f);
          if ((double) vector2_2.X != (double) this.velocity.X || (double) vector2_2.Y != (double) this.velocity.Y)
            this.netUpdate = true;
          this.velocity = vector2_2;
          if (this.soundDelay <= 0 && !flag2)
          {
            this.soundDelay = 10;
            this.soundDelay = this.soundDelay * 2;
            if ((double) this.ai[0] != 1.0)
              Main.PlaySound(SoundID.Item15, this.position);
          }
          if ((double) this.ai[0] == 181.0)
            Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 17, 1f, 0.0f);
          if ((double) this.ai[0] > 10.0 && !flag2)
          {
            Vector2 Position = this.Center + new Vector2((float) (player.direction * 2), player.gravDir * 5f);
            float num2 = MathHelper.Lerp(30f, 10f, (float) (((double) this.ai[0] - 10.0) / 180.0));
            float num3 = Main.rand.NextFloat() * 6.283185f;
            for (float num4 = 0.0f; (double) num4 < 1.0; ++num4)
            {
              Vector2 vector2_3 = Vector2.UnitY.RotatedBy((double) num4 / 1.0 * 6.28318548202515 + (double) num3, new Vector2());
              Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 228, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.position = Position + vector2_3 * num2;
              dust.noGravity = true;
              dust.customData = (object) player;
              dust.velocity = vector2_3 * -2f;
            }
          }
          if ((double) this.ai[0] > 180.0 && (double) this.ai[0] <= 182.0)
          {
            Vector2 Position = this.Center + new Vector2((float) (player.direction * 2), player.gravDir * 5f);
            float num2 = MathHelper.Lerp(20f, 30f, (float) (((double) this.ai[0] - 180.0) / 182.0));
            float num3 = Main.rand.NextFloat() * 6.283185f;
            for (float num4 = 0.0f; (double) num4 < 10.0; ++num4)
            {
              Vector2 vector2_3 = Vector2.UnitY.RotatedByRandom(6.28318548202515) * (float) ((double) Main.rand.NextFloat() * 0.5 + 0.5);
              Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 228, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.position = Position + vector2_3 * num2;
              dust.noGravity = true;
              dust.customData = (object) player;
              dust.velocity = vector2_3 * 4f;
              dust.scale = 0.5f + Main.rand.NextFloat();
            }
          }
          if (Main.myPlayer == this.owner)
          {
            bool flag3 = !flag1 || player.CheckMana(player.inventory[player.selectedItem].mana, true, false);
            bool flag4 = player.channel & flag3;
            if (!flag2 && !flag4 || (double) this.ai[0] == 180.0)
            {
              Vector2 vector2_3 = player.Center + new Vector2((float) (player.direction * 4), player.gravDir * 2f);
              int num2 = this.damage * (1 + num1);
              Vector2 center2 = this.Center;
              int num3 = 0;
              float num4 = 0.0f;
              for (int index1 = 0; index1 < 200; ++index1)
              {
                NPC npc = Main.npc[index1];
                if (npc.active && (double) this.Distance(npc.Center) < 500.0 && (npc.CanBeChasedBy((object) this, false) && Collision.CanHitLine(npc.position, npc.width, npc.height, center2, 0, 0)))
                {
                  Vector2 v = npc.Center - center2;
                  num4 += v.ToRotation();
                  ++num3;
                  int index2 = Projectile.NewProjectile(center2.X, center2.Y, v.X, v.Y, 536, 0, 0.0f, this.owner, (float) this.whoAmI, 0.0f);
                  Main.projectile[index2].Center = npc.Center;
                  Main.projectile[index2].damage = num2;
                  Main.projectile[index2].Damage();
                  Main.projectile[index2].damage = 0;
                  Main.projectile[index2].Center = center2;
                  this.ai[0] = 180f;
                }
              }
              float num5 = num3 == 0 ? (player.direction == 1 ? 0.0f : 3.141593f) : num4 / (float) num3;
              for (int index = 0; index < 6; ++index)
              {
                Vector2 zero2 = Vector2.Zero;
                Vector2 vector2_4 = Main.rand.Next(4) == 0 ? Vector2.UnitX.RotatedByRandom(6.28318548202515) * new Vector2(200f, 50f) * (float) ((double) Main.rand.NextFloat() * 0.699999988079071 + 0.300000011920929) : Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) num5, new Vector2()) * new Vector2(200f, 50f) * (float) ((double) Main.rand.NextFloat() * 0.699999988079071 + 0.300000011920929);
                Projectile.NewProjectile(center2.X, center2.Y, vector2_4.X, vector2_4.Y, 536, 0, 0.0f, this.owner, (float) this.whoAmI, 0.0f);
              }
              this.ai[0] = 180f;
              this.netUpdate = true;
            }
          }
          Lighting.AddLight(this.Center, 0.9f, 0.75f, 0.1f);
        }
        this.rotation = (double) player.gravDir == 1.0 ? 0.0f : 3.141593f;
        this.spriteDirection = this.direction;
        this.timeLeft = 2;
        Vector2 vector2_5 = Main.OffsetsPlayerOnhand[player.bodyFrame.Y / 56] * 2f;
        if (player.direction != 1)
          vector2_5.X = (float) player.bodyFrame.Width - vector2_5.X;
        Vector2 vector2_6 = vector2_5 - (player.bodyFrame.Size() - new Vector2((float) player.width, 42f)) / 2f;
        this.Center = (player.position + vector2_6 + zero1 - this.velocity).Floor();
        player.ChangeDir(this.direction);
        player.heldProj = this.whoAmI;
        player.itemTime = 2;
        player.itemAnimation = 2;
      }
      else if (this.aiStyle == 101)
      {
        float num1 = 20f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        this.alpha = (int) MathHelper.Lerp(0.0f, (float) byte.MaxValue, this.localAI[0] / num1);
        int index = (int) this.ai[0];
        int num2 = -1;
        int num3 = -1;
        switch (this.type)
        {
          case 536:
            num2 = 535;
            num3 = 0;
            break;
          case 591:
            num3 = 1;
            break;
        }
        if (num3 == 1)
        {
          if ((double) this.localAI[0] >= (double) num1 || index < 0 || (index > (int) byte.MaxValue || !Main.player[index].active) || Main.player[index].dead)
          {
            this.Kill();
            return;
          }
          if (this.type == 591)
          {
            this.Center = Mount.GetMinecartMechPoint(Main.player[index], 20, -19) - this.velocity;
            this.rotation = this.velocity.ToRotation() + 1.570796f;
            if (Math.Sign(this.velocity.X) != Math.Sign(Main.player[index].velocity.X) && (double) Main.player[index].velocity.X != 0.0)
            {
              this.Kill();
              return;
            }
          }
          else
            this.Center = Main.player[index].Center - this.velocity;
        }
        else if (num3 == 0)
        {
          if ((double) this.localAI[0] >= (double) num1 || index < 0 || (index > 1000 || !Main.projectile[index].active) || Main.projectile[index].type != num2)
          {
            this.Kill();
            return;
          }
          this.Center = Main.projectile[index].Center - this.velocity;
        }
        this.rotation = this.velocity.ToRotation() + 1.570796f;
      }
      else if (this.aiStyle == 102)
      {
        int num1 = 0;
        float num2 = 0.0f;
        float x = 0.0f;
        float y = 0.0f;
        int Type = -1;
        int Damage = 0;
        float num3 = 0.0f;
        bool flag1 = true;
        bool flag2 = false;
        bool flag3 = false;
        switch (this.type)
        {
          case 539:
            num1 = 407;
            num2 = 210f;
            x = 0.15f;
            y = 0.075f;
            num3 = 16f;
            break;
          case 573:
            num1 = 424;
            num2 = 90f;
            num3 = 20f;
            flag1 = false;
            flag2 = true;
            break;
          case 574:
            num1 = 420;
            num2 = 180f;
            x = 0.15f;
            y = 0.075f;
            num3 = 8f;
            flag1 = false;
            Type = 576;
            Damage = 65;
            if (Main.expertMode)
              Damage = 50;
            flag3 = true;
            break;
        }
        if (flag3)
        {
          int index = (int) this.ai[1];
          if (!Main.npc[index].active || Main.npc[index].type != num1)
          {
            this.Kill();
            return;
          }
          this.timeLeft = 2;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] < (double) num2)
        {
          bool flag4 = true;
          int index1 = (int) this.ai[1];
          if (Main.npc[index1].active && Main.npc[index1].type == num1)
          {
            if (!flag2 && Main.npc[index1].oldPos[1] != Vector2.Zero)
              this.position = this.position + Main.npc[index1].position - Main.npc[index1].oldPos[1];
          }
          else
          {
            this.ai[0] = num2;
            flag4 = false;
          }
          if (flag4 && !flag2)
          {
            this.velocity = this.velocity + new Vector2((float) Math.Sign(Main.npc[index1].Center.X - this.Center.X), (float) Math.Sign(Main.npc[index1].Center.Y - this.Center.Y)) * new Vector2(x, y);
            if ((double) this.velocity.Length() > 6.0)
              this.velocity = this.velocity * (6f / this.velocity.Length());
          }
          if (this.type == 539)
          {
            if (Main.rand.Next(12) == 0)
            {
              int index2 = Dust.NewDust(this.Center, 8, 8, 180, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].position = this.Center;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.2f;
              Main.dust[index2].noGravity = true;
            }
            int num4 = this.frameCounter + 1;
            this.frameCounter = num4;
            if (num4 >= 4)
            {
              this.frameCounter = 0;
              int num5 = this.frame + 1;
              this.frame = num5;
              if (num5 >= Main.projFrames[this.type])
                this.frame = 0;
            }
            this.rotation = this.velocity.X * 0.1f;
          }
          if (this.type == 573)
          {
            if (Main.rand.Next(2) == 0)
            {
              int index2 = Dust.NewDust(this.Center, 8, 8, 242, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].position = this.Center;
              Main.dust[index2].velocity = this.velocity;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].scale = 1.5f;
            }
            this.alpha = (int) byte.MaxValue;
          }
          if (this.type == 574)
          {
            if (Main.rand.Next(10) == 0)
            {
              int index2 = Dust.NewDust(this.Center, 8, 8, 242, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].position = this.Center;
              Main.dust[index2].velocity = this.velocity;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].scale = 1.5f;
            }
            if (flag4)
            {
              int target = Main.npc[index1].target;
              float rotation = this.velocity.ToRotation();
              if (Collision.CanHitLine(this.Center, 0, 0, Main.player[target].Center, 0, 0))
                rotation = this.DirectionTo(Main.player[target].Center).ToRotation();
              this.rotation = this.rotation.AngleLerp(rotation + 1.570796f, 0.2f);
            }
            this.frame = 1;
          }
        }
        if ((double) this.ai[0] == (double) num2)
        {
          bool flag4 = true;
          int index1 = -1;
          if (!flag1)
          {
            int index2 = (int) this.ai[1];
            if (Main.npc[index2].active && Main.npc[index2].type == num1)
              index1 = Main.npc[index2].target;
            else
              flag4 = false;
          }
          else
            flag4 = false;
          if (!flag4)
            index1 = (int) Player.FindClosest(this.position, this.width, this.height);
          Vector2 vector2 = Main.player[index1].Center - this.Center;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @vector2.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) Main.rand.Next(-50, 51);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @vector2.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 + (float) Main.rand.Next(-50, 51);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @vector2.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 * ((float) Main.rand.Next(80, 121) * 0.01f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @vector2.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 * ((float) Main.rand.Next(80, 121) * 0.01f);
          Vector2 vec = Vector2.Normalize(vector2);
          if (vec.HasNaNs())
            vec = Vector2.UnitY;
          if (Type == -1)
          {
            this.velocity = vec * num3;
            this.netUpdate = true;
          }
          else
          {
            if (Main.netMode != 1 && Collision.CanHitLine(this.Center, 0, 0, Main.player[index1].Center, 0, 0))
              Projectile.NewProjectile(this.Center.X, this.Center.Y, vec.X * num3, vec.Y * num3, Type, Damage, 1f, Main.myPlayer, 0.0f, 0.0f);
            this.ai[0] = 0.0f;
          }
        }
        if ((double) this.ai[0] < (double) num2)
          return;
        this.rotation = this.rotation.AngleLerp(this.velocity.ToRotation() + 1.570796f, 0.4f);
        if (this.type == 539)
        {
          int num4 = this.frameCounter + 1;
          this.frameCounter = num4;
          if (num4 >= 2)
          {
            this.frameCounter = 0;
            int num5 = this.frame + 1;
            this.frame = num5;
            if (num5 >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 180, 0.0f, 0.0f, 100, new Color(), 1f);
            Dust dust1 = Main.dust[index];
            dust1.scale = dust1.scale + (float) Main.rand.Next(50) * 0.01f;
            Main.dust[index].noGravity = true;
            Dust dust2 = Main.dust[index];
            dust2.velocity = dust2.velocity * 0.1f;
            Main.dust[index].fadeIn = Main.rand.NextFloat() * 1.5f;
          }
          if (Main.rand.Next(3) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 176, 0.0f, 0.0f, 100, new Color(), 1f);
            Dust dust1 = Main.dust[index];
            dust1.scale = dust1.scale + (float) (0.300000011920929 + (double) Main.rand.Next(50) * 0.00999999977648258);
            Main.dust[index].noGravity = true;
            Dust dust2 = Main.dust[index];
            dust2.velocity = dust2.velocity * 0.1f;
            Main.dust[index].fadeIn = Main.rand.NextFloat() * 1.5f;
          }
        }
        if (this.type != 573)
          return;
        if (Main.rand.Next(4) == 0)
        {
          int index = Dust.NewDust(this.Center, 8, 8, 242, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index].position = this.Center;
          Dust dust = Main.dust[index];
          dust.velocity = dust.velocity * 0.2f;
          Main.dust[index].noGravity = true;
          Main.dust[index].scale = 1.5f;
        }
        this.alpha = 0;
      }
      else if (this.aiStyle == 103)
      {
        this.scale = this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] >= 30.0)
        {
          this.alpha = this.alpha + 25;
          if (this.alpha < 250)
            return;
          this.Kill();
        }
        else
        {
          if ((double) this.ai[0] < 0.0)
            return;
          this.alpha = this.alpha - 25;
          if (this.alpha >= 0)
            return;
          this.alpha = 0;
          if ((double) this.localAI[1] != 0.0 || Main.netMode == 1 || (double) this.localAI[0] == 0.0)
            return;
          this.localAI[1] = 1f;
          NPC.NewNPC((int) this.Center.X, (int) this.Bottom.Y, (int) this.localAI[0], 0, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
        }
      }
      else if (this.aiStyle == 104)
      {
        if ((double) this.ai[0] == 1.0)
        {
          this.scale = this.scale * 0.995f;
          this.alpha = this.alpha + 3;
          if (this.alpha >= 250)
            this.Kill();
        }
        else
        {
          this.scale = this.scale * 1.01f;
          this.alpha = this.alpha - 7;
          if (this.alpha < 0)
          {
            this.alpha = 0;
            this.ai[0] = 1f;
          }
        }
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter > 6)
        {
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame > 3)
            this.frame = 0;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.velocity.Y;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 - 0.03f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @this.velocity.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 * 0.97f;
      }
      else if (this.aiStyle == 105)
      {
        float num1 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue) * this.scale;
        Lighting.AddLight(this.Center, 0.2f * num1, 0.275f * num1, 0.075f * num1);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.localAI[0] >= 90.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * -1f;
        }
        this.scale = (double) this.localAI[0] < 0.0 ? this.scale - 3f / 1000f : this.scale + 3f / 1000f;
        this.rotation = this.rotation + 1f / 400f * this.scale;
        float num2 = 1f;
        float num3 = 1f;
        if (this.identity % 6 == 0)
          num3 *= -1f;
        if (this.identity % 6 == 1)
          num2 *= -1f;
        if (this.identity % 6 == 2)
        {
          num3 *= -1f;
          num2 *= -1f;
        }
        if (this.identity % 6 == 3)
          num3 = 0.0f;
        if (this.identity % 6 == 4)
          num2 = 0.0f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local3 = @this.localAI[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local3 = ^local3 + 1f;
        if ((double) this.localAI[1] > 60.0)
          this.localAI[1] = -180f;
        if ((double) this.localAI[1] >= -60.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 1f / 500f * num3;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 + 1f / 500f * num2;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 - 1f / 500f * num3;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 - 1f / 500f * num2;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local5 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local5 = ^local5 + 1f;
        if ((double) this.ai[0] > 5400.0)
        {
          this.damage = 0;
          this.ai[1] = 1f;
          if (this.alpha < (int) byte.MaxValue)
          {
            this.alpha = this.alpha + 5;
            if (this.alpha > (int) byte.MaxValue)
              this.alpha = (int) byte.MaxValue;
          }
          else if (this.owner == Main.myPlayer)
            this.Kill();
        }
        else
        {
          float num4 = (this.Center - Main.player[this.owner].Center).Length() / 100f;
          if ((double) num4 > 4.0)
            num4 *= 1.1f;
          if ((double) num4 > 5.0)
            num4 *= 1.2f;
          if ((double) num4 > 6.0)
            num4 *= 1.3f;
          if ((double) num4 > 7.0)
            num4 *= 1.4f;
          if ((double) num4 > 8.0)
            num4 *= 1.5f;
          if ((double) num4 > 9.0)
            num4 *= 1.6f;
          if ((double) num4 > 10.0)
            num4 *= 1.7f;
          if (!Main.player[this.owner].sporeSac)
            num4 += 100f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + num4;
          if (this.alpha > 50)
          {
            this.alpha = this.alpha - 10;
            if (this.alpha < 50)
              this.alpha = 50;
          }
        }
        bool flag = false;
        Vector2 vector2_1 = new Vector2(0.0f, 0.0f);
        float num5 = 280f;
        for (int index = 0; index < 200; ++index)
        {
          if (Main.npc[index].CanBeChasedBy((object) this, false))
          {
            float num4 = Math.Abs(this.position.X + (float) (this.width / 2) - (Main.npc[index].position.X + (float) (Main.npc[index].width / 2))) + Math.Abs(this.position.Y + (float) (this.height / 2) - (Main.npc[index].position.Y + (float) (Main.npc[index].height / 2)));
            if ((double) num4 < (double) num5)
            {
              num5 = num4;
              vector2_1 = Main.npc[index].Center;
              flag = true;
            }
          }
        }
        if (flag)
        {
          Vector2 vector2_2 = vector2_1 - this.Center;
          vector2_2.Normalize();
          this.velocity = (this.velocity * 10f + vector2_2 * 0.75f) / 11f;
        }
        else
        {
          if ((double) this.velocity.Length() <= 0.2)
            return;
          this.velocity = this.velocity * 0.98f;
        }
      }
      else if (this.aiStyle == 106)
      {
        this.rotation = this.rotation + this.velocity.X * 0.02f;
        this.rotation = (double) this.velocity.X >= 0.0 ? this.rotation + Math.Abs(this.velocity.Y) * 0.02f : this.rotation - Math.Abs(this.velocity.Y) * 0.02f;
        this.velocity = this.velocity * 0.98f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] >= 60.0)
        {
          if (this.alpha < (int) byte.MaxValue)
          {
            this.alpha = this.alpha + 5;
            if (this.alpha <= (int) byte.MaxValue)
              return;
            this.alpha = (int) byte.MaxValue;
          }
          else
          {
            if (this.owner != Main.myPlayer)
              return;
            this.Kill();
          }
        }
        else
        {
          if (this.alpha <= 80)
            return;
          this.alpha = this.alpha - 30;
          if (this.alpha >= 80)
            return;
          this.alpha = 80;
        }
      }
      else if (this.aiStyle == 107)
      {
        float num1 = 10f;
        float num2 = 5f;
        float num3 = 40f;
        if (this.type == 575)
        {
          if (this.timeLeft > 30 && this.alpha > 0)
            this.alpha = this.alpha - 25;
          if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha = 128;
          if (this.alpha < 0)
            this.alpha = 0;
          int num4 = this.frameCounter + 1;
          this.frameCounter = num4;
          if (num4 > 4)
          {
            this.frameCounter = 0;
            int num5 = this.frame + 1;
            this.frame = num5;
            if (num5 >= 4)
              this.frame = 0;
          }
          Lighting.AddLight(this.Center, 0.5f, 0.1f, 0.3f);
        }
        else if (this.type == 596)
        {
          num1 = 10f;
          num2 = 7.5f;
          if (this.timeLeft > 30 && this.alpha > 0)
            this.alpha = this.alpha - 25;
          if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha = 128;
          if (this.alpha < 0)
            this.alpha = 0;
          int num4 = this.frameCounter + 1;
          this.frameCounter = num4;
          if (num4 > 4)
          {
            this.frameCounter = 0;
            int num5 = this.frame + 1;
            this.frame = num5;
            if (num5 >= 4)
              this.frame = 0;
          }
          float num6 = 0.5f;
          if (this.timeLeft < 120)
            num6 = 1.1f;
          if (this.timeLeft < 60)
            num6 = 1.6f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          float num7 = (float) ((double) this.ai[1] / 180.0 * 6.28318548202515);
          for (float num5 = 0.0f; (double) num5 < 3.0; ++num5)
          {
            if (Main.rand.Next(3) != 0)
              return;
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 27, 0.0f, -2f, 0, new Color(), 1f)];
            dust.position = this.Center + Vector2.UnitY.RotatedBy((double) num5 * 6.28318548202515 / 3.0 + (double) this.ai[1], new Vector2()) * 10f;
            dust.noGravity = true;
            dust.velocity = this.DirectionFrom(dust.position);
            dust.scale = num6;
            dust.fadeIn = 0.5f;
            dust.alpha = 200;
          }
          if (this.timeLeft < 4)
          {
            int num5 = 40;
            if (Main.expertMode)
              num5 = 30;
            this.position = this.Center;
            this.width = this.height = 60;
            this.Center = this.position;
            this.damage = num5;
            for (int index = 0; index < 10; ++index)
            {
              Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[2]{ 27, 6 }), 0.0f, -2f, 0, new Color(), 1f)];
              dust.noGravity = true;
              if (dust.position != this.Center)
                dust.velocity = this.DirectionTo(dust.position) * 3f;
            }
          }
        }
        int index1 = (int) this.ai[0];
        if (index1 >= 0 && Main.player[index1].active && !Main.player[index1].dead)
        {
          if ((double) this.Distance(Main.player[index1].Center) <= (double) num3)
            return;
          Vector2 unitY = this.DirectionTo(Main.player[index1].Center);
          if (unitY.HasNaNs())
            unitY = Vector2.UnitY;
          this.velocity = (this.velocity * (num1 - 1f) + unitY * num2) / num1;
        }
        else
        {
          if (this.timeLeft > 30)
            this.timeLeft = 30;
          if ((double) this.ai[0] == -1.0)
            return;
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      else if (this.aiStyle == 108)
      {
        if (this.type == 578 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          int closest = (int) Player.FindClosest(this.Center, 0, 0);
          Vector2 v = Main.player[closest].Center - this.Center;
          if (v == Vector2.Zero)
            v = Vector2.UnitY;
          this.ai[1] = v.ToRotation();
          this.netUpdate = true;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] <= 50.0)
        {
          if (this.type == 579)
          {
            if (Main.rand.Next(4) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.57079637050629, new Vector2()) * 4f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
            }
            if (Main.rand.Next(4) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 2f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
            }
          }
          if (this.type != 578 || Main.rand.Next(2) != 0)
            return;
          Vector2 rotationVector2 = this.ai[1].ToRotationVector2();
          Vector2 vector2_1 = rotationVector2.RotatedBy(1.57079637050629, new Vector2()) * (float) (Main.rand.Next(2) == 0).ToDirectionInt() * (float) Main.rand.Next(10, 21);
          Vector2 vector2_2 = (rotationVector2 * (float) Main.rand.Next(-80, 81) - vector2_1) / 10f;
          int Type = 229;
          Dust dust1 = Main.dust[Dust.NewDust(this.Center, 0, 0, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust1.noGravity = true;
          dust1.position = this.Center + vector2_1;
          dust1.velocity = vector2_2;
          dust1.scale = 0.5f + Main.rand.NextFloat();
          dust1.fadeIn = 0.5f;
          Vector2 vector2_3 = (rotationVector2 * (float) Main.rand.Next(40, 121) - vector2_1 / 2f) / 10f;
          Dust dust2 = Main.dust[Dust.NewDust(this.Center, 0, 0, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust2.noGravity = true;
          dust2.position = this.Center + vector2_1 / 2f;
          dust2.velocity = vector2_3;
          dust2.scale = 1f + Main.rand.NextFloat();
        }
        else if ((double) this.ai[0] <= 90.0)
        {
          this.scale = (float) (((double) this.ai[0] - 50.0) / 40.0);
          this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.scale);
          this.rotation = this.rotation - 0.1570796f;
          if (this.type == 579)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.57079637050629, new Vector2()) * 6f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 3f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this.Center;
            }
          }
          if (this.type == 578)
          {
            Vector2 rotationVector2 = this.ai[1].ToRotationVector2();
            Vector2 vector2_1 = rotationVector2.RotatedBy(1.57079637050629, new Vector2()) * (float) (Main.rand.Next(2) == 0).ToDirectionInt() * (float) Main.rand.Next(10, 21);
            Vector2 vector2_2 = (rotationVector2 * (float) Main.rand.Next(-80, 81) - vector2_1) / 10f;
            int Type = Utils.SelectRandom<int>(Main.rand, new int[2]{ 229, 229 });
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.noGravity = true;
            dust.position = this.Center + vector2_1;
            dust.velocity = vector2_2;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            if ((double) this.ai[0] != 90.0 || Main.netMode == 1)
              return;
            Vector2 vector2_3 = this.ai[1].ToRotationVector2() * 8f;
            float ai1 = (float) Main.rand.Next(80);
            Projectile.NewProjectile(this.Center.X - vector2_3.X, this.Center.Y - vector2_3.Y, vector2_3.X, vector2_3.Y, 580, 15, 1f, Main.myPlayer, this.ai[1], ai1);
          }
          else
          {
            if (this.type != 579 || (double) this.ai[0] != 90.0 || Main.netMode == 1)
              return;
            for (int index1 = 0; index1 < 2; ++index1)
            {
              int index2 = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 427, this.whoAmI, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
              Main.npc[index2].velocity = -Vector2.UnitY.RotatedByRandom(6.28318548202515) * (float) Main.rand.Next(4, 9) - Vector2.UnitY * 2f;
              Main.npc[index2].netUpdate = true;
            }
          }
        }
        else if ((double) this.ai[0] <= 120.0)
        {
          this.scale = 1f;
          this.alpha = 0;
          this.rotation = this.rotation - (float) Math.PI / 60f;
          if (Main.rand.Next(2) == 0)
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
            dust.velocity = spinningpoint.RotatedBy(1.57079637050629, new Vector2()) * 6f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
          else
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * 30f;
            dust.velocity = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 3f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
        }
        else
        {
          this.scale = (float) (1.0 - ((double) this.ai[0] - 120.0) / 60.0);
          this.alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.scale);
          this.rotation = this.rotation - (float) Math.PI / 30f;
          if (this.alpha >= (int) byte.MaxValue)
            this.Kill();
          for (int index = 0; index < 2; ++index)
          {
            switch (Main.rand.Next(3))
            {
              case 0:
                Vector2 spinningpoint1 = Vector2.UnitY.RotatedByRandom(6.28318548202515) * this.scale;
                Dust dust1 = Main.dust[Dust.NewDust(this.Center - spinningpoint1 * 30f, 0, 0, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                dust1.noGravity = true;
                dust1.position = this.Center - spinningpoint1 * (float) Main.rand.Next(10, 21);
                dust1.velocity = spinningpoint1.RotatedBy(1.57079637050629, new Vector2()) * 6f;
                dust1.scale = 0.5f + Main.rand.NextFloat();
                dust1.fadeIn = 0.5f;
                dust1.customData = (object) this.Center;
                break;
              case 1:
                Vector2 spinningpoint2 = Vector2.UnitY.RotatedByRandom(6.28318548202515) * this.scale;
                Dust dust2 = Main.dust[Dust.NewDust(this.Center - spinningpoint2 * 30f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
                dust2.noGravity = true;
                dust2.position = this.Center - spinningpoint2 * 30f;
                dust2.velocity = spinningpoint2.RotatedBy(-1.57079637050629, new Vector2()) * 3f;
                dust2.scale = 0.5f + Main.rand.NextFloat();
                dust2.fadeIn = 0.5f;
                dust2.customData = (object) this.Center;
                break;
            }
          }
        }
      }
      else if (this.aiStyle == 109)
      {
        if ((double) this.localAI[1] == 0.0)
          this.localAI[1] = this.velocity.Length();
        if ((double) this.ai[0] == 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] > 30.0)
          {
            this.ai[0] = 1f;
            this.localAI[0] = 0.0f;
            return;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          Vector2 zero = Vector2.Zero;
          if (this.type == 582 && Main.npc[(int) this.ai[1]].active && Main.npc[(int) this.ai[1]].type == 124)
          {
            Vector2 center = Main.npc[(int) this.ai[1]].Center;
            this.tileCollide = false;
            float num = this.localAI[1];
            Vector2 vector2 = center - this.Center;
            if ((double) vector2.Length() < (double) num)
            {
              this.Kill();
              return;
            }
            vector2.Normalize();
            this.velocity = Vector2.Lerp(this.velocity, vector2 * num, 0.04f);
          }
          else
          {
            this.Kill();
            return;
          }
        }
        this.rotation = this.rotation + 0.3141593f;
      }
      else if (this.aiStyle == 110)
      {
        if ((double) this.localAI[1] == 0.0)
          this.localAI[1] = this.velocity.Length();
        Vector2 zero = Vector2.Zero;
        if (Main.npc[(int) this.ai[0]].active && Main.npc[(int) this.ai[0]].townNPC)
        {
          Vector2 center = Main.npc[(int) this.ai[0]].Center;
          float num = this.localAI[1];
          Vector2 vector2_1 = center - this.Center;
          if ((double) vector2_1.Length() < (double) num || this.Hitbox.Intersects(Main.npc[(int) this.ai[0]].Hitbox))
          {
            this.Kill();
            int healAmount = Main.npc[(int) this.ai[0]].lifeMax - Main.npc[(int) this.ai[0]].life;
            if (healAmount > 20)
              healAmount = 20;
            if (healAmount <= 0)
              return;
            NPC npc = Main.npc[(int) this.ai[0]];
            npc.life = npc.life + healAmount;
            Main.npc[(int) this.ai[0]].HealEffect(healAmount, true);
          }
          else
          {
            vector2_1.Normalize();
            Vector2 vector2_2 = vector2_1 * num;
            if ((double) vector2_2.Y < (double) this.velocity.Y)
              vector2_2.Y = this.velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @vector2_2.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
            this.velocity = Vector2.Lerp(this.velocity, vector2_2, 0.04f);
            this.rotation = this.rotation + this.velocity.X * 0.05f;
          }
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 111)
      {
        if (!Main.npc[(int) this.ai[1]].active || Main.npc[(int) this.ai[1]].type != 20 || (double) Main.npc[(int) this.ai[1]].ai[0] != 14.0)
        {
          this.Kill();
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          this.rotation = this.rotation + (float) Math.PI / 300f;
          this.scale = this.ai[0] / 100f;
          if ((double) this.scale > 1.0)
            this.scale = 1f;
          this.alpha = (int) ((double) byte.MaxValue * (1.0 - (double) this.scale));
          float num1 = 300f;
          if ((double) this.ai[0] >= 100.0)
            num1 = MathHelper.Lerp(300f, 600f, (float) (((double) this.ai[0] - 100.0) / 200.0));
          if ((double) num1 > 600.0)
            num1 = 600f;
          if ((double) this.ai[0] >= 500.0)
          {
            this.alpha = (int) MathHelper.Lerp(0.0f, (float) byte.MaxValue, (float) (((double) this.ai[0] - 500.0) / 100.0));
            num1 = MathHelper.Lerp(600f, 1200f, (float) (((double) this.ai[0] - 500.0) / 100.0));
            this.rotation = this.rotation + (float) Math.PI / 300f;
          }
          if (Main.rand.Next(4) == 0)
          {
            float num2 = num1;
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
            float num3 = (float) Main.rand.Next(3, 9);
            vector2.Normalize();
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index].noGravity = true;
            Main.dust[index].position = this.Center + vector2 * num2;
            if (Main.rand.Next(8) == 0)
            {
              Main.dust[index].velocity = vector2 * -num3 * 3f;
              Dust dust = Main.dust[index];
              dust.scale = dust.scale + 0.5f;
            }
            else
              Main.dust[index].velocity = vector2 * -num3;
          }
          if (Main.rand.Next(2) == 0)
          {
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
            float num2 = (float) Main.rand.Next(3, 9);
            vector2.Normalize();
            int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Main.dust[index].noGravity = true;
            Main.dust[index].position = this.Center + vector2 * 30f;
            if (Main.rand.Next(8) == 0)
            {
              Main.dust[index].velocity = vector2 * -num2 * 3f;
              Dust dust = Main.dust[index];
              dust.scale = dust.scale + 0.5f;
            }
            else
              Main.dust[index].velocity = vector2 * -num2;
          }
          if ((double) this.ai[0] >= 30.0 && Main.netMode != 2)
          {
            Player player = Main.player[Main.myPlayer];
            if (player.active && !player.dead && ((double) this.Distance(player.Center) <= (double) num1 && player.FindBuffIndex(165) == -1))
              player.AddBuff(165, 120, true);
          }
          if ((double) this.ai[0] >= 30.0 && (double) this.ai[0] % 10.0 == 0.0 && Main.netMode != 1)
          {
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.type != 488 && npc.active && (double) this.Distance(npc.Center) <= (double) num1)
              {
                if (npc.townNPC && (npc.FindBuffIndex(165) == -1 || npc.buffTime[npc.FindBuffIndex(165)] <= 20))
                  npc.AddBuff(165, 120, false);
                else if (!npc.friendly && npc.lifeMax > 5 && !npc.dontTakeDamage && ((npc.FindBuffIndex(186) == -1 || npc.buffTime[npc.FindBuffIndex(186)] <= 20) && (npc.dryadBane || Collision.CanHit(this.Center, 1, 1, npc.position, npc.width, npc.height))))
                  npc.AddBuff(186, 120, false);
              }
            }
          }
          if ((double) this.ai[0] < 570.0)
            return;
          this.Kill();
        }
      }
      else if (this.aiStyle == 112)
      {
        if (this.type == 590)
        {
          int num1 = this.frameCounter + 1;
          this.frameCounter = num1;
          if (num1 >= 4)
          {
            this.frameCounter = 0;
            int num2 = this.frame + 1;
            this.frame = num2;
            if (num2 >= 3)
              this.frame = 0;
          }
          if (this.alpha > 0)
            this.alpha = this.alpha - 15;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha == 0)
          {
            float num2 = (float) Main.rand.Next(28, 42) * 0.005f + (float) (270 - (int) Main.mouseTextColor) / 500f;
            float num3 = 0.1f;
            float num4 = (float) (0.300000011920929 + (double) num2 / 2.0);
            float num5 = 0.6f + num2;
            float num6 = 0.35f;
            Lighting.AddLight(this.Center, num3 * num6, num4 * num6, num5 * num6);
          }
          this.velocity = new Vector2(0.0f, (float) Math.Sin(6.28318548202515 * (double) this.ai[0] / 180.0) * 0.15f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[0] >= 180.0)
            this.ai[0] = 0.0f;
        }
        if (this.type != 644)
          return;
        Color rgb = Main.hslToRgb(this.ai[0], 1f, 0.5f);
        int index1 = (int) this.ai[1];
        if (index1 < 0 || index1 >= 1000 || !Main.projectile[index1].active && Main.projectile[index1].type != 643)
        {
          this.ai[1] = -1f;
        }
        else
        {
          DelegateMethods.v3_1 = rgb.ToVector3() * 0.5f;
          Utils.PlotTileLine(this.Center, Main.projectile[index1].Center, 8f, new Utils.PerLinePoint(DelegateMethods.CastLight));
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = (float) ((double) Main.rand.NextFloat() * 0.800000011920929 + 0.800000011920929);
          this.direction = Main.rand.Next(2) > 0 ? 1 : -1;
        }
        this.rotation = (float) ((double) this.localAI[1] / 40.0 * 6.28318548202515) * (float) this.direction;
        if (this.alpha > 0)
          this.alpha = this.alpha - 8;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha == 0)
          Lighting.AddLight(this.Center, rgb.ToVector3() * 0.5f);
        for (int index2 = 0; index2 < 2; ++index2)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index2 * 3.14159274101257, new Vector2()).RotatedBy((double) this.rotation, new Vector2());
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 225, rgb, 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        for (int index2 = 0; index2 < 2; ++index2)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index2 * 3.14159274101257, new Vector2());
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 225, rgb, 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        if (Main.rand.Next(10) == 0)
        {
          float num1 = (float) (1.0 + (double) Main.rand.NextFloat() * 2.0);
          float num2 = 1f + Main.rand.NextFloat();
          float num3 = 1f + Main.rand.NextFloat();
          Vector2 vector2_1 = Utils.RandomVector2(Main.rand, -1f, 1f);
          if (vector2_1 != Vector2.Zero)
            vector2_1.Normalize();
          Vector2 vector2_2 = this.Center + vector2_1 * (float) (20.0 + (double) Main.rand.NextFloat() * 100.0);
          Point tileCoordinates = vector2_2.ToTileCoordinates();
          bool flag = true;
          if (!WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 0))
            flag = false;
          if (flag && WorldGen.SolidTile(tileCoordinates.X, tileCoordinates.Y))
            flag = false;
          if (flag)
          {
            Dust rf = Main.dust[Dust.NewDust(vector2_2, 0, 0, 267, 0.0f, 0.0f, (int) sbyte.MaxValue, rgb, 1f)];
            rf.noGravity = true;
            rf.position = vector2_2;
            rf.velocity = -Vector2.UnitY * num1 * (float) ((double) Main.rand.NextFloat() * 0.899999976158142 + 1.60000002384186);
            rf.fadeIn = num2;
            rf.scale = num3;
            rf.noLight = true;
            Dust dust1 = Dust.CloneDust(rf);
            Dust dust2 = dust1;
            dust2.scale = dust2.scale * 0.65f;
            Dust dust3 = dust1;
            dust3.fadeIn = dust3.fadeIn * 0.65f;
            dust1.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          }
        }
        this.scale = this.Opacity / 2f * this.localAI[0];
        this.velocity = Vector2.Zero;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.localAI[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.localAI[1] < 60.0)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 113)
      {
        int num1 = 25;
        if (this.type == 614)
          num1 = 63;
        if (this.alpha > 0)
          this.alpha = this.alpha - num1;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] == 0.0)
        {
          if (this.type == 614)
          {
            int index = (int) this.ai[1];
            if (!Main.npc[index].CanBeChasedBy((object) this, true))
            {
              this.Kill();
              return;
            }
            this.velocity.ToRotation();
            Vector2 vector2 = Main.npc[index].Center - this.Center;
            if (vector2 != Vector2.Zero)
            {
              vector2.Normalize();
              vector2 *= 14f;
            }
            float num2 = 5f;
            this.velocity = (this.velocity * (num2 - 1f) + vector2) / num2;
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 1f;
            if ((double) this.ai[1] >= 45.0)
            {
              float num2 = 0.98f;
              float num3 = 0.35f;
              if (this.type == 636)
              {
                num2 = 0.995f;
                num3 = 0.15f;
              }
              this.ai[1] = 45f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * num2;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 + num3;
            }
            this.rotation = this.velocity.ToRotation() + 1.570796f;
          }
        }
        if ((double) this.ai[0] == 1.0)
        {
          this.ignoreWater = true;
          this.tileCollide = false;
          int num2 = 15;
          if (this.type == 636)
            num2 = 5 * this.MaxUpdates;
          bool flag1 = false;
          bool flag2 = false;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] % 30.0 == 0.0)
            flag2 = true;
          int index = (int) this.ai[1];
          if ((double) this.localAI[0] >= (double) (60 * num2))
            flag1 = true;
          else if (index < 0 || index >= 200)
            flag1 = true;
          else if (Main.npc[index].active && !Main.npc[index].dontTakeDamage)
          {
            this.Center = Main.npc[index].Center - this.velocity * 2f;
            this.gfxOffY = Main.npc[index].gfxOffY;
            if (flag2)
              Main.npc[index].HitEffect(0, 1.0);
          }
          else
            flag1 = true;
          if (flag1)
            this.Kill();
        }
        if (this.type == 614)
          Lighting.AddLight(this.Center, 0.2f, 0.6f, 0.7f);
        if (this.type != 636)
          return;
        Lighting.AddLight(this.Center, 0.8f, 0.7f, 0.4f);
      }
      else if (this.aiStyle == 114)
      {
        if (Main.netMode == 2 && (double) this.localAI[0] == 0.0)
        {
          PortalHelper.SyncPortalSections(this.Center, 1);
          this.localAI[0] = 1f;
        }
        this.timeLeft = 3;
        bool flag = false;
        if (this.owner != (int) byte.MaxValue && (!Main.player[this.owner].active || Main.player[this.owner].dead || (double) this.Distance(Main.player[this.owner].Center) > 12800.0))
          flag = true;
        if (!flag && !WorldGen.InWorld((int) this.Center.X / 16, (int) this.Center.Y / 16, Lighting.offScreenTiles))
          flag = true;
        if (!flag && !PortalHelper.SupportedTilesAreFine(this.Center, this.ai[0]))
          flag = true;
        if (flag)
        {
          this.Kill();
        }
        else
        {
          Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[1]);
          this.alpha = this.alpha - 25;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.alpha == 0)
            Lighting.AddLight(this.Center + this.velocity * 3f, portalColor.ToVector3() * 0.5f);
          int num1 = this.frameCounter + 1;
          this.frameCounter = num1;
          if (num1 >= 6)
          {
            this.frameCounter = 0;
            int num2 = this.frame + 1;
            this.frame = num2;
            if (num2 >= Main.projFrames[this.type])
              this.frame = 0;
          }
          this.rotation = this.ai[0] - 1.570796f;
        }
      }
      else if (this.aiStyle == 115)
      {
        Lighting.AddLight(this.Center, new Vector3(0.075f, 0.3f, 0.15f));
        this.velocity = this.velocity * 0.985f;
        this.rotation = this.rotation + this.velocity.X * 0.2f;
        this.rotation = (double) this.velocity.X <= 0.0 ? this.rotation - 0.08f : this.rotation + 0.08f;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[1] <= 30.0)
          return;
        this.alpha = this.alpha + 10;
        if (this.alpha < (int) byte.MaxValue)
          return;
        this.alpha = (int) byte.MaxValue;
        this.Kill();
      }
      else if (this.aiStyle == 116)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.rotation = this.ai[1];
          this.localAI[0] = 1f;
        }
        Player player = Main.player[this.owner];
        if (player.setSolar)
          this.timeLeft = 2;
        this.rotation = this.rotation.AngleLerp(MathHelper.WrapAngle((float) ((double) player.miscCounter / 300.0 * 12.5663709640503) + this.ai[1]), 0.05f);
        this.alpha = this.alpha - 15;
        if (this.alpha < 0)
          this.alpha = 0;
        this.velocity = this.rotation.ToRotationVector2() * 100f - player.velocity;
        this.Center = player.Center - this.velocity;
      }
      else if (this.aiStyle == 117)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 0.01f;
        this.scale = this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local2 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local2 = ^local2 + 1f;
        if ((double) this.ai[0] >= (double) (3 * Main.projFrames[this.type]))
        {
          this.Kill();
        }
        else
        {
          int num1 = this.frameCounter + 1;
          this.frameCounter = num1;
          if (num1 >= 3)
          {
            this.frameCounter = 0;
            int num2 = this.frame + 1;
            this.frame = num2;
            if (num2 >= Main.projFrames[this.type])
              this.hide = true;
          }
          this.alpha = this.alpha - 63;
          if (this.alpha < 0)
            this.alpha = 0;
          bool flag1 = this.type == 612;
          bool flag2 = this.type == 624;
          if (flag1)
            Lighting.AddLight(this.Center, 0.9f, 0.8f, 0.6f);
          if ((double) this.ai[0] != 1.0)
            return;
          this.position = this.Center;
          this.width = this.height = (int) (52.0 * (double) this.scale);
          this.Center = this.position;
          this.Damage();
          if (flag1)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            for (int index1 = 0; index1 < 4; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
            }
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 200, new Color(), 2.7f);
              Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 3f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
              Main.dust[index3].noGravity = true;
              Main.dust[index3].fadeIn = 2.5f;
            }
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 2.7f);
              Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 3f;
            }
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
              Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 3f;
            }
          }
          if (!flag2)
            return;
          Main.PlaySound(SoundID.Item14, this.position);
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 2f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].fadeIn = 2.5f;
            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
          }
          for (int index1 = 0; index1 < 15; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 0, new Color(), 2.7f);
            Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 3f;
            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
          }
          float num3 = (float) Main.rand.NextDouble() * 6.283185f;
          float num4 = (float) Main.rand.NextDouble() * 6.283185f;
          float num5 = (float) Main.rand.NextDouble() * 6.283185f;
          float num6 = (float) (7.0 + Main.rand.NextDouble() * 7.0);
          float num7 = (float) (7.0 + Main.rand.NextDouble() * 7.0);
          float num8 = (float) (7.0 + Main.rand.NextDouble() * 7.0);
          float num9 = num6;
          if ((double) num7 > (double) num9)
            num9 = num7;
          if ((double) num8 > (double) num9)
            num9 = num8;
          for (int index1 = 0; index1 < 200; ++index1)
          {
            int Type = 135;
            float num2 = num9;
            if (index1 > 50)
              num2 = num7;
            if (index1 > 100)
              num2 = num6;
            if (index1 > 150)
              num2 = num8;
            int index2 = Dust.NewDust(this.position, 6, 6, Type, 0.0f, 0.0f, 100, new Color(), 1f);
            Vector2 velocity = Main.dust[index2].velocity;
            Main.dust[index2].position = this.Center;
            velocity.Normalize();
            Vector2 spinningpoint = velocity * num2;
            if (index1 > 150)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @spinningpoint.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 * 0.5f;
              spinningpoint = spinningpoint.RotatedBy((double) num5, new Vector2());
            }
            else if (index1 > 100)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @spinningpoint.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 * 0.5f;
              spinningpoint = spinningpoint.RotatedBy((double) num3, new Vector2());
            }
            else if (index1 > 50)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @spinningpoint.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 * 0.5f;
              spinningpoint = spinningpoint.RotatedBy((double) num4, new Vector2());
            }
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.2f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity + spinningpoint;
            Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
            if (index1 <= 200)
            {
              Main.dust[index2].scale = 2f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].fadeIn = Main.rand.NextFloat() * 2f;
              if (Main.rand.Next(4) == 0)
                Main.dust[index2].fadeIn = 2.5f;
              Main.dust[index2].noLight = true;
              if (index1 < 100)
              {
                Dust dust3 = Main.dust[index2];
                dust3.position = dust3.position + Main.dust[index2].velocity * 20f;
                Dust dust4 = Main.dust[index2];
                dust4.velocity = dust4.velocity * -1f;
              }
            }
          }
        }
      }
      else if (this.aiStyle == 118)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        int num1 = 0;
        if ((double) this.velocity.Length() <= 4.0)
          num1 = 1;
        this.alpha = this.alpha - 15;
        if (this.alpha < 0)
          this.alpha = 0;
        if (num1 == 0)
        {
          this.rotation = this.rotation - (float) Math.PI / 30f;
          if (Main.rand.Next(3) == 0)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, Utils.SelectRandom<int>(Main.rand, new int[2]{ 86, 90 }), 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
              dust.velocity = spinningpoint.RotatedBy(1.57079637050629, new Vector2()) * 6f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this;
            }
            else
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * 30f;
              dust.velocity = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 3f;
              dust.scale = 0.5f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this;
            }
          }
          if ((double) this.ai[0] >= 30.0)
          {
            this.velocity = this.velocity * 0.98f;
            this.scale = this.scale + 0.007446808f;
            if ((double) this.scale > 1.29999995231628)
              this.scale = 1.3f;
            this.rotation = this.rotation - (float) Math.PI / 180f;
          }
          if ((double) this.velocity.Length() < 4.09999990463257)
          {
            this.velocity.Normalize();
            this.velocity = this.velocity * 4f;
            this.ai[0] = 0.0f;
          }
        }
        else if (num1 == 1)
        {
          this.rotation = this.rotation - (float) Math.PI / 30f;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Vector2 spinningpoint1 = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust1 = Main.dust[Dust.NewDust(this.Center - spinningpoint1 * 30f, 0, 0, 86, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust1.noGravity = true;
              dust1.position = this.Center - spinningpoint1 * (float) Main.rand.Next(10, 21);
              dust1.velocity = spinningpoint1.RotatedBy(1.57079637050629, new Vector2()) * 6f;
              dust1.scale = 0.9f + Main.rand.NextFloat();
              dust1.fadeIn = 0.5f;
              dust1.customData = (object) this;
              Vector2 spinningpoint2 = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust2 = Main.dust[Dust.NewDust(this.Center - spinningpoint2 * 30f, 0, 0, 90, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust2.noGravity = true;
              dust2.position = this.Center - spinningpoint2 * (float) Main.rand.Next(10, 21);
              dust2.velocity = spinningpoint2.RotatedBy(1.57079637050629, new Vector2()) * 6f;
              dust2.scale = 0.9f + Main.rand.NextFloat();
              dust2.fadeIn = 0.5f;
              dust2.customData = (object) this;
              dust2.color = Color.Crimson;
            }
            else
            {
              Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
              Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
              dust.noGravity = true;
              dust.position = this.Center - spinningpoint * (float) Main.rand.Next(20, 31);
              dust.velocity = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 5f;
              dust.scale = 0.9f + Main.rand.NextFloat();
              dust.fadeIn = 0.5f;
              dust.customData = (object) this;
            }
          }
          if ((double) this.ai[0] % 30.0 == 0.0 && (double) this.ai[0] < 241.0 && Main.myPlayer == this.owner)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.28318548202515) * 12f;
            Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2.X, vector2.Y, 618, this.damage / 2, 0.0f, this.owner, 0.0f, (float) this.whoAmI);
          }
          Vector2 vector2_1 = this.Center;
          float num2 = 800f;
          bool flag = false;
          int num3 = 0;
          if ((double) this.ai[1] == 0.0)
          {
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].CanBeChasedBy((object) this, false))
              {
                Vector2 center = Main.npc[index].Center;
                if ((double) this.Distance(center) < (double) num2 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                {
                  num2 = this.Distance(center);
                  vector2_1 = center;
                  flag = true;
                  num3 = index;
                }
              }
            }
            if (flag)
            {
              if ((double) this.ai[1] != (double) (num3 + 1))
                this.netUpdate = true;
              this.ai[1] = (float) (num3 + 1);
            }
            flag = false;
          }
          if ((double) this.ai[1] != 0.0)
          {
            int index = (int) ((double) this.ai[1] - 1.0);
            if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true) && (double) this.Distance(Main.npc[index].Center) < 1000.0)
            {
              flag = true;
              vector2_1 = Main.npc[index].Center;
            }
          }
          if (!this.friendly)
            flag = false;
          if (flag)
          {
            float num4 = 4f;
            int num5 = 8;
            Vector2 vector2_2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num6 = vector2_1.X - vector2_2.X;
            float num7 = vector2_1.Y - vector2_2.Y;
            float num8 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7);
            float num9 = num4 / num8;
            float num10 = num6 * num9;
            float num11 = num7 * num9;
            this.velocity.X = (this.velocity.X * (float) (num5 - 1) + num10) / (float) num5;
            this.velocity.Y = (this.velocity.Y * (float) (num5 - 1) + num11) / (float) num5;
          }
        }
        if (this.alpha < 150)
          Lighting.AddLight(this.Center, 0.7f, 0.2f, 0.6f);
        if ((double) this.ai[0] < 600.0)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 119)
      {
        int num1 = 0;
        float num2 = 0.0f;
        float x = 0.0f;
        float y = 0.0f;
        bool flag1 = false;
        bool flag2 = false;
        if (this.type == 618)
        {
          num1 = 617;
          num2 = 420f;
          x = 0.15f;
          y = 0.15f;
        }
        if (flag2)
        {
          int index = (int) this.ai[1];
          if (!Main.projectile[index].active || Main.projectile[index].type != num1)
          {
            this.Kill();
            return;
          }
          this.timeLeft = 2;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.ai[0] >= (double) num2)
          return;
        bool flag3 = true;
        int index1 = (int) this.ai[1];
        if (Main.projectile[index1].active && Main.projectile[index1].type == num1)
        {
          if (!flag1 && Main.projectile[index1].oldPos[1] != Vector2.Zero)
            this.position = this.position + Main.projectile[index1].position - Main.projectile[index1].oldPos[1];
          if (this.Center.HasNaNs())
          {
            this.Kill();
            return;
          }
        }
        else
        {
          this.ai[0] = num2;
          flag3 = false;
          this.Kill();
        }
        if (flag3 && !flag1)
        {
          this.velocity = this.velocity + new Vector2((float) Math.Sign(Main.projectile[index1].Center.X - this.Center.X), (float) Math.Sign(Main.projectile[index1].Center.Y - this.Center.Y)) * new Vector2(x, y);
          if ((double) this.velocity.Length() > 6.0)
            this.velocity = this.velocity * (6f / this.velocity.Length());
        }
        if (this.type == 618)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index2 = Dust.NewDust(this.Center, 8, 8, 86, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = this.Center;
            Main.dust[index2].velocity = this.velocity;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.5f;
            if (flag3)
              Main.dust[index2].customData = (object) Main.projectile[(int) this.ai[1]];
          }
          this.alpha = (int) byte.MaxValue;
        }
        else
          this.Kill();
      }
      else if (this.aiStyle == 120)
      {
        Player player = Main.player[this.owner];
        if (!player.active)
        {
          this.active = false;
        }
        else
        {
          bool flag1 = this.type == 623;
          Vector2 Other = player.Center;
          float num1 = 100f;
          float num2 = 300f;
          float num3 = 100f;
          float num4 = 100f;
          if (flag1)
          {
            if (player.dead)
              player.stardustGuardian = false;
            if (player.stardustGuardian)
              this.timeLeft = 2;
            num1 = 150f;
            num2 = 250f;
            num3 = 200f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Other.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 - (float) ((5 + player.width / 2) * player.direction);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Other.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - 25f;
            Lighting.AddLight(this.Center, 0.9f, 0.9f, 0.7f);
            if ((double) this.ai[0] != 3.0 && this.alpha == (int) byte.MaxValue)
            {
              this.alpha = 0;
              for (int index1 = 0; index1 < 30; ++index1)
              {
                int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 200, new Color(), 1.7f);
                Main.dust[index2].noGravity = true;
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 3f;
                Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
                int index3 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 1f);
                Dust dust2 = Main.dust[index3];
                dust2.velocity = dust2.velocity * 2f;
                Main.dust[index3].noGravity = true;
                Main.dust[index3].fadeIn = 2.5f;
                Main.dust[index3].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
              }
            }
            if ((double) this.localAI[0] > 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.localAI[0];
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 - 1f;
            }
          }
          if ((double) this.ai[0] != 0.0)
          {
            Main.player[this.owner].tankPet = this.whoAmI;
            Main.player[this.owner].tankPetReset = false;
          }
          if ((double) this.ai[0] == 0.0)
          {
            if (player.HasMinionRestTarget)
            {
              this.ai[0] = 3f;
              this.netUpdate = true;
            }
            this.Center = Vector2.Lerp(this.Center, Other, 0.2f);
            this.velocity = this.velocity * 0.8f;
            this.direction = this.spriteDirection = player.direction;
            if (flag1)
            {
              int num5 = this.frameCounter + 1;
              this.frameCounter = num5;
              if (num5 >= 9)
              {
                this.frameCounter = 0;
                int num6 = this.frame + 1;
                this.frame = num6;
                if (num6 >= Main.projFrames[this.type] - 4)
                  this.frame = 0;
              }
            }
          }
          else if ((double) this.ai[0] == 1.0)
          {
            if (player.HasMinionRestTarget)
            {
              Other = player.MinionRestTargetPoint;
            }
            else
            {
              this.ai[0] = 0.0f;
              this.netUpdate = true;
            }
            int index1 = -1;
            float num5 = num2;
            bool flag2 = true;
            if (flag1 && (double) Math.Abs(this.Center.X - Other.X) > (double) num1 + 20.0)
              flag2 = false;
            if (flag2)
            {
              for (int index2 = 0; index2 < 200; ++index2)
              {
                NPC npc = Main.npc[index2];
                if (npc.CanBeChasedBy((object) this, false))
                {
                  float num6 = this.Distance(npc.Center);
                  if ((double) num6 < (double) num2)
                  {
                    index1 = index2;
                    num5 = num6;
                  }
                }
              }
            }
            if (index1 != -1)
            {
              NPC npc = Main.npc[index1];
              this.direction = this.spriteDirection = ((double) npc.Center.X > (double) this.Center.X).ToDirectionInt();
              float num6 = Math.Abs(Other.X - this.Center.X);
              float num7 = Math.Abs(npc.Center.X - this.Center.X);
              float num8 = Math.Abs(Other.Y - this.Center.Y);
              float num9 = Math.Abs(npc.Center.Y - this.Bottom.Y);
              float directionInt = (float) ((double) npc.Center.Y > (double) this.Bottom.Y).ToDirectionInt();
              if (((double) num6 < (double) num1 || ((double) Other.X - (double) this.Center.X) * (double) this.direction < 0.0) && ((double) num7 > 20.0 && (double) num7 < (double) num1 - (double) num6 + 100.0))
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local + 0.1f * (float) this.direction;
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * 0.7f;
              }
              if (((double) num8 < (double) num4 || ((double) Other.Y - (double) this.Bottom.Y) * (double) directionInt < 0.0) && ((double) num9 > 10.0 && (double) num9 < (double) num4 - (double) num8 + 10.0))
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local + 0.1f * directionInt;
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * 0.7f;
              }
              if ((double) this.localAI[0] == 0.0 && this.owner == Main.myPlayer && (double) num7 < (double) num3)
              {
                this.ai[1] = 0.0f;
                this.ai[0] = 2f;
                this.netUpdate = true;
                this.localAI[0] = 90f;
              }
            }
            else
            {
              if ((double) Math.Abs(Other.X - this.Center.X) > (double) num1 + 40.0)
              {
                this.ai[0] = 3f;
                this.netUpdate = true;
              }
              else if ((double) Math.Abs(Other.X - this.Center.X) > 20.0)
              {
                this.direction = this.spriteDirection = ((double) Other.X > (double) this.Center.X).ToDirectionInt();
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local + 0.06f * (float) this.direction;
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * 0.8f;
                this.direction = this.spriteDirection = ((double) player.Center.X < (double) this.Center.X).ToDirectionInt();
              }
              if ((double) Math.Abs(Other.Y - this.Center.Y) > (double) num4)
              {
                this.ai[0] = 3f;
                this.netUpdate = true;
              }
              else if ((double) Math.Abs(Other.Y - this.Center.Y) > 10.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local + 0.06f * (float) Math.Sign(Other.Y - this.Center.Y);
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * 0.8f;
              }
            }
            if (flag1)
            {
              int num6 = this.frameCounter + 1;
              this.frameCounter = num6;
              if (num6 >= 9)
              {
                this.frameCounter = 0;
                int num7 = this.frame + 1;
                this.frame = num7;
                if (num7 >= Main.projFrames[this.type] - 4)
                  this.frame = 0;
              }
            }
          }
          else if ((double) this.ai[0] == 2.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * 0.9f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 1f;
            float num5 = 0.0f;
            if (flag1)
            {
              num5 = 20f;
              if ((double) this.ai[1] == 10.0 && this.owner == Main.myPlayer)
                Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 624, (int) (20.0 * (double) Main.player[this.owner].minionDamage), 6f, this.owner, 0.0f, 5f);
            }
            if ((double) this.ai[1] >= (double) num5)
            {
              this.ai[1] = 0.0f;
              this.ai[0] = 1f;
              this.netUpdate = true;
            }
            if (flag1)
            {
              if (this.frame < Main.projFrames[this.type] - 4)
              {
                this.frame = Main.projFrames[this.type] - 1;
                this.frameCounter = 0;
              }
              int num6 = this.frameCounter + 1;
              this.frameCounter = num6;
              if (num6 >= 5)
              {
                this.frameCounter = 0;
                int num7 = this.frame - 1;
                this.frame = num7;
                if (num7 < Main.projFrames[this.type] - 5)
                  this.frame = Main.projFrames[this.type] - 1;
              }
            }
          }
          if ((double) this.ai[0] != 3.0)
            return;
          if (player.HasMinionRestTarget)
          {
            Other = player.MinionRestTargetPoint;
          }
          else
          {
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          if (this.alpha == 0)
          {
            this.alpha = (int) byte.MaxValue;
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 200, new Color(), 1.7f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 3f;
              Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
              int index3 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
              Main.dust[index3].noGravity = true;
              Main.dust[index3].fadeIn = 2.5f;
              Main.dust[index3].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
            }
          }
          else
          {
            for (int index1 = 0; index1 < 2; ++index1)
            {
              int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 200, new Color(), 1.7f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 3f;
              Main.dust[index2].noLight = true;
              Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
              int index3 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
              Main.dust[index3].noGravity = true;
              Main.dust[index3].fadeIn = 2.5f;
              Main.dust[index3].noLight = true;
              Main.dust[index3].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cPet, Main.player[this.owner]);
            }
          }
          this.velocity = this.velocity * 0.7f;
          this.Center = Vector2.Lerp(this.Center, Other, 0.2f);
          if ((double) this.Distance(Other) >= 10.0)
            return;
          this.ai[0] = 1f;
          this.netUpdate = true;
        }
      }
      else if (this.aiStyle == 121)
      {
        Player player = Main.player[this.owner];
        if ((int) Main.time % 120 == 0)
          this.netUpdate = true;
        if (!player.active)
        {
          this.active = false;
        }
        else
        {
          bool flag1 = this.type == 625;
          bool flag2 = this.type == 625 || this.type == 626 || this.type == 627 || this.type == 628;
          int num1 = 10;
          if (flag2)
          {
            if (player.dead)
              player.stardustDragon = false;
            if (player.stardustDragon)
              this.timeLeft = 2;
            num1 = 30;
            if (Main.rand.Next(30) == 0)
            {
              int index = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 0, new Color(), 2f);
              Main.dust[index].noGravity = true;
              Main.dust[index].fadeIn = 2f;
              Point tileCoordinates = Main.dust[index].position.ToTileCoordinates();
              if (WorldGen.InWorld(tileCoordinates.X, tileCoordinates.Y, 5) && WorldGen.SolidTile(tileCoordinates.X, tileCoordinates.Y))
                Main.dust[index].noLight = true;
            }
          }
          if (flag1)
          {
            Vector2 center = player.Center;
            float num2 = 700f;
            float num3 = 1000f;
            int index1 = -1;
            if ((double) this.Distance(center) > 2000.0)
            {
              this.Center = center;
              this.netUpdate = true;
            }
            float num4 = num2;
            bool flag3 = true;
            int num5 = -1;
            int num6 = -1;
            if (flag3)
            {
              NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
              if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
              {
                float num7 = this.Distance(minionAttackTargetNpc.Center);
                if ((double) num7 < (double) num2 * 2.0)
                {
                  index1 = minionAttackTargetNpc.whoAmI;
                  num4 = num7;
                  if (minionAttackTargetNpc.boss)
                    num6 = minionAttackTargetNpc.whoAmI;
                  else
                    num5 = minionAttackTargetNpc.whoAmI;
                }
              }
              if (index1 < 0)
              {
                for (int index2 = 0; index2 < 200; ++index2)
                {
                  NPC npc = Main.npc[index2];
                  if (npc.CanBeChasedBy((object) this, false) && (double) player.Distance(npc.Center) < (double) num3)
                  {
                    float num7 = this.Distance(npc.Center);
                    if ((double) num7 < (double) num2)
                    {
                      index1 = index2;
                      num4 = num7;
                      if (npc.boss)
                        num6 = index2;
                      else
                        num5 = index2;
                    }
                  }
                }
              }
            }
            if (index1 != -1)
            {
              NPC npc = Main.npc[index1];
              Vector2 vector2 = npc.Center - this.Center;
              float directionInt1 = (float) ((double) vector2.X > 0.0).ToDirectionInt();
              float directionInt2 = (float) ((double) vector2.Y > 0.0).ToDirectionInt();
              float num7 = 0.4f;
              if ((double) vector2.Length() < 600.0)
                num7 = 0.6f;
              if ((double) vector2.Length() < 300.0)
                num7 = 0.8f;
              if ((double) vector2.Length() > (double) npc.Size.Length() * 0.75)
              {
                this.velocity = this.velocity + Vector2.Normalize(vector2) * num7 * 1.5f;
                if ((double) Vector2.Dot(this.velocity, vector2) < 0.25)
                  this.velocity = this.velocity * 0.8f;
              }
              float num8 = 30f;
              if ((double) this.velocity.Length() > (double) num8)
                this.velocity = Vector2.Normalize(this.velocity) * num8;
            }
            else
            {
              float num7 = 0.2f;
              Vector2 vector2 = center - this.Center;
              if ((double) vector2.Length() < 200.0)
                num7 = 0.12f;
              if ((double) vector2.Length() < 140.0)
                num7 = 0.06f;
              if ((double) vector2.Length() > 100.0)
              {
                if ((double) Math.Abs(center.X - this.Center.X) > 20.0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @this.velocity.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local + num7 * (float) Math.Sign(center.X - this.Center.X);
                }
                if ((double) Math.Abs(center.Y - this.Center.Y) > 10.0)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @this.velocity.Y;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local + num7 * (float) Math.Sign(center.Y - this.Center.Y);
                }
              }
              else if ((double) this.velocity.Length() > 2.0)
                this.velocity = this.velocity * 0.96f;
              if ((double) Math.Abs(this.velocity.Y) < 1.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @this.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local - 0.1f;
              }
              float num8 = 15f;
              if ((double) this.velocity.Length() > (double) num8)
                this.velocity = Vector2.Normalize(this.velocity) * num8;
            }
            this.rotation = this.velocity.ToRotation() + 1.570796f;
            int direction = this.direction;
            this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
            if (direction != this.direction)
              this.netUpdate = true;
            float num9 = MathHelper.Clamp(this.localAI[0], 0.0f, 50f);
            this.position = this.Center;
            this.scale = (float) (1.0 + (double) num9 * 0.00999999977648258);
            this.width = this.height = (int) ((double) num1 * (double) this.scale);
            this.Center = this.position;
            if (this.alpha <= 0)
              return;
            for (int index2 = 0; index2 < 2; ++index2)
            {
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 2f);
              Main.dust[index3].noGravity = true;
              Main.dust[index3].noLight = true;
            }
            this.alpha = this.alpha - 42;
            if (this.alpha >= 0)
              return;
            this.alpha = 0;
          }
          else
          {
            bool flag3 = false;
            Vector2 vector2_1 = Vector2.Zero;
            Vector2 vector2_2 = Vector2.Zero;
            float num2 = 0.0f;
            float num3 = 0.0f;
            float num4 = 1f;
            int num5 = (int) byte.MaxValue;
            if ((double) this.ai[1] == 1.0)
            {
              this.ai[1] = 0.0f;
              this.netUpdate = true;
            }
            int byUuid = Projectile.GetByUUID(this.owner, (int) this.ai[0]);
            if (flag2 && byUuid >= 0 && Main.projectile[byUuid].active && (Main.projectile[byUuid].type == 625 || Main.projectile[byUuid].type == 626 || Main.projectile[byUuid].type == 627))
            {
              flag3 = true;
              vector2_1 = Main.projectile[byUuid].Center;
              vector2_2 = Main.projectile[byUuid].velocity;
              num2 = Main.projectile[byUuid].rotation;
              num4 = MathHelper.Clamp(Main.projectile[byUuid].scale, 0.0f, 50f);
              num3 = 16f;
              num5 = Main.projectile[byUuid].alpha;
              Main.projectile[byUuid].localAI[0] = this.localAI[0] + 1f;
              if (Main.projectile[byUuid].type != 625)
                Main.projectile[byUuid].localAI[1] = (float) this.whoAmI;
              if (this.owner == Main.myPlayer && Main.projectile[byUuid].type == 625 && this.type == 628)
              {
                Main.projectile[byUuid].Kill();
                this.Kill();
                return;
              }
            }
            if (!flag3)
              return;
            if (this.alpha > 0)
            {
              for (int index1 = 0; index1 < 2; ++index1)
              {
                int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 2f);
                Main.dust[index2].noGravity = true;
                Main.dust[index2].noLight = true;
              }
            }
            this.alpha = this.alpha - 42;
            if (this.alpha < 0)
              this.alpha = 0;
            this.velocity = Vector2.Zero;
            Vector2 vector2_3 = vector2_1 - this.Center;
            if ((double) num2 != (double) this.rotation)
            {
              float num6 = MathHelper.WrapAngle(num2 - this.rotation);
              vector2_3 = vector2_3.RotatedBy((double) num6 * 0.100000001490116, new Vector2());
            }
            this.rotation = vector2_3.ToRotation() + 1.570796f;
            this.position = this.Center;
            this.scale = num4;
            this.width = this.height = (int) ((double) num1 * (double) this.scale);
            this.Center = this.position;
            if (vector2_3 != Vector2.Zero)
              this.Center = vector2_1 - Vector2.Normalize(vector2_3) * num3 * num4;
            this.spriteDirection = (double) vector2_3.X > 0.0 ? 1 : -1;
          }
        }
      }
      else if (this.aiStyle == 122)
      {
        int index = (int) this.ai[0];
        bool flag = false;
        if (index == -1 || !Main.npc[index].active)
          flag = true;
        if (flag)
        {
          if (this.type == 629)
          {
            this.Kill();
            return;
          }
          if (this.type == 631 && (double) this.ai[0] != -1.0)
          {
            this.ai[0] = -1f;
            this.netUpdate = true;
          }
        }
        if (!flag && this.Hitbox.Intersects(Main.npc[index].Hitbox))
        {
          this.Kill();
          if (this.type != 631)
            return;
          this.localAI[1] = 1f;
          this.Damage();
        }
        else
        {
          if (this.type == 629)
          {
            this.velocity = Vector2.Normalize(Main.npc[index].Center - this.Center) * 5f;
            Dust.QuickDust(this.Center, Color.Red);
          }
          if (this.type != 631)
            return;
          if ((double) this.ai[1] > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 1f;
            this.velocity = Vector2.Zero;
          }
          else
          {
            if (flag)
            {
              if (this.velocity == Vector2.Zero)
                this.Kill();
              this.tileCollide = true;
              this.alpha = this.alpha + 10;
              if (this.alpha > (int) byte.MaxValue)
                this.Kill();
            }
            else
            {
              this.velocity = Vector2.Normalize(Main.npc[index].Center - this.Center) * 12f;
              this.alpha = this.alpha - 15;
              if (this.alpha < 0)
                this.alpha = 0;
            }
            this.rotation = this.velocity.ToRotation() - 1.570796f;
          }
        }
      }
      else if (this.aiStyle == 123)
      {
        bool flag1 = this.type == 641;
        bool flag2 = this.type == 643;
        float num1 = 1000f;
        this.velocity = Vector2.Zero;
        if (flag1)
        {
          this.alpha = this.alpha - 5;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.direction == 0)
            this.direction = Main.player[this.owner].direction;
          this.rotation = this.rotation - (float) ((double) this.direction * 6.28318548202515 / 120.0);
          this.scale = this.Opacity;
          Lighting.AddLight(this.Center, new Vector3(0.3f, 0.9f, 0.7f) * this.Opacity);
          if (Main.rand.Next(2) == 0)
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * (float) Main.rand.Next(10, 21);
            dust.velocity = spinningpoint.RotatedBy(1.57079637050629, new Vector2()) * 6f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
          if (Main.rand.Next(2) == 0)
          {
            Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
            Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 30f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.noGravity = true;
            dust.position = this.Center - spinningpoint * 30f;
            dust.velocity = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 3f;
            dust.scale = 0.5f + Main.rand.NextFloat();
            dust.fadeIn = 0.5f;
            dust.customData = (object) this.Center;
          }
          if ((double) this.ai[0] < 0.0)
          {
            int index = Dust.NewDust(this.Center - Vector2.One * 8f, 16, 16, 229, this.velocity.X / 2f, this.velocity.Y / 2f, 0, new Color(), 1f);
            Dust dust = Main.dust[index];
            dust.velocity = dust.velocity * 2f;
            Main.dust[index].noGravity = true;
            Main.dust[index].scale = Utils.SelectRandom<float>(Main.rand, new float[2]
            {
              0.8f,
              1.65f
            });
            Main.dust[index].customData = (object) this;
          }
        }
        if (flag2)
        {
          this.alpha = this.alpha - 5;
          if (this.alpha < 0)
            this.alpha = 0;
          if (this.direction == 0)
            this.direction = Main.player[this.owner].direction;
          int num2 = this.frameCounter + 1;
          this.frameCounter = num2;
          if (num2 >= 3)
          {
            this.frameCounter = 0;
            int num3 = this.frame + 1;
            this.frame = num3;
            if (num3 >= Main.projFrames[this.type])
              this.frame = 0;
          }
          if (this.alpha == 0 && Main.rand.Next(15) == 0)
          {
            Dust dust = Main.dust[Dust.NewDust(this.Top, 0, 0, 261, 0.0f, 0.0f, 100, new Color(), 1f)];
            dust.velocity.X = 0.0f;
            dust.noGravity = true;
            dust.fadeIn = 1f;
            dust.position = this.Center + Vector2.UnitY.RotatedByRandom(6.28318548202515) * (float) (4.0 * (double) Main.rand.NextFloat() + 26.0);
            dust.scale = 0.5f;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.localAI[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.localAI[0] >= 60.0)
            this.localAI[0] = 0.0f;
        }
        if ((double) this.ai[0] < 0.0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          if (flag1)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.ai[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - (float) ((double) this.direction * 0.392699092626572 / 50.0);
          }
        }
        if ((double) this.ai[0] == 0.0)
        {
          int num2 = -1;
          float num3 = num1;
          NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
          if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
          {
            float num4 = this.Distance(minionAttackTargetNpc.Center);
            if ((double) num4 < (double) num3 && Collision.CanHitLine(this.Center, 0, 0, minionAttackTargetNpc.Center, 0, 0))
            {
              num3 = num4;
              num2 = minionAttackTargetNpc.whoAmI;
            }
          }
          if (num2 < 0)
          {
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.CanBeChasedBy((object) this, false))
              {
                float num4 = this.Distance(npc.Center);
                if ((double) num4 < (double) num3 && Collision.CanHitLine(this.Center, 0, 0, npc.Center, 0, 0))
                {
                  num3 = num4;
                  num2 = index;
                }
              }
            }
          }
          if (num2 != -1)
          {
            this.ai[0] = 1f;
            this.ai[1] = (float) num2;
            this.netUpdate = true;
            return;
          }
        }
        if ((double) this.ai[0] <= 0.0)
          return;
        int index1 = (int) this.ai[1];
        if (!Main.npc[index1].CanBeChasedBy((object) this, false))
        {
          this.ai[0] = 0.0f;
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          float num2 = 30f;
          if (flag2)
            num2 = 5f;
          if ((double) this.ai[0] < (double) num2)
            return;
          Vector2 unitY = this.DirectionTo(Main.npc[index1].Center);
          if (unitY.HasNaNs())
            unitY = Vector2.UnitY;
          float rotation = unitY.ToRotation();
          int num3 = (double) unitY.X > 0.0 ? 1 : -1;
          if (flag1)
          {
            this.direction = num3;
            this.ai[0] = -60f;
            this.ai[1] = rotation + (float) ((double) num3 * 3.14159274101257 / 16.0);
            this.netUpdate = true;
            if (this.owner == Main.myPlayer)
              Projectile.NewProjectile(this.Center.X, this.Center.Y, unitY.X, unitY.Y, 642, this.damage, this.knockBack, this.owner, 0.0f, (float) this.whoAmI);
          }
          if (!flag2)
            return;
          this.direction = num3;
          this.ai[0] = -20f;
          this.netUpdate = true;
          if (this.owner != Main.myPlayer)
            return;
          Vector2 spinninpoint = Main.npc[index1].position + Main.npc[index1].Size * Utils.RandomVector2(Main.rand, 0.0f, 1f) - this.Center;
          for (int index2 = 0; index2 < 3; ++index2)
          {
            Vector2 vector2 = this.Center + spinninpoint;
            if (index2 > 0)
              vector2 = this.Center + spinninpoint.RotatedByRandom(0.785398185253143) * (float) ((double) Main.rand.NextFloat() * 0.5 + 0.75);
            float x = Main.rgbToHsl(new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB)).X;
            Projectile.NewProjectile(vector2.X, vector2.Y, 0.0f, 0.0f, 644, this.damage, this.knockBack, this.owner, x, (float) this.whoAmI);
          }
        }
      }
      else if (this.aiStyle == 124)
      {
        Player player = Main.player[this.owner];
        if (player.dead)
        {
          this.Kill();
        }
        else
        {
          if (Main.myPlayer == this.owner && player.suspiciouslookingTentacle)
            this.timeLeft = 2;
          this.direction = this.spriteDirection = player.direction;
          DelegateMethods.v3_1 = new Vector3(0.5f, 0.9f, 1f) * 1.5f;
          Utils.PlotTileLine(this.Center, this.Center + this.velocity * 6f, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
          Utils.PlotTileLine(this.Left, this.Right, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
          Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
          Utils.PlotTileLine(player.Left, player.Right, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
          Vector2 vector2_1 = new Vector2((float) (player.direction * 30), -20f);
          Vector2 vector2_2 = player.MountedCenter + vector2_1;
          float num1 = Vector2.Distance(this.Center, vector2_2);
          if ((double) num1 > 1000.0)
            this.Center = player.Center + vector2_1;
          Vector2 vector2_3 = vector2_2 - this.Center;
          float num2 = 4f;
          if ((double) num1 < (double) num2)
            this.velocity = this.velocity * 0.25f;
          if (vector2_3 != Vector2.Zero)
          {
            if ((double) vector2_3.Length() < (double) num2)
              this.velocity = vector2_3;
            else
              this.velocity = vector2_3 * 0.1f;
          }
          if ((double) this.velocity.Length() > 6.0)
          {
            float num3 = this.velocity.ToRotation() + 1.570796f;
            if ((double) Math.Abs(this.rotation - num3) >= 3.14159274101257)
              this.rotation = (double) num3 >= (double) this.rotation ? this.rotation + 6.283185f : this.rotation - 6.283185f;
            float num4 = 12f;
            this.rotation = (this.rotation * (num4 - 1f) + num3) / num4;
            int num5 = this.frameCounter + 1;
            this.frameCounter = num5;
            if (num5 >= 4)
            {
              this.frameCounter = 0;
              int num6 = this.frame + 1;
              this.frame = num6;
              if (num6 >= Main.projFrames[this.type])
                this.frame = 0;
            }
          }
          else
          {
            if ((double) this.rotation > 3.14159274101257)
              this.rotation = this.rotation - 6.283185f;
            this.rotation = (double) this.rotation <= -0.00499999988824129 || (double) this.rotation >= 0.00499999988824129 ? this.rotation * 0.96f : 0.0f;
            int num3 = this.frameCounter + 1;
            this.frameCounter = num3;
            if (num3 >= 6)
            {
              this.frameCounter = 0;
              int num4 = this.frame + 1;
              this.frame = num4;
              if (num4 >= Main.projFrames[this.type])
                this.frame = 0;
            }
          }
          if ((double) this.ai[0] > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.ai[0];
            // ISSUE: variable of a reference type
            float& local2 = local1;
            // ISSUE: explicit reference operation
            float num3 = ^local1 + 1f;
            double num4 = (double) num3;
            // ISSUE: explicit reference operation
            ^local2 = (float) num4;
            if ((double) num3 >= 60.0)
            {
              this.ai[0] = 0.0f;
              this.ai[1] = 0.0f;
            }
          }
          if (Main.rand.Next(15) == 0)
          {
            int num3 = -1;
            int num4 = -1;
            float num5 = -1f;
            int num6 = 17;
            if ((double) (this.Center - player.Center).Length() < (double) Main.screenWidth)
            {
              int num7 = (int) this.Center.X / 16;
              int num8 = (int) this.Center.Y / 16;
              int num9 = (int) MathHelper.Clamp((float) num7, (float) (num6 + 1), (float) (Main.maxTilesX - num6 - 1));
              int num10 = (int) MathHelper.Clamp((float) num8, (float) (num6 + 1), (float) (Main.maxTilesY - num6 - 1));
              for (int index1 = num9 - num6; index1 <= num9 + num6; ++index1)
              {
                for (int index2 = num10 - num6; index2 <= num10 + num6; ++index2)
                {
                  int num11 = Main.rand.Next(8);
                  if (num11 < 4 && ((double) new Vector2((float) (num9 - index1), (float) (num10 - index2)).Length() < (double) num6 && Main.tile[index1, index2] != null && Main.tile[index1, index2].active()))
                  {
                    bool flag = false;
                    if ((int) Main.tile[index1, index2].type == 185 && (int) Main.tile[index1, index2].frameY == 18)
                    {
                      if ((int) Main.tile[index1, index2].frameX >= 576 && (int) Main.tile[index1, index2].frameX <= 882)
                        flag = true;
                    }
                    else if ((int) Main.tile[index1, index2].type == 186 && (int) Main.tile[index1, index2].frameX >= 864 && (int) Main.tile[index1, index2].frameX <= 1170)
                      flag = true;
                    if (flag || Main.tileSpelunker[(int) Main.tile[index1, index2].type] || Main.tileAlch[(int) Main.tile[index1, index2].type] && (int) Main.tile[index1, index2].type != 82)
                    {
                      float num12 = this.Distance(new Vector2((float) (index1 * 16 + 8), (float) (index2 * 16 + 8)));
                      if ((double) num12 < (double) num5 || (double) num5 == -1.0)
                      {
                        num5 = num12;
                        num3 = index1;
                        num4 = index2;
                        this.ai[0] = 1f;
                        this.ai[1] = this.AngleTo(new Vector2((float) (index1 * 16 + 8), (float) (index2 * 16 + 8)));
                      }
                      if (num11 < 2)
                      {
                        int index3 = Dust.NewDust(new Vector2((float) (index1 * 16), (float) (index2 * 16)), 16, 16, 204, 0.0f, 0.0f, 150, new Color(), 0.3f);
                        Main.dust[index3].fadeIn = 0.75f;
                        Dust dust = Main.dust[index3];
                        dust.velocity = dust.velocity * 0.1f;
                      }
                    }
                  }
                }
              }
            }
          }
          float f1 = (float) ((double) this.localAI[0] % 6.28318548202515 - 3.14159274101257);
          float num13 = (float) Math.IEEERemainder((double) this.localAI[1], 1.0);
          if ((double) num13 < 0.0)
            ++num13;
          float num14 = (float) Math.Floor((double) this.localAI[1]);
          float max = 0.999f;
          int num15 = 0;
          float amount = 0.1f;
          bool flag1 = (double) player.velocity.Length() > 3.0;
          int index4 = -1;
          int index5 = -1;
          float num16 = 300f;
          float num17 = 500f;
          for (int index1 = 0; index1 < 200; ++index1)
          {
            NPC npc = Main.npc[index1];
            if (npc.active && npc.chaseable && (!npc.dontTakeDamage && !npc.immortal))
            {
              float num3 = this.Distance(npc.Center);
              if (npc.friendly || npc.lifeMax <= 5)
              {
                if ((double) num3 < (double) num16 && !flag1)
                {
                  num16 = num3;
                  index5 = index1;
                }
              }
              else if ((double) num3 < (double) num17)
              {
                num17 = num3;
                index4 = index1;
              }
            }
          }
          float f2;
          float num18;
          float num19;
          if (flag1)
          {
            f2 = this.AngleTo(this.Center + player.velocity);
            num15 = 1;
            num18 = MathHelper.Clamp(num13 + 0.05f, 0.0f, max);
            num19 = num14 + (float) Math.Sign(-10f - num14);
          }
          else if (index4 != -1)
          {
            f2 = this.AngleTo(Main.npc[index4].Center);
            num15 = 2;
            num18 = MathHelper.Clamp(num13 + 0.05f, 0.0f, max);
            num19 = num14 + (float) Math.Sign(-12f - num14);
          }
          else if (index5 != -1)
          {
            f2 = this.AngleTo(Main.npc[index5].Center);
            num15 = 3;
            num18 = MathHelper.Clamp(num13 + 0.05f, 0.0f, max);
            num19 = num14 + (float) Math.Sign(6f - num14);
          }
          else if ((double) this.ai[0] > 0.0)
          {
            f2 = this.ai[1];
            num18 = MathHelper.Clamp(num13 + (float) Math.Sign(0.75f - num13) * 0.05f, 0.0f, max);
            num15 = 4;
            num19 = num14 + (float) Math.Sign(10f - num14);
            if (Main.rand.Next(10) == 0)
            {
              int index1 = Dust.NewDust(this.Center + f1.ToRotationVector2() * 6f * num18 - Vector2.One * 4f, 8, 8, 204, 0.0f, 0.0f, 150, new Color(), 0.3f);
              Main.dust[index1].fadeIn = 0.75f;
              Dust dust = Main.dust[index1];
              dust.velocity = dust.velocity * 0.1f;
            }
          }
          else
          {
            f2 = player.direction == 1 ? 0.0f : 3.141603f;
            num18 = MathHelper.Clamp(num13 + (float) Math.Sign(0.75f - num13) * 0.05f, 0.0f, max);
            num19 = num14 + (float) Math.Sign(0.0f - num14);
            amount = 0.12f;
          }
          Vector2 rotationVector2 = f2.ToRotationVector2();
          this.localAI[0] = (float) ((double) Vector2.Lerp(f1.ToRotationVector2(), rotationVector2, amount).ToRotation() + (double) num15 * 6.28318548202515 + 3.14159274101257);
          this.localAI[1] = num19 + num18;
        }
      }
      else if (this.aiStyle == 125)
      {
        Player player = Main.player[this.owner];
        if (Main.myPlayer == this.owner)
        {
          if ((double) this.localAI[1] > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 1f;
          }
          if (player.noItems || player.CCed || player.dead)
            this.Kill();
          else if (Main.mouseRight && Main.mouseRightRelease)
          {
            this.Kill();
            player.mouseInterface = true;
            Main.blockMouse = true;
          }
          else if (!player.channel)
          {
            if ((double) this.localAI[0] == 0.0)
              this.localAI[0] = 1f;
            this.Kill();
          }
          else if ((double) this.localAI[1] == 0.0)
          {
            Vector2 vector2 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
            if ((double) player.gravDir == -1.0)
              vector2.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
            if (vector2 != this.Center)
            {
              this.netUpdate = true;
              this.Center = vector2;
              this.localAI[1] = 1f;
            }
            if ((double) this.ai[0] == 0.0 && (double) this.ai[1] == 0.0)
            {
              this.ai[0] = (float) ((int) this.Center.X / 16);
              this.ai[1] = (float) ((int) this.Center.Y / 16);
              this.netUpdate = true;
              this.velocity = Vector2.Zero;
            }
          }
          this.velocity = Vector2.Zero;
          Point point1 = new Vector2(this.ai[0], this.ai[1]).ToPoint();
          Point tileCoordinates = this.Center.ToTileCoordinates();
          Math.Abs(point1.X - tileCoordinates.X);
          Math.Abs(point1.Y - tileCoordinates.Y);
          int num1 = Math.Sign(tileCoordinates.X - point1.X);
          int num2 = Math.Sign(tileCoordinates.Y - point1.Y);
          Point point2 = new Point();
          bool flag1 = false;
          bool flag2 = player.direction == 1;
          int num3;
          int num4;
          int num5;
          if (flag2)
          {
            point2.X = point1.X;
            num3 = point1.Y;
            num4 = tileCoordinates.Y;
            num5 = num2;
          }
          else
          {
            point2.Y = point1.Y;
            num3 = point1.X;
            num4 = tileCoordinates.X;
            num5 = num1;
          }
          int num6 = num3;
          while (num6 != num4 && !flag1)
          {
            if (flag2)
              point2.Y = num6;
            else
              point2.X = num6;
            if (WorldGen.InWorld(point2.X, point2.Y, 1))
            {
              Tile tile = Main.tile[point2.X, point2.Y];
            }
            num6 += num5;
          }
          int num7;
          int num8;
          int num9;
          if (flag2)
          {
            point2.Y = tileCoordinates.Y;
            num7 = point1.X;
            num8 = tileCoordinates.X;
            num9 = num1;
          }
          else
          {
            point2.X = tileCoordinates.X;
            num7 = point1.Y;
            num8 = tileCoordinates.Y;
            num9 = num2;
          }
          int num10 = num7;
          while (num10 != num8 && !flag1)
          {
            if (!flag2)
              point2.Y = num10;
            else
              point2.X = num10;
            if (WorldGen.InWorld(point2.X, point2.Y, 1))
            {
              Tile tile = Main.tile[point2.X, point2.Y];
            }
            num10 += num9;
          }
        }
        int dir = Math.Sign(player.velocity.X);
        if (dir != 0)
          player.ChangeDir(dir);
        player.heldProj = this.whoAmI;
        player.itemTime = 2;
        player.itemAnimation = 2;
        player.itemRotation = 0.0f;
      }
      else if (this.aiStyle == 126)
      {
        int num1 = Math.Sign(this.velocity.Y);
        int num2 = num1 == -1 ? 0 : 1;
        if ((double) this.ai[0] == 0.0)
        {
          if (!Collision.SolidCollision(this.position + new Vector2(0.0f, num1 == -1 ? (float) (this.height - 48) : 0.0f), this.width, 48) && !Collision.WetCollision(this.position + new Vector2(0.0f, num1 == -1 ? (float) (this.height - 20) : 0.0f), this.width, 20))
          {
            this.velocity = new Vector2(0.0f, (float) Math.Sign(this.velocity.Y) * (1f / 1000f));
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
            this.timeLeft = 60;
          }
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          if ((double) this.ai[1] >= 60.0)
            this.Kill();
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].scale = (float) (0.100000001490116 + (double) Main.rand.Next(5) * 0.100000001490116);
            Main.dust[index2].fadeIn = (float) (1.5 + (double) Main.rand.Next(5) * 0.100000001490116);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + new Vector2(0.0f, (float) (-this.height / 2)).RotatedBy((double) this.rotation, new Vector2()) * 1.1f;
          }
        }
        if ((double) this.ai[0] != 1.0)
          return;
        this.velocity = new Vector2(0.0f, (float) Math.Sign(this.velocity.Y) * (1f / 1000f));
        if (num1 != 0)
        {
          int num3 = 16;
          int num4 = 320;
          if (this.type == 670)
            num4 -= (int) Math.Abs(this.localAI[1]) * 64;
          while (num3 < num4 && !Collision.SolidCollision(this.position + new Vector2(0.0f, num1 == -1 ? (float) (this.height - num3 - 16) : 0.0f), this.width, num3 + 16))
            num3 += 16;
          if (num1 == -1)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) this.height;
            this.height = num3;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 - (float) num3;
          }
          else
            this.height = num3;
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local3 = @this.ai[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local3 = ^local3 + 1f;
        if (this.type == 670 && this.owner == Main.myPlayer && ((double) this.ai[1] == 12.0 && (double) this.localAI[1] < 3.0) && (double) this.localAI[1] > -3.0)
        {
          if ((double) this.localAI[1] == 0.0)
          {
            int index1 = Projectile.NewProjectile(this.Bottom + new Vector2(-50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            Main.projectile[index1].localAI[1] = this.localAI[1] - 1f;
            int index2 = Projectile.NewProjectile(this.Bottom + new Vector2(50f, -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            Main.projectile[index2].localAI[1] = this.localAI[1] + 1f;
          }
          else
          {
            int num3 = Math.Sign(this.localAI[1]);
            int index = Projectile.NewProjectile(this.Bottom + new Vector2((float) (50 * num3), -10f), -Vector2.UnitY, this.type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            Main.projectile[index].localAI[1] = this.localAI[1] + (float) num3;
          }
        }
        if ((double) this.ai[1] >= 60.0)
          this.Kill();
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index1 = 0; (double) index1 < 60.0; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 259, 158 }), 0.0f, -2.5f * (float) -num1, 0, new Color(), 1f);
            Main.dust[index2].alpha = 200;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * new Vector2(0.3f, 2f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (2 * num1);
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale + Main.rand.NextFloat();
            Main.dust[index2].position = new Vector2(this.Center.X, this.Center.Y + (float) this.height * 0.5f * (float) -num1);
            Main.dust[index2].customData = (object) num2;
            if (num1 == -1 && Main.rand.Next(4) != 0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - 0.2f;
            }
          }
          Main.PlaySound(SoundID.Item34, this.position);
        }
        if (num1 == 1)
        {
          for (int index1 = 0; (double) index1 < 9.0; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 259, 158 }), 0.0f, -2.5f * (float) -num1, 0, new Color(), 1f);
            Main.dust[index2].alpha = 200;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * new Vector2(0.3f, 2f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (2 * num1);
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale + Main.rand.NextFloat();
            Main.dust[index2].position = new Vector2(this.Center.X, this.Center.Y + (float) this.height * 0.5f * (float) -num1);
            Main.dust[index2].customData = (object) num2;
            if (num1 == -1 && Main.rand.Next(4) != 0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - 0.2f;
            }
          }
        }
        int Height = (int) ((double) this.ai[1] / 60.0 * (double) this.height) * 3;
        if (Height > this.height)
          Height = this.height;
        Vector2 Position = this.position + (num1 == -1 ? new Vector2(0.0f, (float) (this.height - Height)) : Vector2.Zero);
        Vector2 vector2 = this.position + (num1 == -1 ? new Vector2(0.0f, (float) this.height) : Vector2.Zero);
        for (int index1 = 0; (double) index1 < 6.0; ++index1)
        {
          if (Main.rand.Next(3) < 2)
          {
            int index2 = Dust.NewDust(Position, this.width, Height, 6, 0.0f, 0.0f, 90, new Color(), 2.5f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].fadeIn = 1f;
            if ((double) Main.dust[index2].velocity.Y > 0.0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 * -1f;
            }
            if (Main.rand.Next(6) < 3)
            {
              Main.dust[index2].position.Y = MathHelper.Lerp(Main.dust[index2].position.Y, vector2.Y, 0.5f);
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 - 3f;
              Main.dust[index2].position.X = this.Center.X;
              Main.dust[index2].noGravity = false;
              Main.dust[index2].noLight = true;
              Main.dust[index2].fadeIn = 0.4f;
              Dust dust2 = Main.dust[index2];
              dust2.scale = dust2.scale * 0.3f;
            }
            else
              Main.dust[index2].velocity = this.DirectionFrom(Main.dust[index2].position) * Main.dust[index2].velocity.Length() * 0.25f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * (float) -num1;
            Main.dust[index2].customData = (object) num2;
          }
        }
        for (int index1 = 0; (double) index1 < 6.0; ++index1)
        {
          if ((double) Main.rand.NextFloat() >= 0.5)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 259, 158 });
            int index2 = Dust.NewDust(Position, this.width, Height, Type, 0.0f, -2.5f * (float) -num1, 0, new Color(), 1f);
            Main.dust[index2].alpha = 200;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * new Vector2(0.6f, 1.5f);
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale + Main.rand.NextFloat();
            if (num1 == -1 && Main.rand.Next(4) != 0)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 - 0.2f;
            }
            Main.dust[index2].customData = (object) num2;
          }
        }
      }
      else if (this.aiStyle == (int) sbyte.MaxValue)
      {
        float num1 = 900f;
        if (this.type == 657)
          num1 = 300f;
        if (this.soundDelay == 0)
        {
          this.soundDelay = -1;
          Main.PlaySound(SoundID.Item82, this.Center);
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] >= (double) num1)
          this.Kill();
        if (this.type == 656 && (double) this.localAI[0] >= 30.0)
        {
          this.damage = 0;
          if ((double) this.ai[0] < (double) num1 - 120.0)
          {
            float num2 = this.ai[0] % 60f;
            this.ai[0] = num1 - 120f + num2;
            this.netUpdate = true;
          }
        }
        float num3 = 15f;
        float num4 = 15f;
        Point tileCoordinates = this.Center.ToTileCoordinates();
        int topY;
        int bottomY;
        Collision.ExpandVertically(tileCoordinates.X, tileCoordinates.Y, out topY, out bottomY, (int) num3, (int) num4);
        ++topY;
        int num5 = bottomY - 1;
        Vector2 vector2_1 = new Vector2((float) tileCoordinates.X, (float) topY) * 16f + new Vector2(8f);
        Vector2 vector2_2 = new Vector2((float) tileCoordinates.X, (float) num5) * 16f + new Vector2(8f);
        Vector2 vector2_3 = Vector2.Lerp(vector2_1, vector2_2, 0.5f);
        Vector2 vector2_4 = new Vector2(0.0f, vector2_2.Y - vector2_1.Y);
        vector2_4.X = vector2_4.Y * 0.2f;
        this.width = (int) ((double) vector2_4.X * 0.649999976158142);
        this.height = (int) vector2_4.Y;
        this.Center = vector2_3;
        if (this.type == 656 && this.owner == Main.myPlayer)
        {
          bool flag = false;
          Vector2 center = Main.player[this.owner].Center;
          Vector2 top = Main.player[this.owner].Top;
          float amount = 0.0f;
          while ((double) amount < 1.0)
          {
            Vector2 Position1 = Vector2.Lerp(vector2_1, vector2_2, amount);
            if (Collision.CanHitLine(Position1, 0, 0, center, 0, 0) || Collision.CanHitLine(Position1, 0, 0, top, 0, 0))
            {
              flag = true;
              break;
            }
            amount += 0.05f;
          }
          if (!flag && (double) this.ai[0] < (double) num1 - 120.0)
          {
            float num2 = this.ai[0] % 60f;
            this.ai[0] = num1 - 120f + num2;
            this.netUpdate = true;
          }
        }
        if ((double) this.ai[0] >= (double) num1 - 120.0)
          return;
        for (int index = 0; index < 1; ++index)
        {
          float num2 = -0.5f;
          float num6 = 0.9f;
          float amount = Main.rand.NextFloat();
          Vector2 vector2_5 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(num2, num6, amount));
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @vector2_5.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 * MathHelper.Lerp(2.2f, 0.6f, amount);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @vector2_5.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * -1f;
          Vector2 vector2_6 = new Vector2(6f, 10f);
          Vector2 Position = vector2_3 + vector2_4 * vector2_5 * 0.5f + vector2_6;
          Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 269, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust.position = Position;
          dust.customData = (object) (vector2_3 + vector2_6);
          dust.fadeIn = 1f;
          dust.scale = 0.3f;
          if ((double) vector2_5.X > -1.20000004768372)
            dust.velocity.X = 1f + Main.rand.NextFloat();
          dust.velocity.Y = (float) ((double) Main.rand.NextFloat() * -0.5 - 1.0);
        }
      }
      else if (this.aiStyle == 128)
      {
        Color newColor = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.soundDelay == 0)
        {
          this.soundDelay = -1;
          Main.PlaySound(SoundID.Item60, this.Center);
        }
        if ((double) this.localAI[1] < 30.0)
        {
          for (int index = 0; index < 1; ++index)
          {
            float num1 = -0.5f;
            float num2 = 0.9f;
            float amount = Main.rand.NextFloat();
            Vector2 vector2_1 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(num1, num2, amount));
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * MathHelper.Lerp(2.2f, 0.6f, amount);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @vector2_1.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * -1f;
            Vector2 vector2_2 = new Vector2(2f, 10f);
            Vector2 Position = this.Center + new Vector2(60f, 200f) * vector2_1 * 0.5f + vector2_2;
            Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 269, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.position = Position;
            dust.customData = (object) (this.Center + vector2_2);
            dust.fadeIn = 1f;
            dust.scale = 0.3f;
            if ((double) vector2_1.X > -1.20000004768372)
              dust.velocity.X = 1f + Main.rand.NextFloat();
            dust.velocity.Y = (float) ((double) Main.rand.NextFloat() * -0.5 - 1.0);
          }
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 0.8f;
          this.direction = 1;
          Point tileCoordinates = this.Center.ToTileCoordinates();
          this.Center = new Vector2((float) (tileCoordinates.X * 16 + 8), (float) (tileCoordinates.Y * 16 + 8));
        }
        this.rotation = (float) ((double) this.localAI[1] / 40.0 * 6.28318548202515) * (float) this.direction;
        if ((double) this.localAI[1] < 33.0)
        {
          if (this.alpha > 0)
            this.alpha = this.alpha - 8;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if ((double) this.localAI[1] > 103.0)
        {
          if (this.alpha < (int) byte.MaxValue)
            this.alpha = this.alpha + 16;
          if (this.alpha > (int) byte.MaxValue)
            this.alpha = (int) byte.MaxValue;
        }
        if (this.alpha == 0)
          Lighting.AddLight(this.Center, newColor.ToVector3() * 0.5f);
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index * 3.14159274101257, new Vector2()).RotatedBy((double) this.rotation, new Vector2());
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 225, newColor, 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(10) == 0)
          {
            Vector2 vector2 = Vector2.UnitY.RotatedBy((double) index * 3.14159274101257, new Vector2());
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 225, newColor, 1.5f)];
            dust.noGravity = true;
            dust.noLight = true;
            dust.scale = this.Opacity * this.localAI[0];
            dust.position = this.Center;
            dust.velocity = vector2 * 2.5f;
          }
        }
        if ((double) this.localAI[1] < 33.0 || (double) this.localAI[1] > 87.0)
          this.scale = this.Opacity / 2f * this.localAI[0];
        this.velocity = Vector2.Zero;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.localAI[1];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local + 1f;
        if ((double) this.localAI[1] == 60.0 && this.owner == Main.myPlayer)
        {
          int Damage = 30;
          if (Main.expertMode)
            Damage = 22;
          Projectile.NewProjectile(this.Center, Vector2.Zero, 657, Damage, 3f, this.owner, 0.0f, 0.0f);
        }
        if ((double) this.localAI[1] < 120.0)
          return;
        this.Kill();
      }
      else if (this.aiStyle == 129)
      {
        float num1 = 10f;
        float num2 = 5f;
        float num3 = 40f;
        if (this.type == 659)
        {
          num1 = 3f;
          num2 = 7.5f;
          num3 = 1f;
          if ((double) this.localAI[0] > 0.0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[0];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local - 1f;
          }
          if ((double) this.localAI[0] == 0.0 && (double) this.ai[0] < 0.0 && this.owner == Main.myPlayer)
          {
            this.localAI[0] = 5f;
            for (int index = 0; index < 200; ++index)
            {
              NPC npc = Main.npc[index];
              if (npc.CanBeChasedBy((object) this, false) && (((double) this.ai[0] < 0.0 || (double) Main.npc[(int) this.ai[0]].Distance(this.Center) > (double) npc.Distance(this.Center)) & (double) npc.Distance(this.Center) < 400.0 && (Collision.CanHitLine(this.Center, 0, 0, npc.Center, 0, 0) || Collision.CanHitLine(this.Center, 0, 0, npc.Top, 0, 0))))
                this.ai[0] = (float) index;
            }
            if ((double) this.ai[0] >= 0.0)
            {
              this.timeLeft = 300;
              this.netUpdate = true;
            }
          }
          if (this.timeLeft > 30 && this.alpha > 0)
            this.alpha = this.alpha - 12;
          if (this.timeLeft > 30 && this.alpha < 128 && Collision.SolidCollision(this.position, this.width, this.height))
            this.alpha = 128;
          if (this.alpha < 0)
            this.alpha = 0;
          int num4 = this.frameCounter + 1;
          this.frameCounter = num4;
          if (num4 > 4)
          {
            this.frameCounter = 0;
            int num5 = this.frame + 1;
            this.frame = num5;
            if (num5 >= 4)
              this.frame = 0;
          }
          float num6 = 0.5f;
          if (this.timeLeft < 120)
            num6 = 1.1f;
          if (this.timeLeft < 60)
            num6 = 1.6f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.ai[1];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          float num7 = (float) ((double) this.ai[1] / 180.0 * 6.28318548202515);
          for (float num5 = 0.0f; (double) num5 < 3.0; ++num5)
          {
            if (Main.rand.Next(3) == 0)
            {
              Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 27, 0.0f, -2f, 0, new Color(), 1f)];
              dust.position = this.Center + Vector2.UnitY.RotatedBy((double) num5 * 6.28318548202515 / 3.0 + (double) this.ai[1], new Vector2()) * 10f;
              dust.noGravity = true;
              dust.velocity = this.DirectionFrom(dust.position);
              dust.scale = num6;
              dust.fadeIn = 0.5f;
              dust.alpha = 200;
            }
          }
        }
        if (this.timeLeft > 2 && Collision.SolidCollision(this.position, this.width, this.height))
          this.timeLeft = 2;
        int index1 = (int) this.ai[0];
        if (index1 >= 0 && Main.npc[index1].active)
        {
          if ((double) this.Distance(Main.npc[index1].Center) <= (double) num3)
            return;
          Vector2 unitY = this.DirectionTo(Main.npc[index1].Center);
          if (unitY.HasNaNs())
            unitY = Vector2.UnitY;
          this.velocity = (this.velocity * (num1 - 1f) + unitY * num2) / num1;
        }
        else
        {
          if ((double) this.ai[0] == -1.0 && this.timeLeft > 5)
            this.timeLeft = 5;
          if ((double) this.ai[0] == -2.0 && this.timeLeft > 180)
            this.timeLeft = 180;
          if ((double) this.ai[0] < 0.0)
            return;
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      else if (this.aiStyle == 130)
        this.AI_130_FlameBurstTower();
      else if (this.aiStyle == 131)
        this.AI_131_FlameBurstShot();
      else if (this.aiStyle == 132)
      {
        if ((double) this.localAI[1] == 0.0)
        {
          if ((double) this.localAI[0] == 0.0)
            Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DefeatScene, this.Center);
          if ((double) this.localAI[0] == 105.0)
          {
            for (int index = 0; index < 20; ++index)
            {
              float num = (float) index / 20f;
              Vector2 Velocity = new Vector2(Main.rand.NextFloat() * 10f, 0.0f).RotatedBy((double) num * -3.14159274101257 + (double) Main.rand.NextFloat() * 0.100000001490116 - 0.0500000007450581, new Vector2());
              Gore gore1 = Gore.NewGoreDirect(this.Center + Velocity * 3f, Velocity, Utils.SelectRandom<int>(Main.rand, new int[4]{ 1027, 1028, 1029, 1030 }), 1f);
              if ((double) gore1.velocity.Y > 0.0)
              {
                Gore gore2 = gore1;
                gore2.velocity = gore2.velocity * -0.5f;
              }
              if ((double) gore1.velocity.Y < -5.0)
              {
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local = @gore1.velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local = ^local * 0.8f;
              }
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @gore1.velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 * 1.1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @gore1.velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 * 0.88f;
            }
          }
          if (!Main.dedServ)
          {
            if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
              Filters.Scene.Activate("CrystalDestructionVortex", new Vector2());
            if (!Filters.Scene["CrystalDestructionColor"].IsActive())
              Filters.Scene.Activate("CrystalDestructionColor", new Vector2());
            float intensity = Math.Min(1f, this.localAI[0] / 120f);
            Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(intensity);
            Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(intensity * 2f).UseProgress(0.0f).UseTargetPosition(this.Center);
          }
          if ((double) this.localAI[0] == 120.0)
          {
            this.localAI[0] = 0.0f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
        }
        else if ((double) this.localAI[1] == 1.0)
        {
          if (!Main.dedServ)
          {
            float num = this.localAI[0] / 300f;
            this.velocity.Y = Math.Min(1f, this.localAI[0] / 150f) * -0.25f;
            if (!Filters.Scene["CrystalDestructionVortex"].IsActive())
              Filters.Scene.Activate("CrystalDestructionVortex", new Vector2());
            if (!Filters.Scene["CrystalDestructionColor"].IsActive())
              Filters.Scene.Activate("CrystalDestructionColor", new Vector2());
            float intensity = 1f;
            Filters.Scene["CrystalDestructionColor"].GetShader().UseIntensity(intensity);
            Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(intensity * 2f).UseProgress(0.0f).UseTargetPosition(this.Center);
          }
          if ((double) this.localAI[0] == 300.0)
          {
            this.localAI[0] = 0.0f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local = @this.localAI[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local = ^local + 1f;
          }
        }
        else if ((double) this.localAI[1] == 2.0)
        {
          float num = this.localAI[0] / 300f;
          if (Main.netMode != 2)
            Filters.Scene["CrystalDestructionVortex"].GetShader().UseIntensity(2f).UseProgress(num * 30f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 - 1f;
          if ((double) this.localAI[0] == 60.0)
          {
            this.localAI[0] = 0.0f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.localAI[1];
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 1f;
          }
        }
        else if ((double) this.localAI[1] == 3.0)
        {
          if (Main.dedServ)
          {
            Filters.Scene.Deactivate("CrystalDestructionVortex");
            Filters.Scene.Deactivate("CrystalDestructionColor");
          }
          this.Kill();
        }
        if ((double) this.localAI[1] >= 1.0)
        {
          for (int index = 0; index < 1 + (int) -(double) this.velocity.Y; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              float num = Main.rand.NextFloat() * -this.velocity.Y;
              Vector2 vector2 = new Vector2((float) ((double) Main.rand.NextFloat() * 0.100000001490116 - 0.0500000007450581), 0.0f);
              vector2.X = vector2.X + (float) Math.Sin(((double) this.position.Y + (double) num) * 0.00999999977648258 + 6.28318548202515 * ((double) Main.rand.Next(3) / 3.0)) * 0.5f;
              vector2.X = MathHelper.Lerp(Main.rand.NextFloat() - 0.5f, vector2.X, MathHelper.Clamp(-this.velocity.Y, 0.0f, 1f));
              vector2.Y = 0.5f - Math.Abs(vector2.X);
              vector2 *= new Vector2(100f, 50f);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @vector2.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local + num;
              Dust dust = Dust.NewDustPerfect(this.Center + vector2, 27, new Vector2?(Vector2.Zero), 0, Color.White * 0.1f, 1.1f);
              dust.velocity.Y = Main.rand.NextFloat() * 2f;
              dust.fadeIn = 0.1f;
            }
          }
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local3 = @this.localAI[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local3 = ^local3 + 1f;
      }
      else if (this.aiStyle == 133)
      {
        if (this.type == 673)
        {
          if ((double) this.ai[0] == 70.0)
            Main.PlayTrackedSound((SoundStyle) SoundID.DD2_SkeletonSummoned, this.Center);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local = @this.ai[0];
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local = ^local + 1f;
          float num = 0.0f;
          if ((double) this.ai[0] < 20.0)
            num = Utils.InverseLerp(0.0f, 20f, this.ai[0], true);
          else if ((double) this.ai[0] < 60.0)
            num = 1f;
          else if ((double) this.ai[0] < 80.0)
            num = Utils.InverseLerp(80f, 60f, this.ai[0], true);
          else
            this.Kill();
          this.Opacity = num;
          int owner = this.owner;
          int player = Main.myPlayer;
        }
        if (this.type != 674)
          return;
        if ((double) this.ai[0] == 0.0)
          Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageHealImpact, this.Center);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local1 = @this.ai[0];
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local1 = ^local1 + 1f;
        if ((double) this.ai[0] < 40.0)
          return;
        for (int index = 0; index < 200; ++index)
        {
          NPC npc1 = Main.npc[index];
          if (npc1.active && npc1.damage >= 1 && (npc1.lifeMax >= 30 && (double) this.Distance(npc1.Center) <= 1000.0) && (npc1.type != 564 && npc1.type != 565))
          {
            int healAmount = 500;
            int num = npc1.lifeMax - npc1.life;
            if (healAmount > num)
              healAmount = num;
            if (healAmount > 0)
            {
              NPC npc2 = npc1;
              npc2.life = npc2.life + healAmount;
              npc1.HealEffect(healAmount, true);
              npc1.netUpdate = true;
            }
          }
        }
        this.Kill();
      }
      else if (this.aiStyle == 134)
        this.AI_134_Ballista();
      else if (this.aiStyle == 135)
        this.AI_135_OgreStomp();
      else if (this.aiStyle == 136)
        this.AI_136_BetsyBreath();
      else if (this.aiStyle == 137)
        this.AI_137_LightningAura();
      else if (this.aiStyle == 138)
        this.AI_138_ExplosiveTrap();
      else if (this.aiStyle == 139)
        this.AI_139_ExplosiveTrapExplosion();
      else if (this.aiStyle == 140)
        this.AI_140_MonkStaffT1();
      else if (this.aiStyle == 141)
        this.AI_141_MonkStaffT1Explosion();
      else if (this.aiStyle == 142)
        this.AI_142_MonkStaffT2And3();
      else if (this.aiStyle == 143)
        this.AI_143_MonkStaffT2Ghast();
      else if (this.aiStyle == 144)
        this.AI_144_DD2Pet();
      else if (this.aiStyle == 145)
      {
        this.AI_145_BookStaffStorm();
      }
      else
      {
        if (this.aiStyle != 145)
          return;
        this.AI_146_DD2Victory();
      }
    }

    private void AI_061_FishingBobber()
    {
      this.timeLeft = 60;
      if (Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].fishingPole == 0 || Main.player[this.owner].CCed || Main.player[this.owner].noItems)
        this.Kill();
      else if (Main.player[this.owner].inventory[Main.player[this.owner].selectedItem].shoot != this.type)
        this.Kill();
      else if (Main.player[this.owner].pulley)
        this.Kill();
      else if (Main.player[this.owner].dead)
        this.Kill();
      if ((double) this.ai[1] > 0.0 && (double) this.localAI[1] >= 0.0)
      {
        this.localAI[1] = -1f;
        if (!this.lavaWet && !this.honeyWet)
        {
          for (int index1 = 0; index1 < 100; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f), this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].velocity.Y -= 4f;
            Main.dust[index2].velocity.X *= 2.5f;
            Main.dust[index2].scale = 0.8f;
            Main.dust[index2].alpha = 100;
            Main.dust[index2].noGravity = true;
          }
          Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
        }
      }
      if ((double) this.ai[0] >= 1.0)
      {
        if ((double) this.ai[0] == 2.0)
        {
          ++this.ai[0];
          Main.PlaySound(SoundID.Item17, this.position);
          if (!this.lavaWet && !this.honeyWet)
          {
            for (int index1 = 0; index1 < 100; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X - 6f, this.position.Y - 10f), this.width + 12, 24, Dust.dustWater(), 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].velocity.Y -= 4f;
              Main.dust[index2].velocity.X *= 2.5f;
              Main.dust[index2].scale = 0.8f;
              Main.dust[index2].alpha = 100;
              Main.dust[index2].noGravity = true;
            }
            Main.PlaySound(19, (int) this.position.X, (int) this.position.Y, 0, 1f, 0.0f);
          }
        }
        if ((double) this.localAI[0] < 100.0)
          ++this.localAI[0];
        this.tileCollide = false;
        double num1 = 15.8999996185303;
        int num2 = 10;
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num3 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
        float num4 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
        float num5 = (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
        if ((double) num5 > 3000.0)
          this.Kill();
        double num6 = (double) num5;
        float num7 = (float) (num1 / num6);
        float num8 = num3 * num7;
        float num9 = num4 * num7;
        this.velocity.X = (this.velocity.X * (float) (num2 - 1) + num8) / (float) num2;
        this.velocity.Y = (this.velocity.Y * (float) (num2 - 1) + num9) / (float) num2;
        if (Main.myPlayer == this.owner && new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height).Intersects(new Microsoft.Xna.Framework.Rectangle((int) Main.player[this.owner].position.X, (int) Main.player[this.owner].position.Y, Main.player[this.owner].width, Main.player[this.owner].height)))
        {
          if ((double) this.ai[1] > 0.0 && (double) this.ai[1] < 3930.0)
          {
            int Type = (int) this.ai[1];
            Item newItem = new Item();
            newItem.SetDefaults(Type, false);
            if (Type == 3196)
            {
              int num10 = Main.player[this.owner].FishingLevel();
              int minValue = (num10 / 20 + 3) / 2;
              int num11 = (num10 / 10 + 6) / 2;
              if (Main.rand.Next(50) < num10)
                ++num11;
              if (Main.rand.Next(100) < num10)
                ++num11;
              if (Main.rand.Next(150) < num10)
                ++num11;
              if (Main.rand.Next(200) < num10)
                ++num11;
              int num12 = Main.rand.Next(minValue, num11 + 1);
              newItem.stack = num12;
            }
            if (Type == 3197)
            {
              int num10 = Main.player[this.owner].FishingLevel();
              int minValue = (num10 / 4 + 15) / 2;
              int num11 = (num10 / 2 + 30) / 2;
              if (Main.rand.Next(50) < num10)
                num11 += 4;
              if (Main.rand.Next(100) < num10)
                num11 += 4;
              if (Main.rand.Next(150) < num10)
                num11 += 4;
              if (Main.rand.Next(200) < num10)
                num11 += 4;
              int num12 = Main.rand.Next(minValue, num11 + 1);
              newItem.stack = num12;
            }
            newItem.newAndShiny = true;
            if (Main.player[this.owner].GetItem(this.owner, newItem, false, false).stack > 0)
            {
              int number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type, 1, false, 0, true, false);
              if (Main.netMode == 1)
                NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
            }
            else
            {
              newItem.position.X = this.Center.X - (float) (newItem.width / 2);
              newItem.position.Y = this.Center.Y - (float) (newItem.height / 2);
              newItem.active = true;
              ItemText.NewText(newItem, 0, false, false);
            }
          }
          this.Kill();
        }
        this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      }
      else
      {
        bool flag = false;
        Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
        float num1 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
        float num2 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
        this.rotation = (float) Math.Atan2((double) num2, (double) num1) + 1.57f;
        if (Math.Sqrt((double) num1 * (double) num1 + (double) num2 * (double) num2) > 900.0)
          this.ai[0] = 1f;
        if (this.wet)
        {
          this.rotation = 0.0f;
          this.velocity.X *= 0.9f;
          int index1 = (int) ((double) this.Center.X + (double) ((this.width / 2 + 8) * this.direction)) / 16;
          int index2 = (int) ((double) this.Center.Y / 16.0);
          double num3 = (double) this.position.Y / 16.0;
          int index3 = (int) (((double) this.position.Y + (double) this.height) / 16.0);
          if (Main.tile[index1, index2] == null)
            Main.tile[index1, index2] = new Tile();
          if (Main.tile[index1, index3] == null)
            Main.tile[index1, index3] = new Tile();
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y *= 0.5f;
          int index4 = (int) ((double) this.Center.X / 16.0);
          int index5 = (int) ((double) this.Center.Y / 16.0);
          float num4 = this.position.Y + (float) this.height;
          if (Main.tile[index4, index5 - 1] == null)
            Main.tile[index4, index5 - 1] = new Tile();
          if (Main.tile[index4, index5] == null)
            Main.tile[index4, index5] = new Tile();
          if (Main.tile[index4, index5 + 1] == null)
            Main.tile[index4, index5 + 1] = new Tile();
          if ((int) Main.tile[index4, index5 - 1].liquid > 0)
            num4 = (float) (index5 * 16) - (float) ((int) Main.tile[index4, index5 - 1].liquid / 16);
          else if ((int) Main.tile[index4, index5].liquid > 0)
            num4 = (float) ((index5 + 1) * 16) - (float) ((int) Main.tile[index4, index5].liquid / 16);
          else if ((int) Main.tile[index4, index5 + 1].liquid > 0)
            num4 = (float) ((index5 + 2) * 16) - (float) ((int) Main.tile[index4, index5 + 1].liquid / 16);
          if ((double) this.Center.Y > (double) num4)
          {
            this.velocity.Y -= 0.1f;
            if ((double) this.velocity.Y < -8.0)
              this.velocity.Y = -8f;
            if ((double) this.Center.Y + (double) this.velocity.Y < (double) num4)
              this.velocity.Y = num4 - this.Center.Y;
          }
          else
            this.velocity.Y = num4 - this.Center.Y;
          if ((double) this.velocity.Y >= -0.01 && (double) this.velocity.Y <= 0.01)
            flag = true;
        }
        else
        {
          if ((double) this.velocity.Y == 0.0)
            this.velocity.X *= 0.95f;
          this.velocity.X *= 0.98f;
          this.velocity.Y += 0.2f;
          if ((double) this.velocity.Y > 15.8999996185303)
            this.velocity.Y = 15.9f;
        }
        if (Main.myPlayer == this.owner)
        {
          int num3 = Main.player[this.owner].FishingLevel();
          if (num3 < 0 && num3 == -1)
            Main.player[this.owner].displayedFishingInfo = Language.GetTextValue("GameUI.FishingWarning");
        }
        if ((double) this.ai[1] != 0.0)
          flag = true;
        if (!flag)
          return;
        if ((double) this.ai[1] == 0.0 && Main.myPlayer == this.owner)
        {
          int num3 = Main.player[this.owner].FishingLevel();
          if (num3 == -9000)
          {
            this.localAI[1] += 5f;
            this.localAI[1] += (float) Main.rand.Next(1, 3);
            if ((double) this.localAI[1] <= 660.0)
              return;
            this.localAI[1] = 0.0f;
            this.FishingCheck();
          }
          else
          {
            if (Main.rand.Next(300) < num3)
              this.localAI[1] += (float) Main.rand.Next(1, 3);
            this.localAI[1] += (float) (num3 / 30);
            this.localAI[1] += (float) Main.rand.Next(1, 3);
            if (Main.rand.Next(60) == 0)
              this.localAI[1] += 60f;
            if ((double) this.localAI[1] <= 660.0)
              return;
            this.localAI[1] = 0.0f;
            this.FishingCheck();
          }
        }
        else
        {
          if ((double) this.ai[1] >= 0.0)
            return;
          if ((double) this.velocity.Y == 0.0 || this.honeyWet && (double) this.velocity.Y >= -0.01 && (double) this.velocity.Y <= 0.01)
          {
            this.velocity.Y = (float) Main.rand.Next(100, 500) * 0.015f;
            this.velocity.X = (float) Main.rand.Next(-100, 101) * 0.015f;
            this.wet = false;
            this.lavaWet = false;
            this.honeyWet = false;
          }
          this.ai[1] += (float) Main.rand.Next(1, 5);
          if ((double) this.ai[1] < 0.0)
            return;
          this.ai[1] = 0.0f;
          this.localAI[1] = 0.0f;
          this.netUpdate = true;
        }
      }
    }

    private void AI_146_DD2Victory()
    {
    }

    private void BetsySharpnel(int npcIndex)
    {
      if ((double) this.ai[1] == -1.0 || this.owner != Main.myPlayer)
        return;
      Vector2 spinningpoint = new Vector2(0.0f, 6f);
      Vector2 center = this.Center;
      float num1 = 0.7853982f;
      int num2 = 5;
      float num3 = (float) -((double) num1 * 2.0) / (float) (num2 - 1);
      for (int index1 = 0; index1 < num2; ++index1)
      {
        int index2 = Projectile.NewProjectile(center, spinningpoint.RotatedBy((double) num1 + (double) num3 * (double) index1, new Vector2()), 710, this.damage, this.knockBack, this.owner, 0.0f, -1f);
        Projectile projectile = Main.projectile[index2];
        for (int index3 = 0; index3 < this.localNPCImmunity.Length; ++index3)
          projectile.localNPCImmunity[index3] = this.localNPCImmunity[index3];
      }
    }

    private void AI_001()
    {
      if (this.type == 469 && this.wet && !this.honeyWet)
        this.Kill();
      if (this.type == 601)
      {
        Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
        Lighting.AddLight(this.Center + this.velocity * 3f, portalColor.ToVector3() * 0.5f);
        if (this.alpha > 0 && this.alpha <= 15)
        {
          Color color1 = portalColor;
          color1.A = byte.MaxValue;
          for (int index = 0; index < 4; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 264, 0.0f, 0.0f, 0, new Color(), 1f)];
            Vector2 center = this.Center;
            dust.position = center;
            Vector2 vector2 = this.velocity * 2f + Utils.RandomVector2(Main.rand, -1f, 1f);
            dust.velocity = vector2;
            Color color2 = color1;
            dust.color = color2;
            double num1 = 1.20000004768372;
            dust.scale = (float) num1;
            int num2 = 1;
            dust.noLight = num2 != 0;
            int num3 = 1;
            dust.noGravity = num3 != 0;
            Player player = Main.player[this.owner];
            dust.customData = (object) player;
          }
        }
        this.alpha = this.alpha - 15;
        if (this.alpha < 0)
          this.alpha = 0;
        int num4 = this.frameCounter + 1;
        this.frameCounter = num4;
        if (num4 >= 4)
        {
          this.frameCounter = 0;
          int num1 = this.frame + 1;
          this.frame = num1;
          if (num1 >= Main.projFrames[this.type])
            this.frame = 0;
        }
        if (this.alpha == 0)
        {
          Color color1 = portalColor;
          color1.A = byte.MaxValue;
          Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 263, 0.0f, 0.0f, 0, new Color(), 1f)];
          Vector2 center = this.Center;
          dust.position = center;
          Vector2 vector2 = this.velocity / 4f;
          dust.velocity = vector2;
          Color color2 = color1;
          dust.color = color2;
          int num1 = 1;
          dust.noGravity = num1 != 0;
          double num2 = 0.600000023841858;
          dust.scale = (float) num2;
        }
      }
      if (this.type == 472)
      {
        int index1 = Dust.NewDust(this.position, this.width, this.height, 30, 0.0f, 0.0f, 0, new Color(), 1f);
        Main.dust[index1].noGravity = true;
        Main.dust[index1].velocity *= 0.25f;
        Main.dust[index1].velocity += this.velocity * 0.75f;
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item17, this.position);
          for (int index2 = 0; index2 < 20; ++index2)
          {
            int index3 = Dust.NewDust(this.position, this.width, this.height, 30, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index3].noGravity = true;
            Main.dust[index3].velocity *= 0.25f;
            Main.dust[index3].velocity += this.velocity;
            Main.dust[index3].velocity.X *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
            Main.dust[index3].velocity.Y *= (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          }
        }
      }
      if (this.type == 323)
      {
        this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 436)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item12, this.position);
        }
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 1.1f, 0.5f);
      }
      if (this.type == 467)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item34, this.position);
        }
        else if ((double) this.ai[1] == 1.0 && Main.netMode != 1)
        {
          int num1 = -1;
          float num2 = 2000f;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead)
            {
              Vector2 center = Main.player[index].Center;
              float num3 = Vector2.Distance(center, this.Center);
              if (((double) num3 < (double) num2 || num1 == -1) && Collision.CanHit(this.Center, 1, 1, center, 1, 1))
              {
                num2 = num3;
                num1 = index;
              }
            }
          }
          if ((double) num2 < 20.0)
          {
            this.Kill();
            return;
          }
          if (num1 != -1)
          {
            this.ai[1] = 21f;
            this.ai[0] = (float) num1;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[1] > 20.0 && (double) this.ai[1] < 200.0)
        {
          ++this.ai[1];
          int index = (int) this.ai[0];
          if (!Main.player[index].active || Main.player[index].dead)
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          else
          {
            float rotation = this.velocity.ToRotation();
            Vector2 v = Main.player[index].Center - this.Center;
            if ((double) v.Length() < 20.0)
            {
              this.Kill();
              return;
            }
            float targetAngle = v.ToRotation();
            if (v == Vector2.Zero)
              targetAngle = rotation;
            this.velocity = new Vector2(this.velocity.Length(), 0.0f).RotatedBy((double) rotation.AngleLerp(targetAngle, 0.008f), new Vector2());
          }
        }
        if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < 20.0)
        {
          ++this.ai[1];
          if ((double) this.ai[1] == 20.0)
            this.ai[1] = 1f;
        }
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight(this.Center, 1.1f, 0.9f, 0.4f);
        ++this.localAI[0];
        if ((double) this.localAI[0] == 12.0)
        {
          this.localAI[0] = 0.0f;
          for (int index1 = 0; index1 < 12; ++index1)
          {
            Vector2 vector2 = (Vector2.UnitX * (float) -this.width / 2f + -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 6.0, new Vector2()) * new Vector2(8f, 16f)).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
            int index2 = Dust.NewDust(this.Center, 0, 0, 6, 0.0f, 0.0f, 160, new Color(), 1f);
            Main.dust[index2].scale = 1.1f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + vector2;
            Main.dust[index2].velocity = this.velocity * 0.1f;
            Main.dust[index2].velocity = Vector2.Normalize(this.Center - this.velocity * 3f - Main.dust[index2].position) * 1.25f;
          }
        }
        if (Main.rand.Next(4) == 0)
        {
          for (int index1 = 0; index1 < 1; ++index1)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].velocity *= 0.1f;
            Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
            Main.dust[index2].fadeIn = 0.9f;
          }
        }
        if (Main.rand.Next(32) == 0)
        {
          for (int index1 = 0; index1 < 1; ++index1)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.392699092626572).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 155, new Color(), 0.8f);
            Main.dust[index2].velocity *= 0.3f;
            Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index2].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(2) == 0)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.785398185253143).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1.2f);
            Main.dust[index2].velocity *= 0.3f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index2].fadeIn = 1.4f;
          }
        }
      }
      if (this.type == 468)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item34, this.position);
        }
        else if ((double) this.ai[1] == 1.0 && Main.netMode != 1)
        {
          int num1 = -1;
          float num2 = 2000f;
          for (int index = 0; index < (int) byte.MaxValue; ++index)
          {
            if (Main.player[index].active && !Main.player[index].dead)
            {
              Vector2 center = Main.player[index].Center;
              float num3 = Vector2.Distance(center, this.Center);
              if (((double) num3 < (double) num2 || num1 == -1) && Collision.CanHit(this.Center, 1, 1, center, 1, 1))
              {
                num2 = num3;
                num1 = index;
              }
            }
          }
          if ((double) num2 < 20.0)
          {
            this.Kill();
            return;
          }
          if (num1 != -1)
          {
            this.ai[1] = 21f;
            this.ai[0] = (float) num1;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[1] > 20.0 && (double) this.ai[1] < 200.0)
        {
          ++this.ai[1];
          int index = (int) this.ai[0];
          if (!Main.player[index].active || Main.player[index].dead)
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          else
          {
            float rotation = this.velocity.ToRotation();
            Vector2 v = Main.player[index].Center - this.Center;
            if ((double) v.Length() < 20.0)
            {
              this.Kill();
              return;
            }
            float targetAngle = v.ToRotation();
            if (v == Vector2.Zero)
              targetAngle = rotation;
            this.velocity = new Vector2(this.velocity.Length(), 0.0f).RotatedBy((double) rotation.AngleLerp(targetAngle, 0.01f), new Vector2());
          }
        }
        if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < 20.0)
        {
          ++this.ai[1];
          if ((double) this.ai[1] == 20.0)
            this.ai[1] = 1f;
        }
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight(this.Center, 0.2f, 0.1f, 0.6f);
        ++this.localAI[0];
        if ((double) this.localAI[0] == 12.0)
        {
          this.localAI[0] = 0.0f;
          for (int index1 = 0; index1 < 12; ++index1)
          {
            Vector2 vector2 = (Vector2.UnitX * (float) -this.width / 2f + -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 6.0, new Vector2()) * new Vector2(8f, 16f)).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
            int index2 = Dust.NewDust(this.Center, 0, 0, 27, 0.0f, 0.0f, 160, new Color(), 1f);
            Main.dust[index2].scale = 1.1f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + vector2;
            Main.dust[index2].velocity = this.velocity * 0.1f;
            Main.dust[index2].velocity = Vector2.Normalize(this.Center - this.velocity * 3f - Main.dust[index2].position) * 1.25f;
          }
        }
        if (Main.rand.Next(4) == 0)
        {
          for (int index1 = 0; index1 < 1; ++index1)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].velocity *= 0.1f;
            Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
            Main.dust[index2].fadeIn = 0.9f;
          }
        }
        if (Main.rand.Next(32) == 0)
        {
          for (int index1 = 0; index1 < 1; ++index1)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.392699092626572).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 155, new Color(), 0.8f);
            Main.dust[index2].velocity *= 0.3f;
            Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index2].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(2) == 0)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            Vector2 vector2 = -Vector2.UnitX.RotatedByRandom(0.785398185253143).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 27, 0.0f, 0.0f, 0, new Color(), 1.2f);
            Main.dust[index2].velocity *= 0.3f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + vector2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index2].fadeIn = 1.4f;
          }
        }
      }
      if (this.type == 634 || this.type == 635)
      {
        float num1 = 5f;
        float num2 = 250f;
        float num3 = 6f;
        Vector2 vector2_1 = new Vector2(8f, 10f);
        float num4 = 1.2f;
        Vector3 rgb = new Vector3(0.7f, 0.1f, 0.5f);
        int num5 = 4 * this.MaxUpdates;
        int Type1 = Utils.SelectRandom<int>(Main.rand, new int[5]{ 242, 73, 72, 71, (int) byte.MaxValue });
        int Type2 = (int) byte.MaxValue;
        if (this.type == 635)
        {
          vector2_1 = new Vector2(10f, 20f);
          num4 = 1f;
          num2 = 500f;
          Type2 = 88;
          num5 = 3 * this.MaxUpdates;
          rgb = new Vector3(0.4f, 0.6f, 0.9f);
          Type1 = Utils.SelectRandom<int>(Main.rand, new int[3]
          {
            242,
            59,
            88
          });
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          this.localAI[0] = (float) -Main.rand.Next(48);
          Main.PlaySound(SoundID.Item34, this.position);
        }
        else if ((double) this.ai[1] == 1.0 && this.owner == Main.myPlayer)
        {
          int num6 = -1;
          float num7 = num2;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, false))
            {
              Vector2 center = Main.npc[index].Center;
              float num8 = Vector2.Distance(center, this.Center);
              if ((double) num8 < (double) num7 && num6 == -1 && Collision.CanHitLine(this.Center, 1, 1, center, 1, 1))
              {
                num7 = num8;
                num6 = index;
              }
            }
          }
          if ((double) num7 < 20.0)
          {
            this.Kill();
            return;
          }
          if (num6 != -1)
          {
            this.ai[1] = num1 + 1f;
            this.ai[0] = (float) num6;
            this.netUpdate = true;
          }
        }
        else if ((double) this.ai[1] > (double) num1)
        {
          ++this.ai[1];
          int index = (int) this.ai[0];
          if (!Main.npc[index].active || !Main.npc[index].CanBeChasedBy((object) this, false))
          {
            this.ai[1] = 1f;
            this.ai[0] = 0.0f;
            this.netUpdate = true;
          }
          else
          {
            double rotation = (double) this.velocity.ToRotation();
            Vector2 vector2_2 = Main.npc[index].Center - this.Center;
            if ((double) vector2_2.Length() < 20.0)
            {
              this.Kill();
              return;
            }
            if (vector2_2 != Vector2.Zero)
            {
              vector2_2.Normalize();
              vector2_2 *= num3;
            }
            float num6 = 30f;
            this.velocity = (this.velocity * (num6 - 1f) + vector2_2) / num6;
          }
        }
        if ((double) this.ai[1] >= 1.0 && (double) this.ai[1] < (double) num1)
        {
          ++this.ai[1];
          if ((double) this.ai[1] == (double) num1)
            this.ai[1] = 1f;
        }
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= num5)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight(this.Center, rgb);
        this.rotation = this.velocity.ToRotation();
        ++this.localAI[0];
        if ((double) this.localAI[0] == 48.0)
          this.localAI[0] = 0.0f;
        else if (this.alpha == 0)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            Vector2 vector2_2 = Vector2.UnitX * -30f;
            Vector2 vector2_3 = -Vector2.UnitY.RotatedBy((double) this.localAI[0] * 0.130899697542191 + (double) index1 * 3.14159274101257, new Vector2()) * vector2_1 - this.rotation.ToRotationVector2() * 10f;
            int index2 = Dust.NewDust(this.Center, 0, 0, Type2, 0.0f, 0.0f, 160, new Color(), 1f);
            Main.dust[index2].scale = num4;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + vector2_3 + this.velocity * 2f;
            Main.dust[index2].velocity = Vector2.Normalize(this.Center + this.velocity * 2f * 8f - Main.dust[index2].position) * 2f + this.velocity * 2f;
          }
        }
        if (Main.rand.Next(12) == 0)
        {
          for (int index1 = 0; index1 < 1; ++index1)
          {
            Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].velocity *= 0.1f;
            Main.dust[index2].position = this.Center + vector2_2 * (float) this.width / 2f + this.velocity * 2f;
            Main.dust[index2].fadeIn = 0.9f;
          }
        }
        if (Main.rand.Next(64) == 0)
        {
          for (int index1 = 0; index1 < 1; ++index1)
          {
            Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.392699092626572).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 155, new Color(), 0.8f);
            Main.dust[index2].velocity *= 0.3f;
            Main.dust[index2].position = this.Center + vector2_2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index2].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(4) == 0)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.785398185253143).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.position, this.width, this.height, Type1, 0.0f, 0.0f, 0, new Color(), 1.2f);
            Main.dust[index2].velocity *= 0.3f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + vector2_2 * (float) this.width / 2f;
            if (Main.rand.Next(2) == 0)
              Main.dust[index2].fadeIn = 1.4f;
          }
        }
        if (Main.rand.Next(12) == 0 && this.type == 634)
        {
          Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
          int index = Dust.NewDust(this.position, this.width, this.height, Type2, 0.0f, 0.0f, 100, new Color(), 1f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].position = this.Center + vector2_2 * (float) this.width / 2f;
          Main.dust[index].fadeIn = 0.9f;
          Main.dust[index].noGravity = true;
        }
        if (Main.rand.Next(3) == 0 && this.type == 635)
        {
          Vector2 vector2_2 = -Vector2.UnitX.RotatedByRandom(0.196349546313286).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
          int index = Dust.NewDust(this.position, this.width, this.height, Type2, 0.0f, 0.0f, 100, new Color(), 1f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].position = this.Center + vector2_2 * (float) this.width / 2f;
          Main.dust[index].fadeIn = 1.2f;
          Main.dust[index].scale = 1.5f;
          Main.dust[index].noGravity = true;
        }
      }
      if (this.type == 459)
      {
        this.alpha = this.alpha - 30;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 3)
            this.frame = 0;
        }
        this.position = this.Center;
        this.scale = this.ai[1];
        this.width = this.height = (int) (22.0 * (double) this.scale);
        this.Center = this.position;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.85f, 0.9f);
        int num;
        if ((double) this.scale < 0.85)
        {
          num = Main.rand.Next(3) == 0 ? 1 : 0;
        }
        else
        {
          num = 1;
          this.penetrate = -1;
          this.maxPenetrate = -1;
        }
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].position -= Vector2.One * 3f;
          Main.dust[index2].scale = 0.5f;
          Main.dust[index2].noGravity = true;
          Main.dust[index2].velocity = this.velocity / 3f;
          Main.dust[index2].alpha = (int) byte.MaxValue - (int) ((double) byte.MaxValue * (double) this.scale);
        }
      }
      if (this.type == 709)
      {
        this.alpha = this.alpha - 30;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 3)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.85f, 0.9f);
        if ((double) this.ai[1] == 0.0)
          Main.PlayTrackedSound((SoundStyle) SoundID.DD2_SkyDragonsFuryShot, this.Center);
        ++this.ai[1];
        if ((double) this.ai[1] >= 30.0)
        {
          this.Kill();
          return;
        }
      }
      if (this.type == 442)
      {
        this.frame = 0;
        if (this.alpha != 0)
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] >= 4.0)
          {
            this.alpha = this.alpha - 90;
            if (this.alpha < 0)
            {
              this.alpha = 0;
              this.localAI[0] = 2f;
            }
          }
        }
        if ((double) Vector2.Distance(this.Center, new Vector2(this.ai[0], this.ai[1]) * 16f + Vector2.One * 8f) <= 16.0)
        {
          this.Kill();
          return;
        }
        if (this.alpha == 0)
        {
          ++this.localAI[1];
          if ((double) this.localAI[1] >= 120.0)
          {
            this.Kill();
            return;
          }
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 0.45f, 0.8f);
          ++this.localAI[0];
          if ((double) this.localAI[0] == 3.0)
          {
            this.localAI[0] = 0.0f;
            for (int index1 = 0; index1 < 8; ++index1)
            {
              Vector2 vector2 = (Vector2.UnitX * -8f + -Vector2.UnitY.RotatedBy((double) index1 * 3.14159274101257 / 4.0, new Vector2()) * new Vector2(2f, 4f)).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
              int index2 = Dust.NewDust(this.Center, 0, 0, 135, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].scale = 1.5f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].position = this.Center + vector2;
              Main.dust[index2].velocity = this.velocity * 0.66f;
            }
          }
        }
      }
      if (this.type == 440 || this.type == 449 || this.type == 606)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.type == 440)
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.25f, 0.4f, 0.7f);
        if (this.type == 449)
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.7f, 0.65f, 0.3f);
        if (this.type == 606)
          Lighting.AddLight(this.Center, 0.7f, 0.3f, 0.3f);
        float num1 = 100f;
        float num2 = 3f;
        if (this.type == 606)
        {
          num1 = 150f;
          num2 = 5f;
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.localAI[0] += num2;
          if ((double) this.localAI[0] == (double) num2 * 1.0 && this.type == 606)
          {
            for (int index1 = 0; index1 < 4; ++index1)
            {
              int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 182, 0.0f, 0.0f, 100, new Color(), 1.4f);
              Main.dust[index2].velocity *= 0.2f;
              Main.dust[index2].velocity += this.velocity / 10f;
              Main.dust[index2].noGravity = true;
            }
          }
          if ((double) this.localAI[0] > (double) num1)
            this.localAI[0] = num1;
        }
        else
        {
          this.localAI[0] -= num2;
          if ((double) this.localAI[0] <= 0.0)
          {
            this.Kill();
            return;
          }
        }
      }
      if (this.type == 438)
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.1f, 0.2f);
      if (this.type == 593)
      {
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.4f, 0.1f, 0.3f);
        int num1 = this.frameCounter + 1;
        this.frameCounter = num1;
        if (num1 >= 12)
        {
          int num2 = this.frame + 1;
          this.frame = num2;
          if (num2 >= Main.projFrames[this.type])
            this.frame = 0;
          this.frameCounter = 0;
        }
        if (Main.rand.Next(2) == 0)
        {
          Vector2 spinningpoint = Vector2.UnitY.RotatedByRandom(6.28318548202515);
          Dust dust = Main.dust[Dust.NewDust(this.Center - spinningpoint * 8f, 0, 0, 240, 0.0f, 0.0f, 0, new Color(), 1f)];
          int num2 = 1;
          dust.noGravity = num2 != 0;
          Vector2 vector2_1 = this.Center - spinningpoint * 8f * this.scale;
          dust.position = vector2_1;
          Vector2 vector2_2 = spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * 2f;
          dust.velocity = vector2_2;
          Vector2 zero = Vector2.Zero;
          dust.velocity = zero;
          double num3 = 0.5 + (double) Main.rand.NextFloat();
          dust.scale = (float) num3;
          double num4 = 0.5;
          dust.fadeIn = (float) num4;
        }
      }
      if (this.type == 592)
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.15f, 0.15f, 0.4f);
      if (this.type == 462)
      {
        int index = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
        Main.dust[index].noLight = true;
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity = this.velocity;
        Main.dust[index].position -= Vector2.One * 4f;
        Main.dust[index].scale = 0.8f;
        int num1 = this.frameCounter + 1;
        this.frameCounter = num1;
        if (num1 >= 9)
        {
          this.frameCounter = 0;
          int num2 = this.frame + 1;
          this.frame = num2;
          if (num2 >= 5)
            this.frame = 0;
        }
      }
      if (this.type == 437)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item12, this.position);
        }
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index1 = 0; index1 < 4; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.25f);
            Main.dust[index2].scale = 0.5f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity /= 2f;
            Main.dust[index2].velocity += this.velocity * 0.66f;
          }
        }
        if ((double) this.ai[0] < 16.0)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 226, this.velocity.X, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].position = this.position + new Vector2((float) ((this.direction == 1 ? 1 : 0) * this.width), (float) (2 + (this.height - 4) * index1));
            Main.dust[index2].scale = 0.3f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity = Vector2.Zero;
          }
        }
      }
      if (this.type == 435)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item12, this.position);
        }
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.3f, 0.8f, 1.1f);
      }
      if (this.type == 682)
      {
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.DD2_LightningBugZap, this.position);
          for (int index = 0; index < 8; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 272, 0.0f, 0.0f, 0, new Color(), 1f);
            dust.velocity *= 1f;
            dust.velocity += this.velocity * 0.65f;
            dust.scale = 0.6f;
            dust.fadeIn = 0.8f;
            dust.noGravity = true;
            dust.noLight = true;
            dust.position += dust.velocity * 3f;
          }
        }
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 3)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
          if (this.frame >= 4)
            this.frame = 0;
        }
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.5f, 0.2f, 1.1f);
      }
      if (this.type == 684)
      {
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
        ++this.localAI[0];
        for (int index = 0; index < 1; ++index)
        {
          Vector2 vector2_1 = (Utils.RandomVector2(Main.rand, -0.5f, 0.5f) * new Vector2(20f, 80f)).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
          Dust dust = Dust.NewDustDirect(this.Center, 0, 0, 60, 0.0f, 0.0f, 0, new Color(), 1f);
          int maxValue = (int) sbyte.MaxValue;
          dust.alpha = maxValue;
          double num1 = 1.5;
          dust.fadeIn = (float) num1;
          double num2 = 1.29999995231628;
          dust.scale = (float) num2;
          Vector2 vector2_2 = dust.velocity * 0.3f;
          dust.velocity = vector2_2;
          Vector2 vector2_3 = this.Center + vector2_1;
          dust.position = vector2_3;
          int num3 = 1;
          dust.noGravity = num3 != 0;
          int num4 = 1;
          dust.noLight = num4 != 0;
          Color color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          dust.color = color;
        }
        Lighting.AddLight(this.Center, 1.1f, 0.3f, 0.4f);
      }
      if (this.type == 408)
      {
        this.alpha = this.alpha - 40;
        if (this.alpha < 0)
          this.alpha = 0;
        this.spriteDirection = this.direction;
      }
      if (this.type == 282)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100, new Color(), 1f);
        Main.dust[index].scale = (float) Main.rand.Next(1, 10) * 0.1f;
        Main.dust[index].noGravity = true;
        Main.dust[index].fadeIn = 1.5f;
        Main.dust[index].velocity *= 0.25f;
        Main.dust[index].velocity += this.velocity * 0.25f;
      }
      if (this.type == 275 || this.type == 276)
      {
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter > 1)
        {
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame > 1)
            this.frame = 0;
        }
      }
      if (this.type == 225)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, 0.0f, 0.0f, 0, new Color(), 1f);
        Main.dust[index].noGravity = true;
        Main.dust[index].scale = 1.3f;
        Main.dust[index].velocity *= 0.5f;
      }
      if (this.type == 174)
      {
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(this.oldPosition - this.velocity * 3f, this.width, this.height, 76, 0.0f, 0.0f, 50, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
          Main.dust[index].velocity *= 0.5f;
        }
        this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item17, this.position);
        }
      }
      else if (this.type == 605)
      {
        if (this.alpha == 0 && Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(this.position - this.velocity * 3f, this.width, this.height, 4, 0.0f, 0.0f, 50, new Color(78, 136, (int) byte.MaxValue, 150), 1.2f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].velocity += this.velocity * 0.3f;
          Main.dust[index].noGravity = true;
        }
        this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item17, this.position);
        }
      }
      else if (this.type == 176)
      {
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(this.oldPosition, this.width, this.height, 22, 0.0f, 0.0f, 100, new Color(), 0.5f);
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
          Main.dust[index].velocity *= 0.15f;
          Main.dust[index].fadeIn = 0.8f;
        }
        this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item17, this.position);
        }
      }
      if (this.type == 350)
      {
        this.alpha = this.alpha - 100;
        if (this.alpha < 0)
          this.alpha = 0;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
        if (this.alpha == 0)
        {
          int num = 2;
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 6, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index].scale *= (float) (1.79999995231628 + (double) Main.rand.Next(10) * 0.100000001490116);
            Main.dust[index].velocity *= 0.2f;
            Main.dust[index].noGravity = true;
          }
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 31, 0.0f, 0.0f, 100, new Color(), 0.5f);
            Main.dust[index].fadeIn = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
            Main.dust[index].velocity *= 0.05f;
          }
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item42, this.position);
        }
      }
      if (this.type == 325)
      {
        this.alpha = this.alpha - 100;
        if (this.alpha < 0)
          this.alpha = 0;
        Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
        if (this.alpha == 0)
        {
          int num = 2;
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 6, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index].scale *= (float) (1.79999995231628 + (double) Main.rand.Next(10) * 0.100000001490116);
            Main.dust[index].velocity *= 0.2f;
            Main.dust[index].noGravity = true;
          }
          if (Main.rand.Next(4) == 0)
          {
            int index = Dust.NewDust(new Vector2(this.Center.X - (float) num, (float) ((double) this.Center.Y - (double) num - 2.0)) - this.velocity * 0.5f, num * 2, num * 2, 31, 0.0f, 0.0f, 100, new Color(), 0.5f);
            Main.dust[index].fadeIn = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
            Main.dust[index].velocity *= 0.05f;
          }
        }
        if ((double) this.ai[1] == 0.0)
        {
          this.ai[1] = 1f;
          Main.PlaySound(SoundID.Item42, this.position);
        }
      }
      if (this.type == 469)
      {
        ++this.localAI[1];
        if ((double) this.localAI[1] > 2.0)
        {
          this.alpha = this.alpha - 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
      }
      else if (this.type == 83 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item33, this.position);
      }
      else if (this.type == 408 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 19, 1f, 0.0f);
      }
      else if (this.type == 259 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item33, this.position);
      }
      else if (this.type == 110 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item11, this.position);
      }
      else if (this.type == 302 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item11, this.position);
      }
      else if (this.type == 438 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 593 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item11, this.position);
      }
      else if (this.type == 592 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 462 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        if (Main.rand.Next(2) == 0)
          Main.PlaySound(SoundID.Item124, this.position);
        else
          Main.PlaySound(SoundID.Item125, this.position);
        Vector2 vector2 = Vector2.Normalize(this.velocity);
        int num = Main.rand.Next(5, 10);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
          --Main.dust[index2].velocity.Y;
          Main.dust[index2].velocity += vector2 * 2f;
          Main.dust[index2].position -= Vector2.One * 4f;
          Main.dust[index2].noGravity = true;
        }
      }
      else if (this.type == 84 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 389 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 257 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 100 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item33, this.position);
      }
      else if (this.type == 98 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 184 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 195 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 275 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item17, this.position);
      }
      else if (this.type == 276 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item17, this.position);
      }
      else if ((this.type == 81 || this.type == 82) && (double) this.ai[1] == 0.0)
      {
        Main.PlaySound(SoundID.Item5, this.position);
        this.ai[1] = 1f;
      }
      else if (this.type == 180 && (double) this.ai[1] == 0.0)
      {
        Main.PlaySound(SoundID.Item11, this.position);
        this.ai[1] = 1f;
      }
      else if (this.type == 248 && (double) this.ai[1] == 0.0)
      {
        Main.PlaySound(SoundID.Item17, this.position);
        this.ai[1] = 1f;
      }
      else if (this.type == 576 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item12, this.position);
      }
      else if (this.type == 577 && (double) this.ai[1] == 0.0)
      {
        this.ai[1] = 1f;
        Main.PlaySound(SoundID.Item36, this.position);
      }
      else if (this.type == 710)
      {
        this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
        if (Main.rand.Next(4) == 0)
        {
          if (Main.rand.Next(2) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.6f);
            Main.dust[index].noGravity = true;
          }
          int index1 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.2f);
          Main.dust[index1].noGravity = true;
          Main.dust[index1].velocity *= 2f;
          Main.dust[index1].velocity += this.velocity;
          Main.dust[index1].fadeIn = (double) this.ai[1] != -1.0 ? 1.22f : 1.5f;
          if (this.wet)
            this.Kill();
        }
      }
      else if (this.type == 639)
      {
        if ((double) this.localAI[0] == 0.0 && (double) this.localAI[1] == 0.0)
        {
          this.localAI[0] = this.Center.X;
          this.localAI[1] = this.Center.Y;
          this.ai[0] = this.velocity.X;
          this.ai[1] = this.velocity.Y;
        }
        this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      else if (this.type == 640)
      {
        this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.velocity == Vector2.Zero)
        {
          this.ai[0] = 0.0f;
          bool flag = true;
          for (int index = 1; index < this.oldPos.Length; ++index)
          {
            if (this.oldPos[index] != this.oldPos[0])
              flag = false;
          }
          if (flag)
          {
            this.Kill();
            return;
          }
          if (Main.rand.Next(this.extraUpdates) == 0 && (this.velocity != Vector2.Zero || Main.rand.Next((double) this.localAI[1] == 2.0 ? 2 : 6) == 0))
          {
            for (int index1 = 0; index1 < 2; ++index1)
            {
              float num1 = this.rotation + (float) ((Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
              float num2 = (float) (Main.rand.NextDouble() * 0.800000011920929 + 1.0);
              Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
              int index2 = Dust.NewDust(this.Center, 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].scale = 1.2f;
            }
            if (Main.rand.Next(10) == 0)
            {
              int index = Dust.NewDust(this.Center + this.velocity.RotatedBy(1.57079637050629, new Vector2()) * ((float) Main.rand.NextDouble() - 0.5f) * (float) this.width - Vector2.One * 4f, 8, 8, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Main.dust[index].velocity *= 0.5f;
              Main.dust[index].velocity.Y = -Math.Abs(Main.dust[index].velocity.Y);
            }
          }
        }
        else if (this.numUpdates == 1)
        {
          float num1 = (float) ((double) this.rotation + 1.57079637050629 + (Main.rand.Next(2) == 1 ? -1.0 : 1.0) * 1.57079637050629);
          float num2 = (float) (Main.rand.NextDouble() * 0.25 + 0.25);
          Vector2 vector2 = new Vector2((float) Math.Cos((double) num1) * num2, (float) Math.Sin((double) num1) * num2);
          int index = Dust.NewDust(this.position, 0, 0, 229, vector2.X, vector2.Y, 0, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Main.dust[index].scale = 1.2f;
        }
      }
      if (this.type == 41)
      {
        int index1 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.6f);
        Main.dust[index1].noGravity = true;
        int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
        Main.dust[index2].noGravity = true;
      }
      else if (this.type == 55)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0.0f, 0.0f, 0, new Color(), 0.9f);
        Main.dust[index].noGravity = true;
      }
      else if (this.type == 374)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          Main.PlaySound(SoundID.Item17, this.position);
          this.localAI[0] = 1f;
        }
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0.0f, 0.0f, 0, new Color(), 0.9f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.5f;
        }
      }
      else if (this.type == 376)
      {
        if ((double) this.localAI[0] == 0.0)
          Main.PlaySound(SoundID.Item20, this.position);
        ++this.localAI[0];
        if ((double) this.localAI[0] > 3.0)
        {
          int num = 1;
          if ((double) this.localAI[0] > 5.0)
            num = 2;
          for (int index1 = 0; index1 < num; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 2f), this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity.X *= 0.3f;
            Main.dust[index2].velocity.Y *= 0.3f;
            Main.dust[index2].noLight = true;
          }
          if (this.wet && !this.lavaWet)
          {
            this.Kill();
            return;
          }
        }
      }
      else if (this.type == 91 && Main.rand.Next(2) == 0)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, Main.rand.Next(2) != 0 ? 58 : 15, this.velocity.X * 0.25f, this.velocity.Y * 0.25f, 150, new Color(), 0.9f);
        Main.dust[index].velocity *= 0.25f;
      }
      if (this.type == 163 || this.type == 310)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      int type1 = this.type;
      if (type1 <= 104)
      {
        if (type1 <= 36)
        {
          if (type1 != 14 && type1 != 20 && type1 != 36)
            goto label_488;
        }
        else if (type1 <= 89)
        {
          if ((uint) (type1 - 83) > 1U && type1 != 89)
            goto label_488;
        }
        else if (type1 != 100 && type1 != 104)
          goto label_488;
      }
      else if (type1 <= 180)
      {
        if (type1 != 110 && (uint) (type1 - 158) > 3U && type1 != 180)
          goto label_488;
      }
      else if (type1 <= 287)
      {
        if (type1 != 279 && (uint) (type1 - 283) > 4U)
          goto label_488;
      }
      else if (type1 != 389)
      {
        if ((uint) (type1 - 576) <= 1U)
        {
          ++this.localAI[1];
          if ((double) this.localAI[1] > 2.0)
          {
            if (this.alpha > 0)
              this.alpha = this.alpha - 15;
            if (this.alpha < 0)
            {
              this.alpha = 0;
              goto label_488;
            }
            else
              goto label_488;
          }
          else
            goto label_488;
        }
        else
          goto label_488;
      }
      if (this.alpha > 0)
        this.alpha = this.alpha - 15;
      if (this.alpha < 0)
        this.alpha = 0;
label_488:
      if (this.type == 484)
      {
        int index = Dust.NewDust(this.position, this.width, this.height, 78, 0.0f, 0.0f, 0, new Color(), 1f);
        Main.dust[index].noGravity = true;
        Main.dust[index].velocity *= 0.1f;
        Main.dust[index].scale = 0.75f;
        Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
        Main.dust[index].position += this.velocity * (float) Main.rand.Next(0, 101) * 0.01f;
      }
      if (this.type == 242 || this.type == 302 || (this.type == 438 || this.type == 462) || this.type == 592)
      {
        float num = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y);
        if (this.alpha > 0)
          this.alpha = this.alpha - (int) (byte) ((double) num * 0.9);
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 660)
      {
        DelegateMethods.v3_1 = new Vector3(0.6f, 1f, 1f) * 0.2f;
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * 10f, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
        if (this.alpha > 0)
        {
          Main.PlaySound(SoundID.Item9, this.Center);
          this.alpha = 0;
          this.scale = 1.1f;
          this.frame = Main.rand.Next(14);
          float num = 16f;
          for (int index1 = 0; (double) index1 < (double) num; ++index1)
          {
            Vector2 v = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num), new Vector2()) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.Center, 0, 0, 180, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].scale = 1.5f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + v;
            Main.dust[index2].velocity = this.velocity * 0.0f + v.SafeNormalize(Vector2.UnitY) * 1f;
          }
        }
      }
      if (this.type == 712)
      {
        DelegateMethods.v3_1 = new Vector3(0.4f, 0.4f, 0.4f) * 0.7f;
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * 10f, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
        if (this.alpha == (int) byte.MaxValue)
          this.frame = Main.rand.Next(2) * 4;
        int num1 = this.frameCounter + 1;
        this.frameCounter = num1;
        if (num1 >= 4)
        {
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame == 4)
            this.frame = 0;
          if (this.frame >= 8)
            this.frame = 4;
        }
        if (this.alpha > 0)
        {
          this.alpha = 0;
          this.scale = 1.1f;
          this.frame = Main.rand.Next(14);
          float num2 = 4f;
          for (int index1 = 0; (double) index1 < (double) num2; ++index1)
          {
            Vector2 v = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num2), new Vector2()) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
            int index2 = Dust.NewDust(this.Center, 0, 0, 15, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].scale = 1.7f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].position = this.Center + v + this.velocity.SafeNormalize(Vector2.Zero) * 50f;
            Main.dust[index2].velocity = Main.dust[index2].velocity * 2f + v.SafeNormalize(Vector2.UnitY) * 0.3f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
            Main.dust[index2].velocity *= 0.7f;
            Main.dust[index2].position += Main.dust[index2].velocity * 5f;
          }
        }
      }
      if (this.type == 661)
      {
        if (this.alpha <= 0)
        {
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 240, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity *= 0.3f;
            Main.dust[index2].noLight = true;
          }
        }
        if (this.alpha > 0)
        {
          this.alpha = this.alpha - 55;
          this.scale = 1.3f;
          if (this.alpha < 0)
          {
            this.alpha = 0;
            float num = 16f;
            for (int index1 = 0; (double) index1 < (double) num; ++index1)
            {
              Vector2 vector2 = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num), new Vector2()) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
              int index2 = Dust.NewDust(this.Center, 0, 0, 62, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].scale = 1.5f;
              Main.dust[index2].noLight = true;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].position = this.Center + vector2;
              Main.dust[index2].velocity = Main.dust[index2].velocity * 4f + this.velocity * 0.3f;
            }
          }
        }
      }
      if (this.type == 706)
      {
        if (this.wet)
        {
          this.Kill();
          return;
        }
        if ((double) this.localAI[1] == 0.0)
        {
          float[] localAi = this.localAI;
          int index1 = 0;
          SlotId slotId = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_PhantomPhoenixShot, this.Center);
          // ISSUE: explicit reference operation
          double num1 = (double) ((SlotId) @slotId).ToFloat();
          localAi[index1] = (float) num1;
          ++this.localAI[1];
          for (int index2 = 0; index2 < 15; ++index2)
          {
            if (Main.rand.Next(4) != 0)
            {
              Dust dust = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 31, 31 }), 0.0f, 0.0f, 0, new Color(), 1f);
              int num2 = 1;
              dust.noGravity = num2 != 0;
              Vector2 vector2 = dust.velocity * 2.3f;
              dust.velocity = vector2;
              double num3 = 1.5;
              dust.fadeIn = (float) num3;
              int num4 = 1;
              dust.noLight = num4 != 0;
            }
          }
        }
        ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[0]));
        if (activeSound != null)
        {
          activeSound.Position = this.Center;
        }
        else
        {
          float[] localAi = this.localAI;
          int index = 0;
          SlotId invalid = (SlotId) SlotId.Invalid;
          // ISSUE: explicit reference operation
          double num = (double) ((SlotId) @invalid).ToFloat();
          localAi[index] = (float) num;
        }
        if (this.alpha <= 0)
        {
          for (int index = 0; index < 2; ++index)
          {
            if (Main.rand.Next(4) != 0)
            {
              Dust dust = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 31, 31 }), 0.0f, 0.0f, 0, new Color(), 1f);
              int num1 = 1;
              dust.noGravity = num1 != 0;
              Vector2 vector2 = dust.velocity * 2.3f;
              dust.velocity = vector2;
              double num2 = 1.5;
              dust.fadeIn = (float) num2;
              int num3 = 1;
              dust.noLight = num3 != 0;
            }
          }
          Vector2 vector2_1 = (new Vector2(0.0f, (float) Math.Cos((double) this.frameCounter * 6.28318548202515 / 40.0 - 1.57079637050629)) * 16f).RotatedBy((double) this.rotation, new Vector2());
          Vector2 vector2_2 = this.velocity.SafeNormalize(Vector2.Zero);
          for (int index = 0; index < 1; ++index)
          {
            Dust dust1 = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, 6, 0.0f, 0.0f, 0, new Color(), 1f);
            int num1 = 1;
            dust1.noGravity = num1 != 0;
            Vector2 vector2_3 = this.Center + vector2_1;
            dust1.position = vector2_3;
            Vector2 vector2_4 = dust1.velocity * 0.0f;
            dust1.velocity = vector2_4;
            double num2 = 1.39999997615814;
            dust1.fadeIn = (float) num2;
            double num3 = 1.14999997615814;
            dust1.scale = (float) num3;
            int num4 = 1;
            dust1.noLight = num4 != 0;
            Vector2 vector2_5 = dust1.position + this.velocity * 1.2f;
            dust1.position = vector2_5;
            Vector2 vector2_6 = dust1.velocity + vector2_2 * 2f;
            dust1.velocity = vector2_6;
            Dust dust2 = Dust.NewDustDirect(this.Center - this.Size / 4f, this.width / 2, this.height / 2, 6, 0.0f, 0.0f, 0, new Color(), 1f);
            int num5 = 1;
            dust2.noGravity = num5 != 0;
            Vector2 vector2_7 = this.Center + vector2_1;
            dust2.position = vector2_7;
            Vector2 vector2_8 = dust2.velocity * 0.0f;
            dust2.velocity = vector2_8;
            double num6 = 1.39999997615814;
            dust2.fadeIn = (float) num6;
            double num7 = 1.14999997615814;
            dust2.scale = (float) num7;
            int num8 = 1;
            dust2.noLight = num8 != 0;
            Vector2 vector2_9 = dust2.position + this.velocity * 0.5f;
            dust2.position = vector2_9;
            Vector2 vector2_10 = dust2.position + this.velocity * 1.2f;
            dust2.position = vector2_10;
            Vector2 vector2_11 = dust2.velocity + vector2_2 * 2f;
            dust2.velocity = vector2_11;
          }
        }
        int num9 = this.frameCounter + 1;
        this.frameCounter = num9;
        if (num9 >= 40)
          this.frameCounter = 0;
        this.frame = this.frameCounter / 5;
        if (this.alpha > 0)
        {
          this.alpha = this.alpha - 55;
          if (this.alpha < 0)
          {
            this.alpha = 0;
            float num1 = 16f;
            for (int index1 = 0; (double) index1 < (double) num1; ++index1)
            {
              Vector2 vector2 = (Vector2.UnitX * 0.0f + -Vector2.UnitY.RotatedBy((double) index1 * (6.28318548202515 / (double) num1), new Vector2()) * new Vector2(1f, 4f)).RotatedBy((double) this.velocity.ToRotation(), new Vector2());
              int index2 = Dust.NewDust(this.Center, 0, 0, 6, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].scale = 1.5f;
              Main.dust[index2].noLight = true;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].position = this.Center + vector2;
              Main.dust[index2].velocity = Main.dust[index2].velocity * 4f + this.velocity * 0.3f;
            }
          }
        }
        DelegateMethods.v3_1 = new Vector3(1f, 0.6f, 0.2f);
        Utils.PlotTileLine(this.Center, this.Center + this.velocity * 4f, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
      }
      if (this.type == 638)
      {
        float num1 = this.velocity.Length();
        if (this.alpha > 0)
          this.alpha = this.alpha - (int) (byte) ((double) num1 * 0.3);
        if (this.alpha < 0)
          this.alpha = 0;
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        hitbox.Offset((int) this.velocity.X, (int) this.velocity.Y);
        bool flag = false;
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.active && !npc.dontTakeDamage && (npc.immune[this.owner] == 0 && this.localNPCImmunity[index] == 0) && (npc.Hitbox.Intersects(hitbox) && !npc.friendly))
          {
            flag = true;
            break;
          }
        }
        if (flag)
        {
          int num2 = Main.rand.Next(15, 31);
          for (int index1 = 0; index1 < num2; ++index1)
          {
            int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 0.8f);
            Main.dust[index2].velocity *= 1.6f;
            --Main.dust[index2].velocity.Y;
            Main.dust[index2].velocity += this.velocity;
            Main.dust[index2].noGravity = true;
          }
        }
      }
      if (this.type == 257 || this.type == 593)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 10;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 88)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 10;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 532)
        ++this.ai[0];
      bool flag1 = true;
      int type2 = this.type;
      if (type2 <= 323)
      {
        if (type2 <= 161)
        {
          if (type2 <= 55)
          {
            if (type2 <= 20)
            {
              if (type2 != 5 && type2 != 14 && type2 != 20)
                goto label_619;
            }
            else if (type2 != 36 && type2 != 38 && type2 != 55)
              goto label_619;
          }
          else if (type2 <= 98)
          {
            if ((uint) (type2 - 83) > 1U && (uint) (type2 - 88) > 1U && type2 != 98)
              goto label_619;
          }
          else if (type2 <= 104)
          {
            if (type2 != 100 && type2 != 104)
              goto label_619;
          }
          else if (type2 != 110 && (uint) (type2 - 158) > 3U)
            goto label_619;
        }
        else if (type2 <= 259)
        {
          if (type2 <= 242)
          {
            if (type2 != 180 && type2 != 184 && type2 != 242)
              goto label_619;
          }
          else if (type2 != 248 && type2 != 257 && type2 != 259)
            goto label_619;
        }
        else if (type2 <= 279)
        {
          if (type2 != 265 && type2 != 270 && type2 != 279)
            goto label_619;
        }
        else if (type2 <= 299)
        {
          if ((uint) (type2 - 283) > 4U && type2 != 299)
            goto label_619;
        }
        else if (type2 != 302 && type2 != 323)
          goto label_619;
      }
      else if (type2 <= 485)
      {
        if (type2 <= 389)
        {
          if (type2 <= 355)
          {
            if (type2 != 325 && (uint) (type2 - 348) > 2U && type2 != 355)
              goto label_619;
          }
          else if (type2 != 374 && type2 != 376 && type2 != 389)
            goto label_619;
        }
        else if (type2 <= 459)
        {
          switch (type2 - 435)
          {
            case 0:
            case 1:
            case 3:
            case 5:
            case 7:
              break;
            case 2:
            case 4:
            case 6:
              goto label_619;
            default:
              if (type2 == 449 || type2 == 459)
                break;
              goto label_619;
          }
        }
        else if (type2 <= 469)
        {
          if (type2 != 462 && (uint) (type2 - 467) > 2U)
            goto label_619;
        }
        else if (type2 != 472 && (uint) (type2 - 483) > 2U)
          goto label_619;
      }
      else if (type2 <= 606)
      {
        if (type2 <= 585)
        {
          if (type2 != 498 && (uint) (type2 - 576) > 1U && type2 != 585)
            goto label_619;
        }
        else if ((uint) (type2 - 592) > 1U && type2 != 601 && type2 != 606)
          goto label_619;
      }
      else if (type2 <= 639)
      {
        if (type2 != 616 && (uint) (type2 - 634) > 1U && (uint) (type2 - 638) > 1U)
          goto label_619;
      }
      else if (type2 <= 682)
      {
        if ((uint) (type2 - 660) > 1U && type2 != 682)
          goto label_619;
      }
      else if (type2 != 684)
      {
        switch (type2 - 706)
        {
          case 0:
          case 3:
          case 4:
          case 6:
            break;
          default:
            goto label_619;
        }
      }
      flag1 = false;
label_619:
      if (flag1)
        ++this.ai[0];
      if (this.type == 270)
      {
        int closest = (int) Player.FindClosest(this.Center, 1, 1);
        ++this.ai[1];
        if ((double) this.ai[1] < 110.0 && (double) this.ai[1] > 30.0)
        {
          float num = this.velocity.Length();
          Vector2 vector2 = Main.player[closest].Center - this.Center;
          vector2.Normalize();
          this.velocity = (this.velocity * 24f + vector2 * num) / 25f;
          this.velocity.Normalize();
          this.velocity = this.velocity * num;
        }
        if ((double) this.ai[0] < 0.0)
        {
          if ((double) this.velocity.Length() < 18.0)
            this.velocity = this.velocity * 1.02f;
          if ((double) this.localAI[0] == 0.0)
          {
            this.localAI[0] = 1f;
            Main.PlaySound(SoundID.Item8, this.position);
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 5, this.velocity.X, this.velocity.Y, 0, new Color(), 2f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].velocity = this.Center - Main.dust[index2].position;
              Main.dust[index2].velocity.Normalize();
              Main.dust[index2].velocity *= -5f;
              Main.dust[index2].velocity += this.velocity / 2f;
            }
          }
          this.friendly = false;
          this.hostile = true;
        }
      }
      if (this.type == 585)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item8, this.position);
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 27, this.velocity.X, this.velocity.Y, 0, new Color(), 2f);
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity = this.Center - Main.dust[index2].position;
            Main.dust[index2].velocity.Normalize();
            Main.dust[index2].velocity *= -5f;
            Main.dust[index2].velocity += this.velocity / 2f;
            Main.dust[index2].noLight = true;
          }
        }
        if (this.alpha > 0)
          this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= 12)
          this.frameCounter = 0;
        this.frame = this.frameCounter / 2;
        if (this.frame > 3)
          this.frame = 6 - this.frame;
        Vector3 vector3 = NPCID.Sets.MagicAuraColor[54].ToVector3();
        Lighting.AddLight(this.Center, vector3.X, vector3.Y, vector3.Z);
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
          Main.dust[index].position -= this.velocity * 2f;
          Main.dust[index].noLight = true;
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity.X *= 0.3f;
          Main.dust[index].velocity.Y *= 0.3f;
        }
      }
      if (this.type == 594)
      {
        int num = (int) (43.0 - (double) this.ai[1]) / 13;
        if (num < 1)
          num = 1;
        int Type = (double) this.ai[1] < 20.0 ? 6 : 31;
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, new Color(), 2f);
          Main.dust[index2].position -= this.velocity * 2f;
          Main.dust[index2].noLight = true;
          Main.dust[index2].noGravity = true;
          Main.dust[index2].velocity.X *= 0.3f;
          Main.dust[index2].velocity.Y *= 0.3f;
          if (Type == 6)
            Main.dust[index2].fadeIn = Main.rand.NextFloat() * 2f;
        }
        ++this.ai[1];
        if ((double) this.ai[1] > (double) (43 * this.MaxUpdates))
        {
          this.Kill();
          return;
        }
      }
      if (this.type == 622)
      {
        int Type = 229;
        if (Main.rand.Next(3) != 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, Type, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, new Color(), 1.2f);
          Main.dust[index].position -= this.velocity * 2f;
          Main.dust[index].noLight = true;
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity.X *= 0.3f;
          Main.dust[index].velocity.Y *= 0.3f;
        }
        ++this.ai[1];
        if ((double) this.ai[1] > (double) (23 * this.MaxUpdates))
        {
          this.Kill();
          return;
        }
      }
      if (this.type == 587)
      {
        Color rgb = Main.hslToRgb(this.ai[1], 1f, 0.5f);
        rgb.A = (byte) 200;
        ++this.localAI[0];
        if ((double) this.localAI[0] >= 2.0)
        {
          if ((double) this.localAI[0] == 2.0)
          {
            Main.PlaySound(SoundID.Item5, this.position);
            for (int index1 = 0; index1 < 4; ++index1)
            {
              int index2 = Dust.NewDust(this.position, this.width, this.height, 76, this.velocity.X, this.velocity.Y, 0, rgb, 1.1f);
              Main.dust[index2].noGravity = true;
              Main.dust[index2].velocity = this.Center - Main.dust[index2].position;
              Main.dust[index2].velocity.Normalize();
              Main.dust[index2].velocity *= -3f;
              Main.dust[index2].velocity += this.velocity / 2f;
            }
          }
          else
          {
            this.frame = this.frame + 1;
            if (this.frame > 2)
              this.frame = 0;
            for (int index1 = 0; index1 < 1; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 0, rgb, 0.9f);
              Main.dust[index2].position = this.Center;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].velocity = this.velocity * 0.5f;
            }
          }
        }
      }
      if (this.type == 349)
      {
        this.frame = (int) this.ai[0];
        this.velocity.Y += 0.2f;
        if ((double) this.localAI[0] == 0.0 || (double) this.localAI[0] == 2.0)
        {
          this.scale = this.scale + 0.01f;
          this.alpha = this.alpha - 50;
          if (this.alpha <= 0)
          {
            this.localAI[0] = 1f;
            this.alpha = 0;
          }
        }
        else if ((double) this.localAI[0] == 1.0)
        {
          this.scale = this.scale - 0.01f;
          this.alpha = this.alpha + 50;
          if (this.alpha >= (int) byte.MaxValue)
          {
            this.localAI[0] = 2f;
            this.alpha = (int) byte.MaxValue;
          }
        }
      }
      if (this.type == 348)
      {
        if ((double) this.localAI[1] == 0.0)
        {
          this.localAI[1] = 1f;
          Main.PlaySound(SoundID.Item8, this.position);
        }
        if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 2.0)
        {
          this.scale = this.scale + 0.01f;
          this.alpha = this.alpha - 50;
          if (this.alpha <= 0)
          {
            this.ai[0] = 1f;
            this.alpha = 0;
          }
        }
        else if ((double) this.ai[0] == 1.0)
        {
          this.scale = this.scale - 0.01f;
          this.alpha = this.alpha + 50;
          if (this.alpha >= (int) byte.MaxValue)
          {
            this.ai[0] = 2f;
            this.alpha = (int) byte.MaxValue;
          }
        }
      }
      if (this.type == 572)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item17, this.position);
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
          Main.dust[index2].velocity *= 0.5f;
          Main.dust[index2].velocity += this.velocity;
          Main.dust[index2].velocity *= 0.5f;
          Main.dust[index2].noGravity = true;
          Main.dust[index2].scale = 1.2f;
          Main.dust[index2].position = (this.Center + this.position) / 2f;
        }
      }
      if (this.type == 577)
        Lighting.AddLight(this.Center, 0.1f, 0.3f, 0.4f);
      else if (this.type == 576)
      {
        Lighting.AddLight(this.Center, 0.4f, 0.2f, 0.4f);
        for (int index = 0; index < 5; ++index)
        {
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 242, this.velocity.X, this.velocity.Y, 100, new Color(), 1f)];
          Vector2 zero = Vector2.Zero;
          dust.velocity = zero;
          Vector2 vector2 = dust.position - this.velocity / 5f * (float) index;
          dust.position = vector2;
          int num1 = 1;
          dust.noGravity = num1 != 0;
          double num2 = 0.800000011920929;
          dust.scale = (float) num2;
          int num3 = 1;
          dust.noLight = num3 != 0;
        }
      }
      else if (this.type == 581)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item17, this.Center);
        }
        for (int index = 0; index < 2; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 229, 161, 161 });
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100, new Color(), 1f)];
          Vector2 vector2 = dust.velocity / 4f + this.velocity / 2f;
          dust.velocity = vector2;
          int num1 = 1;
          dust.noGravity = num1 != 0;
          double num2 = 1.20000004768372;
          dust.scale = (float) num2;
          Vector2 center = this.Center;
          dust.position = center;
          int num3 = 1;
          dust.noLight = num3 != 0;
        }
      }
      else if (this.type == 671)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index = 0; index < 8; ++index)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[2]{ 27, 62 });
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100, new Color(), 1f)];
            Vector2 vector2 = (Main.rand.NextFloatDirection() * 3.141593f).ToRotationVector2() * 2f + this.velocity.SafeNormalize(Vector2.Zero) * 3f;
            dust.velocity = vector2;
            int num1 = 1;
            dust.noGravity = num1 != 0;
            double num2 = 1.5;
            dust.scale = (float) num2;
            double num3 = 1.20000004768372;
            dust.fadeIn = (float) num3;
            Vector2 center = this.Center;
            dust.position = center;
            int num4 = 1;
            dust.noLight = num4 != 0;
          }
        }
        this.alpha = this.alpha - 20;
        if (this.alpha < 0)
          this.alpha = 0;
        for (int index = 0; index < 2; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 27, 27, 62 });
          Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100, new Color(), 1f)];
          Vector2 vector2 = dust.velocity / 4f + this.velocity / 2f;
          dust.velocity = vector2;
          int num1 = 1;
          dust.noGravity = num1 != 0;
          double num2 = 1.20000004768372;
          dust.scale = (float) num2;
          Vector2 center = this.Center;
          dust.position = center;
          int num3 = 1;
          dust.noLight = num3 != 0;
        }
      }
      else if (this.type == 675)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlayTrackedSound((SoundStyle) SoundID.DD2_DarkMageAttack, this.Center);
        }
        this.alpha = this.alpha - 20;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      else if (this.type == 676)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item17, this.Center);
        }
        this.alpha = this.alpha - 20;
        if (this.alpha < 0)
          this.alpha = 0;
        for (int index = 0; index < 2; ++index)
        {
          if (Main.rand.Next(5) != 0)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[2]{ 4, 256 });
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X, this.velocity.Y, 100, new Color(), 1f)];
            dust.velocity = dust.velocity / 4f + this.velocity / 2f;
            dust.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
            dust.position = this.Center;
            dust.position += new Vector2((float) (this.width * 2), 0.0f).RotatedBy(6.28318548202515 * (double) Main.rand.NextFloat(), new Vector2()) * Main.rand.NextFloat();
            dust.noLight = true;
            if (dust.type == 4)
              dust.color = new Color(80, 170, 40, 120);
          }
        }
      }
      else if (this.type == 686)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFireballShot, this.Center);
        }
        if ((double) this.ai[0] >= 2.0)
        {
          this.alpha = this.alpha - 25;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if (Main.rand.Next(4) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200, new Color(), 1f);
          double num = (double) dust.scale * 0.699999988079071;
          dust.scale = (float) num;
          Vector2 vector2 = dust.velocity + this.velocity * 1f;
          dust.velocity = vector2;
        }
        if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
        {
          Dust dust = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0.0f, 0.0f, 50, new Color(), 1f);
          double num = (double) dust.scale * 0.850000023841858;
          dust.scale = (float) num;
          Vector2 vector2 = dust.velocity + this.velocity * 0.85f;
          dust.velocity = vector2;
          Color purple = Color.Purple;
          dust.color = purple;
        }
      }
      else if (this.type == 711)
      {
        if ((double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          for (int index = 0; index < 10; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200, new Color(), 1f);
            double num1 = (double) dust.scale * 0.649999976158142;
            dust.scale = (float) num1;
            Vector2 vector2_1 = dust.velocity * 1.5f;
            dust.velocity = vector2_1;
            Vector2 vector2_2 = dust.velocity + this.velocity * 0.3f;
            dust.velocity = vector2_2;
            double num2 = 0.699999988079071;
            dust.fadeIn = (float) num2;
          }
        }
        if ((double) this.ai[0] >= 2.0)
        {
          this.alpha = this.alpha - 25;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        if (Main.rand.Next(4) == 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 200, new Color(), 1f);
          double num = (double) dust.scale * 0.699999988079071;
          dust.scale = (float) num;
          Vector2 vector2 = dust.velocity + this.velocity * 1f;
          dust.velocity = vector2;
        }
        if (Main.rand.Next(3) == 0 && this.oldPos[9] != Vector2.Zero)
        {
          Dust dust = Dust.NewDustDirect(this.oldPos[9], this.width, this.height, 55, 0.0f, 0.0f, 50, new Color(), 1f);
          double num = (double) dust.scale * 0.850000023841858;
          dust.scale = (float) num;
          Vector2 vector2 = dust.velocity + this.velocity * 0.85f;
          dust.velocity = vector2;
          Color purple = Color.Purple;
          dust.color = purple;
        }
      }
      if (this.type == 299)
      {
        if ((double) this.localAI[0] == 6.0)
        {
          Main.PlaySound(SoundID.Item8, this.position);
          for (int index1 = 0; index1 < 40; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].velocity *= 3f;
            Main.dust[index2].velocity += this.velocity * 0.75f;
            Main.dust[index2].scale *= 1.2f;
            Main.dust[index2].noGravity = true;
          }
        }
        ++this.localAI[0];
        if ((double) this.localAI[0] > 6.0)
        {
          for (int index1 = 0; index1 < 3; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 181, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 1f);
            Main.dust[index2].velocity *= 0.6f;
            Main.dust[index2].scale *= 1.4f;
            Main.dust[index2].noGravity = true;
          }
        }
      }
      else if (this.type == 270)
      {
        if ((double) this.ai[0] < 0.0)
          this.alpha = 0;
        if (this.alpha > 0)
          this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        this.frame = this.frame + 1;
        if (this.frame > 2)
          this.frame = 0;
        if ((double) this.ai[0] < 0.0)
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 1.5f);
            Main.dust[index2].position -= this.velocity;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity.X *= 0.3f;
            Main.dust[index2].velocity.Y *= 0.3f;
          }
        }
        else
        {
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
            Main.dust[index2].position -= this.velocity * 2f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].velocity.X *= 0.3f;
            Main.dust[index2].velocity.Y *= 0.3f;
          }
        }
      }
      if (this.type == 259)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 10;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      if (this.type == 265)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].velocity -= this.velocity * 0.4f;
        }
      }
      if (this.type == 355)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if (this.alpha == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].velocity -= this.velocity * 0.4f;
        }
      }
      if (this.type == 357)
      {
        if (this.alpha < 170)
        {
          for (int index1 = 0; index1 < 10; ++index1)
          {
            float x = this.position.X - this.velocity.X / 10f * (float) index1;
            float y = this.position.Y - this.velocity.Y / 10f * (float) index1;
            int index2 = Dust.NewDust(new Vector2(x, y), 1, 1, 206, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].alpha = this.alpha;
            Main.dust[index2].position.X = x;
            Main.dust[index2].position.Y = y;
            Main.dust[index2].velocity *= 0.0f;
            Main.dust[index2].noGravity = true;
          }
        }
        if (this.alpha > 0)
          this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      else if (this.type == 207)
      {
        if (this.alpha < 170)
        {
          for (int index1 = 0; index1 < 10; ++index1)
          {
            float x = this.position.X - this.velocity.X / 10f * (float) index1;
            float y = this.position.Y - this.velocity.Y / 10f * (float) index1;
            int index2 = Dust.NewDust(new Vector2(x, y), 1, 1, 75, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].alpha = this.alpha;
            Main.dust[index2].position.X = x;
            Main.dust[index2].position.Y = y;
            Main.dust[index2].velocity *= 0.0f;
            Main.dust[index2].noGravity = true;
          }
        }
        float num1 = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y);
        float num2 = this.localAI[0];
        if ((double) num2 == 0.0)
        {
          this.localAI[0] = num1;
          num2 = num1;
        }
        if (this.alpha > 0)
          this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
        float num3 = this.position.X;
        float num4 = this.position.Y;
        float num5 = 300f;
        bool flag2 = false;
        int num6 = 0;
        if ((double) this.ai[1] == 0.0)
        {
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, false) && ((double) this.ai[1] == 0.0 || (double) this.ai[1] == (double) (index + 1)))
            {
              float num7 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num8 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num9 = Math.Abs(this.position.X + (float) (this.width / 2) - num7) + Math.Abs(this.position.Y + (float) (this.height / 2) - num8);
              if ((double) num9 < (double) num5 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num5 = num9;
                num3 = num7;
                num4 = num8;
                flag2 = true;
                num6 = index;
              }
            }
          }
          if (flag2)
            this.ai[1] = (float) (num6 + 1);
          flag2 = false;
        }
        if ((double) this.ai[1] > 0.0)
        {
          int index = (int) ((double) this.ai[1] - 1.0);
          if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true) && !Main.npc[index].dontTakeDamage)
          {
            if ((double) Math.Abs(this.position.X + (float) (this.width / 2) - (Main.npc[index].position.X + (float) (Main.npc[index].width / 2))) + (double) Math.Abs(this.position.Y + (float) (this.height / 2) - (Main.npc[index].position.Y + (float) (Main.npc[index].height / 2))) < 1000.0)
            {
              flag2 = true;
              num3 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              num4 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
            }
          }
          else
            this.ai[1] = 0.0f;
        }
        if (!this.friendly)
          flag2 = false;
        if (flag2)
        {
          double num7 = (double) num2;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num8 = num3 - vector2.X;
          float num9 = num4 - vector2.Y;
          double num10 = Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9);
          float num11 = (float) (num7 / num10);
          float num12 = num8 * num11;
          float num13 = num9 * num11;
          int num14 = 8;
          this.velocity.X = (this.velocity.X * (float) (num14 - 1) + num12) / (float) num14;
          this.velocity.Y = (this.velocity.Y * (float) (num14 - 1) + num13) / (float) num14;
        }
      }
      else if (this.type == 81 || this.type == 91)
      {
        if ((double) this.ai[0] >= 20.0)
        {
          this.ai[0] = 20f;
          this.velocity.Y += 0.07f;
        }
      }
      else if (this.type == 174 || this.type == 605)
      {
        if ((double) this.ai[0] >= 5.0)
        {
          this.ai[0] = 5f;
          this.velocity.Y += 0.15f;
        }
      }
      else if (this.type == 337)
      {
        if ((double) this.position.Y > (double) Main.player[this.owner].position.Y - 300.0)
          this.tileCollide = true;
        if ((double) this.position.Y < Main.worldSurface * 16.0)
          this.tileCollide = true;
        this.frame = (int) this.ai[1];
        if (Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index].velocity *= 0.5f;
          Main.dust[index].noGravity = true;
        }
      }
      else if (this.type == 645)
      {
        if ((double) this.ai[1] != -1.0 && (double) this.position.Y > (double) this.ai[1])
          this.tileCollide = true;
        if (this.position.HasNaNs())
        {
          this.Kill();
          return;
        }
        int num1 = WorldGen.SolidTile(Framing.GetTileSafely((int) this.position.X / 16, (int) this.position.Y / 16)) ? 1 : 0;
        Dust dust = Main.dust[Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
        dust.position = this.Center;
        dust.velocity = Vector2.Zero;
        dust.noGravity = true;
        if (num1 != 0)
          dust.noLight = true;
        if ((double) this.ai[1] == -1.0)
        {
          ++this.ai[0];
          this.velocity = Vector2.Zero;
          this.tileCollide = false;
          this.penetrate = -1;
          this.position = this.Center;
          this.width = this.height = 140;
          this.Center = this.position;
          this.alpha = this.alpha - 10;
          if (this.alpha < 0)
            this.alpha = 0;
          int num2 = this.frameCounter + 1;
          this.frameCounter = num2;
          if (num2 >= this.MaxUpdates * 3)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
          }
          if ((double) this.ai[0] < (double) (Main.projFrames[this.type] * this.MaxUpdates * 3))
            return;
          this.Kill();
          return;
        }
        this.alpha = (int) byte.MaxValue;
        if (this.numUpdates == 0)
        {
          int num2 = -1;
          float num3 = 60f;
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this, false))
            {
              float num4 = this.Distance(npc.Center);
              if ((double) num4 < (double) num3 && Collision.CanHitLine(this.Center, 0, 0, npc.Center, 0, 0))
              {
                num3 = num4;
                num2 = index;
              }
            }
          }
          if (num2 != -1)
          {
            this.ai[0] = 0.0f;
            this.ai[1] = -1f;
            this.netUpdate = true;
            return;
          }
        }
      }
      else if (this.type >= 424 && this.type <= 426)
      {
        if ((double) this.position.Y > (double) Main.player[this.owner].position.Y - 300.0)
          this.tileCollide = true;
        if ((double) this.position.Y < Main.worldSurface * 16.0)
          this.tileCollide = true;
        this.scale = this.ai[1];
        this.rotation = this.rotation + this.velocity.X * 2f;
        Vector2 vector2_1 = this.Center + Vector2.Normalize(this.velocity) * 10f;
        Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f)];
        Vector2 vector2_2 = vector2_1;
        dust1.position = vector2_2;
        Vector2 vector2_3 = this.velocity.RotatedBy(1.57079637050629, new Vector2()) * 0.33f + this.velocity / 4f;
        dust1.velocity = vector2_3;
        Vector2 vector2_4 = dust1.position + this.velocity.RotatedBy(1.57079637050629, new Vector2());
        dust1.position = vector2_4;
        double num1 = 0.5;
        dust1.fadeIn = (float) num1;
        int num2 = 1;
        dust1.noGravity = num2 != 0;
        Dust dust2 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f)];
        Vector2 vector2_5 = vector2_1;
        dust2.position = vector2_5;
        Vector2 vector2_6 = this.velocity.RotatedBy(-1.57079637050629, new Vector2()) * 0.33f + this.velocity / 4f;
        dust2.velocity = vector2_6;
        Vector2 vector2_7 = dust2.position + this.velocity.RotatedBy(-1.57079637050629, new Vector2());
        dust2.position = vector2_7;
        double num3 = 0.5;
        dust2.fadeIn = (float) num3;
        int num4 = 1;
        dust2.noGravity = num4 != 0;
        for (int index1 = 0; index1 < 1; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].velocity *= 0.5f;
          Main.dust[index2].scale *= 1.3f;
          Main.dust[index2].fadeIn = 1f;
          Main.dust[index2].noGravity = true;
        }
      }
      else if (this.type == 344)
      {
        if (WorldGen.SolidTile((int) this.position.X / 16, (int) ((double) this.position.Y + (double) this.velocity.Y) / 16 + 1) || WorldGen.SolidTile((int) ((double) this.position.X + (double) this.width) / 16, (int) ((double) this.position.Y + (double) this.velocity.Y) / 16 + 1))
        {
          this.Kill();
          return;
        }
        ++this.localAI[1];
        if ((double) this.localAI[1] > 5.0)
        {
          this.alpha = this.alpha - 50;
          if (this.alpha < 0)
            this.alpha = 0;
        }
        this.frame = (int) this.ai[1];
        if ((double) this.localAI[1] > 20.0)
        {
          this.localAI[1] = 20f;
          this.velocity.Y += 0.15f;
        }
        this.rotation = this.rotation + Main.windSpeed * 0.2f;
        this.velocity.X += Main.windSpeed * 0.1f;
      }
      else if (this.type == 336 || this.type == 345)
      {
        if (this.type == 345 && (double) this.localAI[0] == 0.0)
        {
          this.localAI[0] = 1f;
          Main.PlaySound(SoundID.Item1, this.position);
        }
        if ((double) this.ai[0] >= 50.0)
        {
          this.ai[0] = 50f;
          this.velocity.Y += 0.5f;
        }
      }
      else if (this.type == 246)
      {
        this.alpha = this.alpha - 20;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] >= 60.0)
        {
          this.ai[0] = 60f;
          this.velocity.Y += 0.15f;
        }
      }
      else if (this.type == 311)
      {
        if (this.alpha > 0)
          this.alpha = this.alpha - 50;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.ai[0] >= 30.0)
        {
          this.ai[0] = 30f;
          if ((double) this.ai[1] == 0.0)
            this.ai[1] = 1f;
          this.velocity.Y += 0.5f;
        }
      }
      else if (this.type == 312)
      {
        if ((double) this.ai[0] >= 5.0)
          this.alpha = 0;
        if ((double) this.ai[0] >= 20.0)
        {
          this.ai[0] = 30f;
          this.velocity.Y += 0.5f;
        }
      }
      else if (this.type != 239 && this.type != 264)
      {
        if (this.type == 176)
        {
          if ((double) this.ai[0] >= 15.0)
          {
            this.ai[0] = 15f;
            this.velocity.Y += 0.05f;
          }
        }
        else if (this.type == 275 || this.type == 276)
        {
          if (this.alpha > 0)
            this.alpha = this.alpha - 30;
          if (this.alpha < 0)
            this.alpha = 0;
          if ((double) this.ai[0] >= 35.0)
          {
            this.ai[0] = 35f;
            this.velocity.Y += 0.025f;
          }
          if (Main.expertMode)
          {
            float num1 = 18f;
            int closest = (int) Player.FindClosest(this.Center, 1, 1);
            Vector2 vector2 = Main.player[closest].Center - this.Center;
            vector2.Normalize();
            vector2 *= num1;
            int num2 = 70;
            this.velocity = (this.velocity * (float) (num2 - 1) + vector2) / (float) num2;
            if ((double) this.velocity.Length() < 14.0)
            {
              this.velocity.Normalize();
              this.velocity = this.velocity * 14f;
            }
            this.tileCollide = false;
            if (this.timeLeft > 180)
              this.timeLeft = 180;
          }
        }
        else if (this.type == 172)
        {
          if ((double) this.ai[0] >= 17.0)
          {
            this.ai[0] = 17f;
            this.velocity.Y += 0.085f;
          }
        }
        else if (this.type == 117)
        {
          if ((double) this.ai[0] >= 35.0)
          {
            this.ai[0] = 35f;
            this.velocity.Y += 0.06f;
          }
        }
        else if (this.type == 120)
        {
          int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          if ((double) this.ai[0] >= 30.0)
          {
            this.ai[0] = 30f;
            this.velocity.Y += 0.05f;
          }
        }
        else if (this.type == 195)
        {
          if ((double) this.ai[0] >= 20.0)
          {
            this.ai[0] = 20f;
            this.velocity.Y += 0.075f;
            this.tileCollide = true;
          }
          else
            this.tileCollide = false;
        }
        else if (this.type == 267 || this.type == 477 || (this.type == 478 || this.type == 479))
        {
          ++this.localAI[0];
          if ((double) this.localAI[0] > 3.0)
            this.alpha = 0;
          if ((double) this.ai[0] >= 20.0)
          {
            this.ai[0] = 20f;
            if (this.type != 477)
              this.velocity.Y += 0.075f;
          }
          if (this.type == 479 && Main.myPlayer == this.owner)
          {
            if ((double) this.ai[1] >= 0.0)
              this.penetrate = -1;
            else if (this.penetrate < 0)
              this.penetrate = 1;
            if ((double) this.ai[1] >= 0.0)
              ++this.ai[1];
            if ((double) this.ai[1] > (double) Main.rand.Next(5, 30))
            {
              this.ai[1] = -1000f;
              float num1 = this.velocity.Length();
              Vector2 velocity = this.velocity;
              velocity.Normalize();
              int num2 = Main.rand.Next(2, 4);
              if (Main.rand.Next(4) == 0)
                ++num2;
              for (int index = 0; index < num2; ++index)
              {
                Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
                vector2_1.Normalize();
                Vector2 vector2_2 = vector2_1 + velocity * 2f;
                vector2_2.Normalize();
                vector2_1 = vector2_2 * num1;
                Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_1.X, vector2_1.Y, this.type, this.damage, this.knockBack, this.owner, 0.0f, -1000f);
              }
            }
          }
          if (this.type == 478 && Main.myPlayer == this.owner)
          {
            ++this.ai[1];
            if ((double) this.ai[1] > (double) Main.rand.Next(5, 20))
            {
              if (this.timeLeft > 40)
                this.timeLeft = this.timeLeft - 20;
              this.ai[1] = 0.0f;
              Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 480, (int) ((double) this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0.0f, 0.0f);
            }
          }
        }
        else if (this.type == 408)
        {
          if ((double) this.ai[0] >= 45.0)
          {
            this.ai[0] = 45f;
            this.velocity.Y += 0.05f;
          }
        }
        else if (this.type == 616)
        {
          if (this.alpha < 170)
          {
            float num = 3f;
            for (int index1 = 0; (double) index1 < (double) num; ++index1)
            {
              int index2 = Dust.NewDust(this.position, 1, 1, 229, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].position = this.Center - this.velocity / num * (float) index1;
              Main.dust[index2].velocity *= 0.0f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].alpha = 200;
              Main.dust[index2].scale = 0.5f;
            }
          }
          float num1 = (float) Math.Sqrt((double) this.velocity.X * (double) this.velocity.X + (double) this.velocity.Y * (double) this.velocity.Y);
          float num2 = this.localAI[0];
          if ((double) num2 == 0.0)
          {
            this.localAI[0] = num1;
            num2 = num1;
          }
          if (this.alpha > 0)
            this.alpha = this.alpha - 25;
          if (this.alpha < 0)
            this.alpha = 0;
          float num3 = this.position.X;
          float num4 = this.position.Y;
          float num5 = 800f;
          bool flag2 = false;
          int num6 = 0;
          ++this.ai[0];
          if ((double) this.ai[0] > 20.0)
          {
            --this.ai[0];
            if ((double) this.ai[1] == 0.0)
            {
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this, false) && ((double) this.ai[1] == 0.0 || (double) this.ai[1] == (double) (index + 1)))
                {
                  float num7 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  float num8 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                  float num9 = Math.Abs(this.position.X + (float) (this.width / 2) - num7) + Math.Abs(this.position.Y + (float) (this.height / 2) - num8);
                  if ((double) num9 < (double) num5 && Collision.CanHit(new Vector2(this.position.X + (float) (this.width / 2), this.position.Y + (float) (this.height / 2)), 1, 1, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                  {
                    num5 = num9;
                    num3 = num7;
                    num4 = num8;
                    flag2 = true;
                    num6 = index;
                  }
                }
              }
              if (flag2)
                this.ai[1] = (float) (num6 + 1);
              flag2 = false;
            }
            if ((double) this.ai[1] != 0.0)
            {
              int index = (int) ((double) this.ai[1] - 1.0);
              if (Main.npc[index].active && Main.npc[index].CanBeChasedBy((object) this, true) && (double) Math.Abs(this.position.X + (float) (this.width / 2) - (Main.npc[index].position.X + (float) (Main.npc[index].width / 2))) + (double) Math.Abs(this.position.Y + (float) (this.height / 2) - (Main.npc[index].position.Y + (float) (Main.npc[index].height / 2))) < 1000.0)
              {
                flag2 = true;
                num3 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                num4 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              }
            }
            if (!this.friendly)
              flag2 = false;
            if (flag2)
            {
              double num7 = (double) num2;
              Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
              float num8 = num3 - vector2.X;
              float num9 = num4 - vector2.Y;
              double num10 = Math.Sqrt((double) num8 * (double) num8 + (double) num9 * (double) num9);
              float num11 = (float) (num7 / num10);
              float num12 = num8 * num11;
              float num13 = num9 * num11;
              int num14 = 8;
              this.velocity.X = (this.velocity.X * (float) (num14 - 1) + num12) / (float) num14;
              this.velocity.Y = (this.velocity.Y * (float) (num14 - 1) + num13) / (float) num14;
            }
          }
        }
        else if (this.type == 507 || this.type == 508 || (this.type == 662 || this.type == 680) || this.type == 685)
        {
          if ((double) this.ai[0] > 45.0)
          {
            this.velocity.X *= 0.98f;
            this.velocity.Y += 0.3f;
          }
        }
        else if (this.type == 495)
        {
          int index = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, new Color(), 1.2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.3f;
          if ((double) this.ai[0] >= 30.0)
          {
            this.ai[0] = 30f;
            this.velocity.Y += 0.04f;
          }
        }
        else if (this.type == 498)
        {
          if ((double) this.localAI[0] == 0.0)
          {
            ++this.localAI[0];
            Main.PlaySound(SoundID.Item17, this.position);
          }
          ++this.ai[0];
          if ((double) this.ai[0] >= 50.0)
          {
            this.velocity.X *= 0.98f;
            this.velocity.Y += 0.15f;
            this.rotation = this.rotation + (float) this.direction * 0.5f;
          }
          else
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
        }
        else if (this.type == 437)
        {
          if ((double) this.ai[0] >= 12.0)
          {
            if ((double) this.ai[0] >= 20.0)
              this.Kill();
            this.alpha = this.alpha + 30;
          }
        }
        else if (this.type != 442 && this.type != 634 && (this.type != 635 && this.type != 675))
        {
          if (this.type == 686 || this.type == 711)
          {
            if ((double) this.ai[0] >= 10.0)
              this.velocity.Y += 0.1f;
            if ((double) this.ai[0] >= 20.0)
              this.velocity.Y += 0.1f;
            if ((double) this.ai[0] > 20.0)
              this.ai[0] = 20f;
            this.velocity.X *= 0.99f;
            if ((double) this.velocity.Y > 32.0)
              this.velocity.Y = 32f;
          }
          else if (this.type == 639)
          {
            if (this.timeLeft <= this.MaxUpdates * 45 - 14)
              this.velocity.Y += 0.1f;
          }
          else if (this.type == 710)
          {
            if ((double) this.ai[0] >= 0.0)
            {
              ++this.ai[0];
              if ((double) this.ai[0] >= 20.0)
              {
                this.velocity.Y += 0.2f;
                if ((double) this.velocity.Y > 0.0)
                  this.velocity.X *= 0.98f;
                if ((double) this.velocity.Y > 12.0)
                  this.velocity.Y = 12f;
              }
            }
          }
          else if ((double) this.ai[0] >= 15.0)
          {
            this.ai[0] = 15f;
            this.velocity.Y += 0.1f;
          }
        }
      }
      if (this.type == 248)
        this.rotation = (double) this.velocity.X >= 0.0 ? this.rotation + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0500000007450581) : this.rotation - (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.0500000007450581);
      else if (this.type == 270 || this.type == 585 || (this.type == 601 || this.type == 706))
      {
        this.spriteDirection = this.direction;
        this.rotation = this.direction >= 0 ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) : (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
      }
      else if (this.type == 311)
        this.rotation = (double) this.ai[1] == 0.0 ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f : this.rotation + (float) ((double) this.velocity.X * 0.100000001490116 + (double) Main.rand.Next(-10, 11) * 0.025000000372529);
      else if (this.type == 312)
        this.rotation = this.rotation + this.velocity.X * 0.02f;
      else if (this.type == 675)
        this.rotation = this.rotation + this.velocity.X * 0.03f;
      else if (this.type != 676)
      {
        if (this.type == 408)
        {
          this.rotation = this.velocity.ToRotation();
          if (this.direction == -1)
            this.rotation = this.rotation + 3.141593f;
        }
        else if (this.type == 435 || this.type == 459 || (this.type == 682 || this.type == 709))
        {
          this.rotation = this.velocity.ToRotation();
          if (this.direction == -1)
            this.rotation = this.rotation + 3.141593f;
        }
        else if (this.type == 660)
          this.rotation = this.velocity.ToRotation() + 0.7853982f;
        else if (this.type == 662 || this.type == 685)
          this.rotation = (float) ((double) this.velocity.ToRotation() - 3.14159274101257 - 0.785398185253143);
        else if (this.type == 680 || this.type == 684 || (this.type == 686 || this.type == 711) || this.type == 712)
          this.rotation = this.velocity.ToRotation() + 1.570796f;
        else if (this.type == 436)
        {
          this.rotation = this.velocity.ToRotation();
          this.rotation = this.rotation + 3.141593f;
          if (this.direction == -1)
            this.rotation = this.rotation + 3.141593f;
        }
        else if (this.type == 469)
        {
          if ((double) this.velocity.X > 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          }
          else
          {
            this.spriteDirection = 1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
          }
        }
        else if (this.type == 477)
        {
          if ((double) this.localAI[1] < 5.0)
          {
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            ++this.localAI[1];
          }
          else
            this.rotation = (float) (((double) this.rotation * 2.0 + Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57000005245209) / 3.0);
        }
        else if (this.type == 532)
          this.rotation = this.rotation + (float) (0.200000002980232 + (double) Math.Abs(this.velocity.X) * 0.100000001490116);
        else if (this.type == 483)
          this.rotation = this.rotation + this.velocity.X * 0.05f;
        else if (this.type == 485)
        {
          this.velocity = (this.velocity * 39f + new Vector2(this.ai[0], this.ai[1])) / 40f;
          int index = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Main.dust[index].velocity *= 0.2f;
          Main.dust[index].position = (Main.dust[index].position + this.Center) / 2f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter >= 2)
          {
            this.frameCounter = 0;
            this.frame = this.frame + 1;
            if (this.frame >= 5)
              this.frame = 0;
          }
          if ((double) this.velocity.X < 0.0)
          {
            this.spriteDirection = -1;
            this.rotation = (float) Math.Atan2(-(double) this.velocity.Y, -(double) this.velocity.X);
          }
          else
          {
            this.spriteDirection = 1;
            this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
          }
        }
        else if (this.type == 640)
        {
          if (this.velocity != Vector2.Zero)
            this.rotation = this.velocity.ToRotation() + 1.570796f;
        }
        else if (this.type != 344 && this.type != 498)
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
      }
      if ((double) this.velocity.Y <= 16.0)
        return;
      this.velocity.Y = 16f;
    }

    private void AI_026()
    {
      if (!Main.player[this.owner].active)
      {
        this.active = false;
      }
      else
      {
        bool flag1 = false;
        bool flag2 = false;
        bool flag3 = false;
        bool flag4 = false;
        int num1 = 85;
        bool flag5 = this.type >= 191 && this.type <= 194;
        if (this.type == 324)
          num1 = 120;
        if (this.type == 112)
          num1 = 100;
        if (this.type == (int) sbyte.MaxValue)
          num1 = 50;
        if (flag5)
        {
          if (this.lavaWet)
          {
            this.ai[0] = 1f;
            this.ai[1] = 0.0f;
          }
          num1 = 60 + 30 * this.minionPos;
        }
        else if (this.type == 266)
          num1 = 60 + 30 * this.minionPos;
        if (this.type == 111)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].bunny = false;
          if (Main.player[this.owner].bunny)
            this.timeLeft = 2;
        }
        if (this.type == 112)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].penguin = false;
          if (Main.player[this.owner].penguin)
            this.timeLeft = 2;
        }
        if (this.type == 334)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].puppy = false;
          if (Main.player[this.owner].puppy)
            this.timeLeft = 2;
        }
        if (this.type == 353)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].grinch = false;
          if (Main.player[this.owner].grinch)
            this.timeLeft = 2;
        }
        if (this.type == (int) sbyte.MaxValue)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].turtle = false;
          if (Main.player[this.owner].turtle)
            this.timeLeft = 2;
        }
        if (this.type == 175)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].eater = false;
          if (Main.player[this.owner].eater)
            this.timeLeft = 2;
        }
        if (this.type == 197)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].skeletron = false;
          if (Main.player[this.owner].skeletron)
            this.timeLeft = 2;
        }
        if (this.type == 198)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].hornet = false;
          if (Main.player[this.owner].hornet)
            this.timeLeft = 2;
        }
        if (this.type == 199)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].tiki = false;
          if (Main.player[this.owner].tiki)
            this.timeLeft = 2;
        }
        if (this.type == 200)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].lizard = false;
          if (Main.player[this.owner].lizard)
            this.timeLeft = 2;
        }
        if (this.type == 208)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].parrot = false;
          if (Main.player[this.owner].parrot)
            this.timeLeft = 2;
        }
        if (this.type == 209)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].truffle = false;
          if (Main.player[this.owner].truffle)
            this.timeLeft = 2;
        }
        if (this.type == 210)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].sapling = false;
          if (Main.player[this.owner].sapling)
            this.timeLeft = 2;
        }
        if (this.type == 324)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].cSapling = false;
          if (Main.player[this.owner].cSapling)
            this.timeLeft = 2;
        }
        if (this.type == 313)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].spider = false;
          if (Main.player[this.owner].spider)
            this.timeLeft = 2;
        }
        if (this.type == 314)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].squashling = false;
          if (Main.player[this.owner].squashling)
            this.timeLeft = 2;
        }
        if (this.type == 211)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].wisp = false;
          if (Main.player[this.owner].wisp)
            this.timeLeft = 2;
        }
        if (this.type == 236)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].dino = false;
          if (Main.player[this.owner].dino)
            this.timeLeft = 2;
        }
        if (this.type == 499)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].babyFaceMonster = false;
          if (Main.player[this.owner].babyFaceMonster)
            this.timeLeft = 2;
        }
        if (this.type == 266)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].slime = false;
          if (Main.player[this.owner].slime)
            this.timeLeft = 2;
        }
        if (this.type == 268)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].eyeSpring = false;
          if (Main.player[this.owner].eyeSpring)
            this.timeLeft = 2;
        }
        if (this.type == 269)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].snowman = false;
          if (Main.player[this.owner].snowman)
            this.timeLeft = 2;
        }
        if (this.type == 319)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].blackCat = false;
          if (Main.player[this.owner].blackCat)
            this.timeLeft = 2;
        }
        if (this.type == 380)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].zephyrfish = false;
          if (Main.player[this.owner].zephyrfish)
            this.timeLeft = 2;
        }
        if (flag5)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].pygmy = false;
          if (Main.player[this.owner].pygmy)
            this.timeLeft = Main.rand.Next(2, 10);
        }
        if (this.type >= 390 && this.type <= 392)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].spiderMinion = false;
          if (Main.player[this.owner].spiderMinion)
            this.timeLeft = 2;
        }
        if (this.type == 398)
        {
          if (Main.player[this.owner].dead)
            Main.player[this.owner].miniMinotaur = false;
          if (Main.player[this.owner].miniMinotaur)
            this.timeLeft = 2;
        }
        if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
        {
          int num2 = 10;
          int num3 = 40 * (this.minionPos + 1) * Main.player[this.owner].direction;
          if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) < (double) this.position.X + (double) (this.width / 2) - (double) num2 + (double) num3)
            flag1 = true;
          else if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) > (double) this.position.X + (double) (this.width / 2) + (double) num2 + (double) num3)
            flag2 = true;
        }
        else if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) < (double) this.position.X + (double) (this.width / 2) - (double) num1)
          flag1 = true;
        else if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) > (double) this.position.X + (double) (this.width / 2) + (double) num1)
          flag2 = true;
        if (this.type == 175)
        {
          float num2 = 0.1f;
          this.tileCollide = false;
          int num3 = 300;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          if (this.type == (int) sbyte.MaxValue)
            num5 = Main.player[this.owner].position.Y - vector2.Y;
          float num6 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5);
          float num7 = 7f;
          if ((double) num6 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 && ((double) this.position.Y + (double) this.height <= (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height)))
          {
            this.ai[0] = 0.0f;
            if ((double) this.velocity.Y < -6.0)
              this.velocity.Y = -6f;
          }
          if ((double) num6 < 150.0)
          {
            if ((double) Math.Abs(this.velocity.X) > 2.0 || (double) Math.Abs(this.velocity.Y) > 2.0)
              this.velocity = this.velocity * 0.99f;
            num2 = 0.01f;
            if ((double) num4 < -2.0)
              num4 = -2f;
            if ((double) num4 > 2.0)
              num4 = 2f;
            if ((double) num5 < -2.0)
              num5 = -2f;
            if ((double) num5 > 2.0)
              num5 = 2f;
          }
          else
          {
            if ((double) num6 > 300.0)
              num2 = 0.2f;
            float num8 = num7 / num6;
            num4 *= num8;
            num5 *= num8;
          }
          if ((double) Math.Abs(num4) > (double) Math.Abs(num5) || (double) num2 == 0.0500000007450581)
          {
            if ((double) this.velocity.X < (double) num4)
            {
              this.velocity.X += num2;
              if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X < 0.0)
                this.velocity.X += num2;
            }
            if ((double) this.velocity.X > (double) num4)
            {
              this.velocity.X -= num2;
              if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X > 0.0)
                this.velocity.X -= num2;
            }
          }
          if ((double) Math.Abs(num4) <= (double) Math.Abs(num5) || (double) num2 == 0.0500000007450581)
          {
            if ((double) this.velocity.Y < (double) num5)
            {
              this.velocity.Y += num2;
              if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y < 0.0)
                this.velocity.Y += num2;
            }
            if ((double) this.velocity.Y > (double) num5)
            {
              this.velocity.Y -= num2;
              if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y > 0.0)
                this.velocity.Y -= num2;
            }
          }
          this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) - 1.57f;
          this.frameCounter = this.frameCounter + 1;
          if (this.frameCounter > 6)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame <= 1)
            return;
          this.frame = 0;
        }
        else if (this.type == 197)
        {
          float num2 = 0.1f;
          this.tileCollide = false;
          int num3 = 300;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          if (this.type == (int) sbyte.MaxValue)
            num5 = Main.player[this.owner].position.Y - vector2.Y;
          float num6 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num5 * (double) num5);
          float num7 = 3f;
          if ((double) num6 > 500.0)
            this.localAI[0] = 10000f;
          if ((double) this.localAI[0] >= 10000.0)
            num7 = 14f;
          if ((double) num6 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 && ((double) this.position.Y + (double) this.height <= (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height)))
          {
            this.ai[0] = 0.0f;
            if ((double) this.velocity.Y < -6.0)
              this.velocity.Y = -6f;
          }
          if ((double) num6 < 150.0)
          {
            if ((double) Math.Abs(this.velocity.X) > 2.0 || (double) Math.Abs(this.velocity.Y) > 2.0)
              this.velocity = this.velocity * 0.99f;
            num2 = 0.01f;
            if ((double) num4 < -2.0)
              num4 = -2f;
            if ((double) num4 > 2.0)
              num4 = 2f;
            if ((double) num5 < -2.0)
              num5 = -2f;
            if ((double) num5 > 2.0)
              num5 = 2f;
          }
          else
          {
            if ((double) num6 > 300.0)
              num2 = 0.2f;
            float num8 = num7 / num6;
            num4 *= num8;
            num5 *= num8;
          }
          if ((double) this.velocity.X < (double) num4)
          {
            this.velocity.X += num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X < 0.0)
              this.velocity.X += num2;
          }
          if ((double) this.velocity.X > (double) num4)
          {
            this.velocity.X -= num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X > 0.0)
              this.velocity.X -= num2;
          }
          if ((double) this.velocity.Y < (double) num5)
          {
            this.velocity.Y += num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y < 0.0)
              this.velocity.Y += num2;
          }
          if ((double) this.velocity.Y > (double) num5)
          {
            this.velocity.Y -= num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y > 0.0)
              this.velocity.Y -= num2;
          }
          this.localAI[0] += (float) Main.rand.Next(10);
          if ((double) this.localAI[0] > 10000.0)
          {
            if ((double) this.localAI[1] == 0.0)
              this.localAI[1] = (double) this.velocity.X >= 0.0 ? 1f : -1f;
            this.rotation = this.rotation + 0.25f * this.localAI[1];
            if ((double) this.localAI[0] > 12000.0)
              this.localAI[0] = 0.0f;
          }
          else
          {
            this.localAI[1] = 0.0f;
            float num8 = this.velocity.X * 0.1f;
            if ((double) this.rotation > (double) num8)
            {
              this.rotation = this.rotation - (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.00999999977648258);
              if ((double) this.rotation < (double) num8)
                this.rotation = num8;
            }
            if ((double) this.rotation < (double) num8)
            {
              this.rotation = this.rotation + (float) (((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y)) * 0.00999999977648258);
              if ((double) this.rotation > (double) num8)
                this.rotation = num8;
            }
          }
          if ((double) this.rotation > 6.28)
            this.rotation = this.rotation - 6.28f;
          if ((double) this.rotation >= -6.28)
            return;
          this.rotation = this.rotation + 6.28f;
        }
        else if (this.type == 198 || this.type == 380)
        {
          float num2 = 0.4f;
          if (this.type == 380)
            num2 = 0.3f;
          this.tileCollide = false;
          int num3 = 100;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y + (float) Main.rand.Next(-10, 21);
          float num6 = num4 + (float) Main.rand.Next(-10, 21) + (float) (60 * -Main.player[this.owner].direction);
          float num7 = num5 - 60f;
          if (this.type == (int) sbyte.MaxValue)
            num7 = Main.player[this.owner].position.Y - vector2.Y;
          float num8 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7);
          float num9 = 14f;
          if (this.type == 380)
            num9 = 6f;
          if ((double) num8 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 && ((double) this.position.Y + (double) this.height <= (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height)))
          {
            this.ai[0] = 0.0f;
            if ((double) this.velocity.Y < -6.0)
              this.velocity.Y = -6f;
          }
          if ((double) num8 < 50.0)
          {
            if ((double) Math.Abs(this.velocity.X) > 2.0 || (double) Math.Abs(this.velocity.Y) > 2.0)
              this.velocity = this.velocity * 0.99f;
            num2 = 0.01f;
          }
          else
          {
            if (this.type == 380)
            {
              if ((double) num8 < 100.0)
                num2 = 0.1f;
              if ((double) num8 > 300.0)
                num2 = 0.4f;
            }
            else if (this.type == 198)
            {
              if ((double) num8 < 100.0)
                num2 = 0.1f;
              if ((double) num8 > 300.0)
                num2 = 0.6f;
            }
            float num10 = num9 / num8;
            num6 *= num10;
            num7 *= num10;
          }
          if ((double) this.velocity.X < (double) num6)
          {
            this.velocity.X += num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X < 0.0)
              this.velocity.X += num2;
          }
          if ((double) this.velocity.X > (double) num6)
          {
            this.velocity.X -= num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.X > 0.0)
              this.velocity.X -= num2;
          }
          if ((double) this.velocity.Y < (double) num7)
          {
            this.velocity.Y += num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y < 0.0)
              this.velocity.Y += num2 * 2f;
          }
          if ((double) this.velocity.Y > (double) num7)
          {
            this.velocity.Y -= num2;
            if ((double) num2 > 0.0500000007450581 && (double) this.velocity.Y > 0.0)
              this.velocity.Y -= num2 * 2f;
          }
          if ((double) this.velocity.X > 0.25)
            this.direction = -1;
          else if ((double) this.velocity.X < -0.25)
            this.direction = 1;
          this.spriteDirection = this.direction;
          this.rotation = this.velocity.X * 0.05f;
          this.frameCounter = this.frameCounter + 1;
          int num11 = 2;
          if (this.type == 380)
            num11 = 5;
          if (this.frameCounter > num11)
          {
            this.frame = this.frame + 1;
            this.frameCounter = 0;
          }
          if (this.frame <= 3)
            return;
          this.frame = 0;
        }
        else if (this.type == 211)
        {
          float num2 = 0.2f;
          float num3 = 5f;
          this.tileCollide = false;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num5 = Main.player[this.owner].position.Y + Main.player[this.owner].gfxOffY + (float) (Main.player[this.owner].height / 2) - vector2.Y;
          if (Main.player[this.owner].controlLeft)
            num4 -= 120f;
          else if (Main.player[this.owner].controlRight)
            num4 += 120f;
          float num6;
          if (Main.player[this.owner].controlDown)
          {
            num6 = num5 + 120f;
          }
          else
          {
            if (Main.player[this.owner].controlUp)
              num5 -= 120f;
            num6 = num5 - 60f;
          }
          float num7 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num6 * (double) num6);
          if ((double) num7 > 1000.0)
          {
            this.position.X += num4;
            this.position.Y += num6;
          }
          if ((double) this.localAI[0] == 1.0)
          {
            if ((double) num7 < 10.0 && (double) Math.Abs(Main.player[this.owner].velocity.X) + (double) Math.Abs(Main.player[this.owner].velocity.Y) < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0)
              this.localAI[0] = 0.0f;
            float num8 = 12f;
            if ((double) num7 < (double) num8)
            {
              this.velocity.X = num4;
              this.velocity.Y = num6;
            }
            else
            {
              float num9 = num8 / num7;
              this.velocity.X = num4 * num9;
              this.velocity.Y = num6 * num9;
            }
            if ((double) this.velocity.X > 0.5)
              this.direction = -1;
            else if ((double) this.velocity.X < -0.5)
              this.direction = 1;
            this.spriteDirection = this.direction;
            this.rotation = this.rotation - (float) (0.200000002980232 + (double) Math.Abs(this.velocity.X) * 0.025000000372529) * (float) this.direction;
            this.frameCounter = this.frameCounter + 1;
            if (this.frameCounter > 3)
            {
              this.frame = this.frame + 1;
              this.frameCounter = 0;
            }
            if (this.frame < 5)
              this.frame = 5;
            if (this.frame > 9)
              this.frame = 5;
            for (int index1 = 0; index1 < 2; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X + 3f, this.position.Y + 4f), 14, 14, 156, 0.0f, 0.0f, 0, new Color(), 1f);
              Main.dust[index2].velocity *= 0.2f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].scale = 1.25f;
              Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].cLight, Main.player[this.owner]);
            }
          }
          else
          {
            if ((double) num7 > 200.0)
              this.localAI[0] = 1f;
            if ((double) this.velocity.X > 0.5)
              this.direction = -1;
            else if ((double) this.velocity.X < -0.5)
              this.direction = 1;
            this.spriteDirection = this.direction;
            if ((double) num7 < 10.0)
            {
              this.velocity.X = num4;
              this.velocity.Y = num6;
              this.rotation = this.velocity.X * 0.05f;
              if ((double) num7 < (double) num3)
              {
                this.position = this.position + this.velocity;
                this.velocity = this.velocity * 0.0f;
                num2 = 0.0f;
              }
              this.direction = -Main.player[this.owner].direction;
            }
            float num8 = num3 / num7;
            float num9 = num4 * num8;
            float num10 = num6 * num8;
            if ((double) this.velocity.X < (double) num9)
            {
              this.velocity.X += num2;
              if ((double) this.velocity.X < 0.0)
                this.velocity.X *= 0.99f;
            }
            if ((double) this.velocity.X > (double) num9)
            {
              this.velocity.X -= num2;
              if ((double) this.velocity.X > 0.0)
                this.velocity.X *= 0.99f;
            }
            if ((double) this.velocity.Y < (double) num10)
            {
              this.velocity.Y += num2;
              if ((double) this.velocity.Y < 0.0)
                this.velocity.Y *= 0.99f;
            }
            if ((double) this.velocity.Y > (double) num10)
            {
              this.velocity.Y -= num2;
              if ((double) this.velocity.Y > 0.0)
                this.velocity.Y *= 0.99f;
            }
            if ((double) this.velocity.X != 0.0 || (double) this.velocity.Y != 0.0)
              this.rotation = this.velocity.X * 0.05f;
            this.frameCounter = this.frameCounter + 1;
            if (this.frameCounter > 3)
            {
              this.frame = this.frame + 1;
              this.frameCounter = 0;
            }
            if (this.frame <= 4)
              return;
            this.frame = 0;
          }
        }
        else if (this.type == 199)
        {
          float num2 = 0.1f;
          this.tileCollide = false;
          int num3 = 200;
          Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
          float num5 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y - 60f;
          float num6 = num4 - 2f;
          if (this.type == (int) sbyte.MaxValue)
            num5 = Main.player[this.owner].position.Y - vector2.Y;
          float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) num5 * (double) num5);
          float num8 = 4f;
          double num9 = (double) num7;
          if ((double) num7 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 && ((double) this.position.Y + (double) this.height <= (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height)))
          {
            this.ai[0] = 0.0f;
            if ((double) this.velocity.Y < -6.0)
              this.velocity.Y = -6f;
          }
          if ((double) num7 < 4.0)
          {
            this.velocity.X = num6;
            this.velocity.Y = num5;
            num2 = 0.0f;
          }
          else
          {
            if ((double) num7 > 350.0)
            {
              num2 = 0.2f;
              num8 = 10f;
            }
            float num10 = num8 / num7;
            num6 *= num10;
            num5 *= num10;
          }
          if ((double) this.velocity.X < (double) num6)
          {
            this.velocity.X += num2;
            if ((double) this.velocity.X < 0.0)
              this.velocity.X += num2;
          }
          if ((double) this.velocity.X > (double) num6)
          {
            this.velocity.X -= num2;
            if ((double) this.velocity.X > 0.0)
              this.velocity.X -= num2;
          }
          if ((double) this.velocity.Y < (double) num5)
          {
            this.velocity.Y += num2;
            if ((double) this.velocity.Y < 0.0)
              this.velocity.Y += num2;
          }
          if ((double) this.velocity.Y > (double) num5)
          {
            this.velocity.Y -= num2;
            if ((double) this.velocity.Y > 0.0)
              this.velocity.Y -= num2;
          }
          this.direction = -Main.player[this.owner].direction;
          this.spriteDirection = 1;
          this.rotation = this.velocity.Y * 0.05f * (float) -this.direction;
          double num11 = 50.0;
          if (num9 >= num11)
          {
            this.frameCounter = this.frameCounter + 1;
            if (this.frameCounter <= 6)
              return;
            this.frameCounter = 0;
            if ((double) this.velocity.X < 0.0)
            {
              if (this.frame < 2)
                this.frame = this.frame + 1;
              if (this.frame <= 2)
                return;
              this.frame = this.frame - 1;
            }
            else
            {
              if (this.frame < 6)
                this.frame = this.frame + 1;
              if (this.frame <= 6)
                return;
              this.frame = this.frame - 1;
            }
          }
          else
          {
            this.frameCounter = this.frameCounter + 1;
            if (this.frameCounter > 6)
            {
              this.frame = this.frame + this.direction;
              this.frameCounter = 0;
            }
            if (this.frame > 7)
              this.frame = 0;
            if (this.frame >= 0)
              return;
            this.frame = 7;
          }
        }
        else
        {
          if ((double) this.ai[1] == 0.0)
          {
            int num2 = 500;
            if (this.type == (int) sbyte.MaxValue)
              num2 = 200;
            if (this.type == 208)
              num2 = 300;
            if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
            {
              num2 += 40 * this.minionPos;
              if ((double) this.localAI[0] > 0.0)
                num2 += 500;
              if (this.type == 266 && (double) this.localAI[0] > 0.0)
                num2 += 100;
              if (this.type >= 390 && this.type <= 392 && (double) this.localAI[0] > 0.0)
                num2 += 400;
            }
            if (Main.player[this.owner].rocketDelay2 > 0)
              this.ai[0] = 1f;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            double num3 = (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) - (double) vector2.X;
            float num4 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
            float num5 = (float) Math.Sqrt(num3 * num3 + (double) num4 * (double) num4);
            if ((double) num5 > 2000.0)
            {
              this.position.X = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - (float) (this.width / 2);
              this.position.Y = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - (float) (this.height / 2);
            }
            else if ((double) num5 > (double) num2 || (double) Math.Abs(num4) > 300.0 && (!flag5 && this.type != 266 && (this.type < 390 || this.type > 392) || (double) this.localAI[0] <= 0.0))
            {
              if (this.type != 324)
              {
                if ((double) num4 > 0.0 && (double) this.velocity.Y < 0.0)
                  this.velocity.Y = 0.0f;
                if ((double) num4 < 0.0 && (double) this.velocity.Y > 0.0)
                  this.velocity.Y = 0.0f;
              }
              this.ai[0] = 1f;
            }
          }
          if (this.type == 209 && (double) this.ai[0] != 0.0)
          {
            if ((double) Main.player[this.owner].velocity.Y == 0.0 && this.alpha >= 100)
            {
              this.position.X = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - (float) (this.width / 2);
              this.position.Y = Main.player[this.owner].position.Y + (float) Main.player[this.owner].height - (float) this.height;
              this.ai[0] = 0.0f;
            }
            else
            {
              this.velocity.X = 0.0f;
              this.velocity.Y = 0.0f;
              this.alpha = this.alpha + 5;
              if (this.alpha <= (int) byte.MaxValue)
                return;
              this.alpha = (int) byte.MaxValue;
            }
          }
          else if ((double) this.ai[0] != 0.0)
          {
            float num2 = 0.2f;
            int num3 = 200;
            if (this.type == (int) sbyte.MaxValue)
              num3 = 100;
            if (flag5)
            {
              num2 = 0.5f;
              num3 = 100;
            }
            this.tileCollide = false;
            Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
            float num4 = Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - vector2.X;
            if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
            {
              num4 -= (float) (40 * Main.player[this.owner].direction);
              float num5 = 700f;
              if (flag5)
                num5 += 100f;
              bool flag6 = false;
              int num6 = -1;
              for (int index = 0; index < 200; ++index)
              {
                if (Main.npc[index].CanBeChasedBy((object) this, false))
                {
                  float num7 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                  float num8 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                  if ((double) Math.Abs(Main.player[this.owner].position.X + (float) (Main.player[this.owner].width / 2) - num7) + (double) Math.Abs(Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - num8) < (double) num5)
                  {
                    if (Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                      num6 = index;
                    flag6 = true;
                    break;
                  }
                }
              }
              if (!flag6)
                num4 -= (float) (40 * this.minionPos * Main.player[this.owner].direction);
              if (flag6 && num6 >= 0)
                this.ai[0] = 0.0f;
            }
            float num9 = Main.player[this.owner].position.Y + (float) (Main.player[this.owner].height / 2) - vector2.Y;
            if (this.type == (int) sbyte.MaxValue)
              num9 = Main.player[this.owner].position.Y - vector2.Y;
            float num10 = (float) Math.Sqrt((double) num4 * (double) num4 + (double) num9 * (double) num9);
            float num11 = 10f;
            float num12 = num10;
            if (this.type == 111)
              num11 = 11f;
            if (this.type == (int) sbyte.MaxValue)
              num11 = 9f;
            if (this.type == 324)
              num11 = 20f;
            if (flag5)
            {
              num2 = 0.4f;
              num11 = 12f;
              if ((double) num11 < (double) Math.Abs(Main.player[this.owner].velocity.X) + (double) Math.Abs(Main.player[this.owner].velocity.Y))
                num11 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
            }
            if (this.type == 208 && (double) Math.Abs(Main.player[this.owner].velocity.X) + (double) Math.Abs(Main.player[this.owner].velocity.Y) > 4.0)
              num3 = -1;
            if ((double) num10 < (double) num3 && (double) Main.player[this.owner].velocity.Y == 0.0 && ((double) this.position.Y + (double) this.height <= (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height && !Collision.SolidCollision(this.position, this.width, this.height)))
            {
              this.ai[0] = 0.0f;
              if ((double) this.velocity.Y < -6.0)
                this.velocity.Y = -6f;
            }
            float num13;
            float num14;
            if ((double) num10 < 60.0)
            {
              num13 = this.velocity.X;
              num14 = this.velocity.Y;
            }
            else
            {
              float num5 = num11 / num10;
              num13 = num4 * num5;
              num14 = num9 * num5;
            }
            if (this.type == 324)
            {
              if ((double) num12 > 1000.0)
              {
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num11 - 1.25)
                  this.velocity = this.velocity * 1.025f;
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > (double) num11 + 1.25)
                  this.velocity = this.velocity * 0.975f;
              }
              else if ((double) num12 > 600.0)
              {
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num11 - 1.0)
                  this.velocity = this.velocity * 1.05f;
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > (double) num11 + 1.0)
                  this.velocity = this.velocity * 0.95f;
              }
              else if ((double) num12 > 400.0)
              {
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num11 - 0.5)
                  this.velocity = this.velocity * 1.075f;
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > (double) num11 + 0.5)
                  this.velocity = this.velocity * 0.925f;
              }
              else
              {
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < (double) num11 - 0.25)
                  this.velocity = this.velocity * 1.1f;
                if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) > (double) num11 + 0.25)
                  this.velocity = this.velocity * 0.9f;
              }
              this.velocity.X = (float) (((double) this.velocity.X * 34.0 + (double) num13) / 35.0);
              this.velocity.Y = (float) (((double) this.velocity.Y * 34.0 + (double) num14) / 35.0);
            }
            else
            {
              if ((double) this.velocity.X < (double) num13)
              {
                this.velocity.X += num2;
                if ((double) this.velocity.X < 0.0)
                  this.velocity.X += num2 * 1.5f;
              }
              if ((double) this.velocity.X > (double) num13)
              {
                this.velocity.X -= num2;
                if ((double) this.velocity.X > 0.0)
                  this.velocity.X -= num2 * 1.5f;
              }
              if ((double) this.velocity.Y < (double) num14)
              {
                this.velocity.Y += num2;
                if ((double) this.velocity.Y < 0.0)
                  this.velocity.Y += num2 * 1.5f;
              }
              if ((double) this.velocity.Y > (double) num14)
              {
                this.velocity.Y -= num2;
                if ((double) this.velocity.Y > 0.0)
                  this.velocity.Y -= num2 * 1.5f;
              }
            }
            if (this.type == 111)
              this.frame = 7;
            if (this.type == 112)
              this.frame = 2;
            if (flag5 && this.frame < 12)
            {
              this.frame = Main.rand.Next(12, 18);
              this.frameCounter = 0;
            }
            if (this.type != 313)
            {
              if ((double) this.velocity.X > 0.5)
                this.spriteDirection = -1;
              else if ((double) this.velocity.X < -0.5)
                this.spriteDirection = 1;
            }
            if (this.type == 398)
            {
              if ((double) this.velocity.X > 0.5)
                this.spriteDirection = 1;
              else if ((double) this.velocity.X < -0.5)
                this.spriteDirection = -1;
            }
            if (this.type == 112)
              this.rotation = this.spriteDirection != -1 ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f : (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.57f;
            else if (this.type >= 390 && this.type <= 392)
            {
              int index1 = (int) ((double) this.Center.X / 16.0);
              int index2 = (int) ((double) this.Center.Y / 16.0);
              if (Main.tile[index1, index2] != null && (int) Main.tile[index1, index2].wall > 0)
              {
                this.rotation = this.velocity.ToRotation() + 1.570796f;
                this.frameCounter = this.frameCounter + (int) ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y));
                if (this.frameCounter > 5)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
                if (this.frame > 7)
                  this.frame = 4;
                if (this.frame < 4)
                  this.frame = 7;
              }
              else
              {
                this.frameCounter = this.frameCounter + 1;
                if (this.frameCounter > 2)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
                if (this.frame < 8 || this.frame > 10)
                  this.frame = 8;
                this.rotation = this.velocity.X * 0.1f;
              }
            }
            else if (this.type == 334)
            {
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 1)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame < 7 || this.frame > 10)
                this.frame = 7;
              this.rotation = this.velocity.X * 0.1f;
            }
            else if (this.type == 353)
            {
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame < 10 || this.frame > 13)
                this.frame = 10;
              this.rotation = this.velocity.X * 0.05f;
            }
            else if (this.type == (int) sbyte.MaxValue)
            {
              this.frameCounter = this.frameCounter + 3;
              if (this.frameCounter > 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame <= 5 || this.frame > 15)
                this.frame = 6;
              this.rotation = this.velocity.X * 0.1f;
            }
            else if (this.type == 269)
            {
              if (this.frame == 6)
                this.frameCounter = 0;
              else if (this.frame < 4 || this.frame > 6)
              {
                this.frameCounter = 0;
                this.frame = 4;
              }
              else
              {
                this.frameCounter = this.frameCounter + 1;
                if (this.frameCounter > 6)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
              }
              this.rotation = this.velocity.X * 0.05f;
            }
            else if (this.type == 266)
            {
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame < 2 || this.frame > 5)
                this.frame = 2;
              this.rotation = this.velocity.X * 0.1f;
            }
            else if (this.type == 324)
            {
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 1)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame < 6 || this.frame > 9)
                this.frame = 6;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.58f;
              Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, 0.9f, 0.6f, 0.2f);
              for (int index1 = 0; index1 < 2; ++index1)
              {
                int num5 = 4;
                int index2 = Dust.NewDust(new Vector2(this.Center.X - (float) num5, this.Center.Y - (float) num5) - this.velocity * 0.0f, num5 * 2, num5 * 2, 6, 0.0f, 0.0f, 100, new Color(), 1f);
                Main.dust[index2].scale *= (float) (1.79999995231628 + (double) Main.rand.Next(10) * 0.100000001490116);
                Main.dust[index2].velocity *= 0.2f;
                if (index1 == 1)
                  Main.dust[index2].position -= this.velocity * 0.5f;
                Main.dust[index2].noGravity = true;
                int index3 = Dust.NewDust(new Vector2(this.Center.X - (float) num5, this.Center.Y - (float) num5) - this.velocity * 0.0f, num5 * 2, num5 * 2, 31, 0.0f, 0.0f, 100, new Color(), 0.5f);
                Main.dust[index3].fadeIn = (float) (1.0 + (double) Main.rand.Next(5) * 0.100000001490116);
                Main.dust[index3].velocity *= 0.05f;
                if (index1 == 1)
                  Main.dust[index3].position -= this.velocity * 0.5f;
              }
            }
            else if (this.type == 268)
            {
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 4)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame < 6 || this.frame > 7)
                this.frame = 6;
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.58f;
            }
            else if (this.type == 200)
            {
              this.frameCounter = this.frameCounter + 3;
              if (this.frameCounter > 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame <= 5 || this.frame > 9)
                this.frame = 6;
              this.rotation = this.velocity.X * 0.1f;
            }
            else if (this.type == 208)
            {
              this.rotation = this.velocity.X * 0.075f;
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame > 4)
                this.frame = 1;
              if (this.frame < 1)
                this.frame = 1;
            }
            else if (this.type == 236)
            {
              this.rotation = this.velocity.Y * 0.05f * (float) this.direction;
              this.frameCounter = (double) this.velocity.Y >= 0.0 ? this.frameCounter + 1 : this.frameCounter + 2;
              if (this.frameCounter >= 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame > 12)
                this.frame = 9;
              if (this.frame < 9)
                this.frame = 9;
            }
            else if (this.type == 499)
            {
              this.rotation = this.velocity.Y * 0.05f * (float) this.direction;
              this.frameCounter = (double) this.velocity.Y >= 0.0 ? this.frameCounter + 1 : this.frameCounter + 2;
              if (this.frameCounter >= 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame >= 12)
                this.frame = 8;
              if (this.frame < 8)
                this.frame = 8;
            }
            else if (this.type == 314)
            {
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.58f;
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter >= 3)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame > 12)
                this.frame = 7;
              if (this.frame < 7)
                this.frame = 7;
            }
            else if (this.type == 319)
            {
              this.rotation = this.velocity.X * 0.05f;
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter >= 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame > 10)
                this.frame = 6;
              if (this.frame < 6)
                this.frame = 6;
            }
            else if (this.type == 210)
            {
              this.rotation = (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 1.58f;
              this.frameCounter = this.frameCounter + 3;
              if (this.frameCounter > 6)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame > 11)
                this.frame = 7;
              if (this.frame < 7)
                this.frame = 7;
            }
            else if (this.type == 313)
            {
              this.position.Y += (float) this.height;
              this.height = 54;
              this.position.Y -= (float) this.height;
              this.position.X += (float) (this.width / 2);
              this.width = 54;
              this.position.X -= (float) (this.width / 2);
              this.rotation = this.rotation + this.velocity.X * 0.01f;
              this.frameCounter = 0;
              this.frame = 11;
            }
            else if (this.type == 398)
            {
              this.frameCounter = this.frameCounter + 1;
              if (this.frameCounter > 1)
              {
                this.frame = this.frame + 1;
                this.frameCounter = 0;
              }
              if (this.frame < 6 || this.frame > 9)
                this.frame = 6;
              this.rotation = this.velocity.X * 0.1f;
            }
            else
              this.rotation = this.spriteDirection != -1 ? (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X) + 3.14f : (float) Math.Atan2((double) this.velocity.Y, (double) this.velocity.X);
            if (flag5 || this.type == 499 || (this.type == 398 || this.type == 390) || (this.type == 391 || this.type == 392 || (this.type == (int) sbyte.MaxValue || this.type == 200)) || (this.type == 208 || this.type == 210 || (this.type == 236 || this.type == 266) || (this.type == 268 || this.type == 269 || (this.type == 313 || this.type == 314))) || (this.type == 319 || this.type == 324 || (this.type == 334 || this.type == 353)))
              return;
            int index4 = Dust.NewDust(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 4.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 4.0)) - this.velocity, 8, 8, 16, (float) (-(double) this.velocity.X * 0.5), this.velocity.Y * 0.5f, 50, new Color(), 1.7f);
            Main.dust[index4].velocity.X = Main.dust[index4].velocity.X * 0.2f;
            Main.dust[index4].velocity.Y = Main.dust[index4].velocity.Y * 0.2f;
            Main.dust[index4].noGravity = true;
          }
          else
          {
            if (flag5)
            {
              float num2 = (float) (40 * this.minionPos);
              int num3 = 30;
              int num4 = 60;
              --this.localAI[0];
              if ((double) this.localAI[0] < 0.0)
                this.localAI[0] = 0.0f;
              if ((double) this.ai[1] > 0.0)
              {
                --this.ai[1];
              }
              else
              {
                float num5 = this.position.X;
                float num6 = this.position.Y;
                float num7 = 100000f;
                float num8 = num7;
                int num9 = -1;
                NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
                if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
                {
                  float num10 = minionAttackTargetNpc.position.X + (float) (minionAttackTargetNpc.width / 2);
                  float num11 = minionAttackTargetNpc.position.Y + (float) (minionAttackTargetNpc.height / 2);
                  float num12 = Math.Abs(this.position.X + (float) (this.width / 2) - num10) + Math.Abs(this.position.Y + (float) (this.height / 2) - num11);
                  if ((double) num12 < (double) num7)
                  {
                    if (num9 == -1 && (double) num12 <= (double) num8)
                    {
                      num8 = num12;
                      num5 = num10;
                      num6 = num11;
                    }
                    if (Collision.CanHit(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
                    {
                      num7 = num12;
                      num5 = num10;
                      num6 = num11;
                      num9 = minionAttackTargetNpc.whoAmI;
                    }
                  }
                }
                if (num9 == -1)
                {
                  for (int index = 0; index < 200; ++index)
                  {
                    if (Main.npc[index].CanBeChasedBy((object) this, false))
                    {
                      float num10 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                      float num11 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                      float num12 = Math.Abs(this.position.X + (float) (this.width / 2) - num10) + Math.Abs(this.position.Y + (float) (this.height / 2) - num11);
                      if ((double) num12 < (double) num7)
                      {
                        if (num9 == -1 && (double) num12 <= (double) num8)
                        {
                          num8 = num12;
                          num5 = num10;
                          num6 = num11;
                        }
                        if (Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
                        {
                          num7 = num12;
                          num5 = num10;
                          num6 = num11;
                          num9 = index;
                        }
                      }
                    }
                  }
                }
                if (num9 == -1 && (double) num8 < (double) num7)
                  num7 = num8;
                float num13 = 400f;
                if ((double) this.position.Y > Main.worldSurface * 16.0)
                  num13 = 200f;
                if ((double) num7 < (double) num13 + (double) num2 && num9 == -1)
                {
                  float num10 = num5 - (this.position.X + (float) (this.width / 2));
                  if ((double) num10 < -5.0)
                  {
                    flag1 = true;
                    flag2 = false;
                  }
                  else if ((double) num10 > 5.0)
                  {
                    flag2 = true;
                    flag1 = false;
                  }
                }
                else if (num9 >= 0 && (double) num7 < 800.0 + (double) num2)
                {
                  this.localAI[0] = (float) num4;
                  float num10 = num5 - (this.position.X + (float) (this.width / 2));
                  if ((double) num10 > 300.0 || (double) num10 < -300.0)
                  {
                    if ((double) num10 < -50.0)
                    {
                      flag1 = true;
                      flag2 = false;
                    }
                    else if ((double) num10 > 50.0)
                    {
                      flag2 = true;
                      flag1 = false;
                    }
                  }
                  else if (this.owner == Main.myPlayer)
                  {
                    this.ai[1] = (float) num3;
                    double num11 = 12.0;
                    Vector2 vector2 = new Vector2(this.position.X + (float) this.width * 0.5f, (float) ((double) this.position.Y + (double) (this.height / 2) - 8.0));
                    float num12 = num5 - vector2.X + (float) Main.rand.Next(-20, 21);
                    float num14 = (float) ((double) (Math.Abs(num12) * 0.1f) * (double) Main.rand.Next(0, 100) * (1.0 / 1000.0));
                    float num15 = num6 - vector2.Y + (float) Main.rand.Next(-20, 21) - num14;
                    double num16 = Math.Sqrt((double) num12 * (double) num12 + (double) num15 * (double) num15);
                    float num17 = (float) (num11 / num16);
                    float SpeedX = num12 * num17;
                    float SpeedY = num15 * num17;
                    int damage = this.damage;
                    int Type = 195;
                    int index = Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Type, damage, this.knockBack, Main.myPlayer, 0.0f, 0.0f);
                    Main.projectile[index].timeLeft = 300;
                    if ((double) SpeedX < 0.0)
                      this.direction = -1;
                    if ((double) SpeedX > 0.0)
                      this.direction = 1;
                    this.netUpdate = true;
                  }
                }
              }
            }
            bool flag6 = false;
            Vector2 vector2_1 = Vector2.Zero;
            bool flag7 = false;
            if (this.type == 266 || this.type >= 390 && this.type <= 392)
            {
              float num2 = (float) (40 * this.minionPos);
              int num3 = 60;
              --this.localAI[0];
              if ((double) this.localAI[0] < 0.0)
                this.localAI[0] = 0.0f;
              if ((double) this.ai[1] > 0.0)
              {
                --this.ai[1];
              }
              else
              {
                float x1 = this.position.X;
                float y1 = this.position.Y;
                float num4 = 100000f;
                float num5 = num4;
                int index1 = -1;
                NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
                if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
                {
                  float x2 = minionAttackTargetNpc.Center.X;
                  float y2 = minionAttackTargetNpc.Center.Y;
                  float num6 = Math.Abs(this.position.X + (float) (this.width / 2) - x2) + Math.Abs(this.position.Y + (float) (this.height / 2) - y2);
                  if ((double) num6 < (double) num4)
                  {
                    if (index1 == -1 && (double) num6 <= (double) num5)
                    {
                      num5 = num6;
                      x1 = x2;
                      y1 = y2;
                    }
                    if (Collision.CanHit(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
                    {
                      num4 = num6;
                      x1 = x2;
                      y1 = y2;
                      index1 = minionAttackTargetNpc.whoAmI;
                    }
                  }
                }
                if (index1 == -1)
                {
                  for (int index2 = 0; index2 < 200; ++index2)
                  {
                    if (Main.npc[index2].CanBeChasedBy((object) this, false))
                    {
                      float num6 = Main.npc[index2].position.X + (float) (Main.npc[index2].width / 2);
                      float num7 = Main.npc[index2].position.Y + (float) (Main.npc[index2].height / 2);
                      float num8 = Math.Abs(this.position.X + (float) (this.width / 2) - num6) + Math.Abs(this.position.Y + (float) (this.height / 2) - num7);
                      if ((double) num8 < (double) num4)
                      {
                        if (index1 == -1 && (double) num8 <= (double) num5)
                        {
                          num5 = num8;
                          x1 = num6;
                          y1 = num7;
                        }
                        if (Collision.CanHit(this.position, this.width, this.height, Main.npc[index2].position, Main.npc[index2].width, Main.npc[index2].height))
                        {
                          num4 = num8;
                          x1 = num6;
                          y1 = num7;
                          index1 = index2;
                        }
                      }
                    }
                  }
                }
                if (this.type >= 390 && this.type <= 392 && !Collision.SolidCollision(this.position, this.width, this.height))
                  this.tileCollide = true;
                if (index1 == -1 && (double) num5 < (double) num4)
                  num4 = num5;
                else if (index1 >= 0)
                {
                  flag6 = true;
                  vector2_1 = new Vector2(x1, y1) - this.Center;
                  if (this.type >= 390 && this.type <= 392)
                  {
                    if ((double) Main.npc[index1].position.Y > (double) this.position.Y + (double) this.height)
                    {
                      int index2 = (int) ((double) this.Center.X / 16.0);
                      int index3 = (int) (((double) this.position.Y + (double) this.height + 1.0) / 16.0);
                      if (Main.tile[index2, index3] != null && Main.tile[index2, index3].active() && TileID.Sets.Platforms[(int) Main.tile[index2, index3].type])
                        this.tileCollide = false;
                    }
                    Microsoft.Xna.Framework.Rectangle rectangle1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X, (int) this.position.Y, this.width, this.height);
                    Microsoft.Xna.Framework.Rectangle rectangle2 = new Microsoft.Xna.Framework.Rectangle((int) Main.npc[index1].position.X, (int) Main.npc[index1].position.Y, Main.npc[index1].width, Main.npc[index1].height);
                    int num6 = 10;
                    rectangle2.X -= num6;
                    rectangle2.Y -= num6;
                    rectangle2.Width += num6 * 2;
                    rectangle2.Height += num6 * 2;
                    if (rectangle1.Intersects(rectangle2))
                    {
                      flag7 = true;
                      Vector2 v = Main.npc[index1].Center - this.Center;
                      if ((double) this.velocity.Y > 0.0 && (double) v.Y < 0.0)
                        this.velocity.Y *= 0.5f;
                      if ((double) this.velocity.Y < 0.0 && (double) v.Y > 0.0)
                        this.velocity.Y *= 0.5f;
                      if ((double) this.velocity.X > 0.0 && (double) v.X < 0.0)
                        this.velocity.X *= 0.5f;
                      if ((double) this.velocity.X < 0.0 && (double) v.X > 0.0)
                        this.velocity.X *= 0.5f;
                      if ((double) v.Length() > 14.0)
                      {
                        v.Normalize();
                        v *= 14f;
                      }
                      this.rotation = (float) (((double) this.rotation * 5.0 + (double) v.ToRotation() + 1.57079637050629) / 6.0);
                      this.velocity = (this.velocity * 9f + v) / 10f;
                      for (int index2 = 0; index2 < 1000; ++index2)
                      {
                        if (this.whoAmI != index2 && this.owner == Main.projectile[index2].owner && (Main.projectile[index2].type >= 390 && Main.projectile[index2].type <= 392) && (double) (Main.projectile[index2].Center - this.Center).Length() < 15.0)
                        {
                          float num7 = 0.5f;
                          if ((double) this.Center.Y > (double) Main.projectile[index2].Center.Y)
                          {
                            Main.projectile[index2].velocity.Y -= num7;
                            this.velocity.Y += num7;
                          }
                          else
                          {
                            Main.projectile[index2].velocity.Y += num7;
                            this.velocity.Y -= num7;
                          }
                          if ((double) this.Center.X > (double) Main.projectile[index2].Center.X)
                          {
                            this.velocity.X += num7;
                            Main.projectile[index2].velocity.X -= num7;
                          }
                          else
                          {
                            this.velocity.X -= num7;
                            Main.projectile[index2].velocity.Y += num7;
                          }
                        }
                      }
                    }
                  }
                }
                float num9 = 300f;
                if ((double) this.position.Y > Main.worldSurface * 16.0)
                  num9 = 150f;
                if (this.type >= 390 && this.type <= 392)
                {
                  num9 = 500f;
                  if ((double) this.position.Y > Main.worldSurface * 16.0)
                    num9 = 250f;
                }
                if ((double) num4 < (double) num9 + (double) num2 && index1 == -1)
                {
                  float num6 = x1 - (this.position.X + (float) (this.width / 2));
                  if ((double) num6 < -5.0)
                  {
                    flag1 = true;
                    flag2 = false;
                  }
                  else if ((double) num6 > 5.0)
                  {
                    flag2 = true;
                    flag1 = false;
                  }
                }
                bool flag8 = false;
                if (this.type >= 390 && this.type <= 392 && (double) this.localAI[1] > 0.0)
                {
                  flag8 = true;
                  --this.localAI[1];
                }
                if (index1 >= 0 && (double) num4 < 800.0 + (double) num2)
                {
                  this.friendly = true;
                  this.localAI[0] = (float) num3;
                  float num6 = x1 - (this.position.X + (float) (this.width / 2));
                  if ((double) num6 < -10.0)
                  {
                    flag1 = true;
                    flag2 = false;
                  }
                  else if ((double) num6 > 10.0)
                  {
                    flag2 = true;
                    flag1 = false;
                  }
                  if ((double) y1 < (double) this.Center.Y - 100.0 && (double) num6 > -50.0 && ((double) num6 < 50.0 && (double) this.velocity.Y == 0.0))
                  {
                    float num7 = Math.Abs(y1 - this.Center.Y);
                    if ((double) num7 < 120.0)
                      this.velocity.Y = -10f;
                    else if ((double) num7 < 210.0)
                      this.velocity.Y = -13f;
                    else if ((double) num7 < 270.0)
                      this.velocity.Y = -15f;
                    else if ((double) num7 < 310.0)
                      this.velocity.Y = -17f;
                    else if ((double) num7 < 380.0)
                      this.velocity.Y = -18f;
                  }
                  if (flag8)
                  {
                    this.friendly = false;
                    if ((double) this.velocity.X < 0.0)
                      flag1 = true;
                    else if ((double) this.velocity.X > 0.0)
                      flag2 = true;
                  }
                }
                else
                  this.friendly = false;
              }
            }
            if ((double) this.ai[1] != 0.0)
            {
              flag1 = false;
              flag2 = false;
            }
            else if (flag5 && (double) this.localAI[0] == 0.0)
              this.direction = Main.player[this.owner].direction;
            else if (this.type >= 390 && this.type <= 392)
            {
              int index1 = (int) ((double) this.Center.X / 16.0);
              int index2 = (int) ((double) this.Center.Y / 16.0);
              if (Main.tile[index1, index2] != null && (int) Main.tile[index1, index2].wall > 0)
                flag1 = flag2 = false;
            }
            if (this.type == (int) sbyte.MaxValue)
              this.rotation = (double) this.rotation <= -0.1 || (double) this.rotation >= 0.1 ? ((double) this.rotation >= 0.0 ? this.rotation - 0.1f : this.rotation + 0.1f) : 0.0f;
            else if (this.type != 313 && !flag7)
              this.rotation = 0.0f;
            if (this.type < 390 || this.type > 392)
              this.tileCollide = true;
            float num18 = 0.08f;
            float num19 = 6.5f;
            if (this.type == (int) sbyte.MaxValue)
            {
              num19 = 2f;
              num18 = 0.04f;
            }
            if (this.type == 112)
            {
              num19 = 6f;
              num18 = 0.06f;
            }
            if (this.type == 334)
            {
              num19 = 8f;
              num18 = 0.08f;
            }
            if (this.type == 268)
            {
              num19 = 8f;
              num18 = 0.4f;
            }
            if (this.type == 324)
            {
              num18 = 0.1f;
              num19 = 3f;
            }
            if (flag5 || this.type == 266 || this.type >= 390 && this.type <= 392)
            {
              num19 = 6f;
              num18 = 0.2f;
              if ((double) num19 < (double) Math.Abs(Main.player[this.owner].velocity.X) + (double) Math.Abs(Main.player[this.owner].velocity.Y))
              {
                num19 = Math.Abs(Main.player[this.owner].velocity.X) + Math.Abs(Main.player[this.owner].velocity.Y);
                num18 = 0.3f;
              }
            }
            if (this.type >= 390 && this.type <= 392)
              num18 *= 2f;
            if (flag1)
            {
              if ((double) this.velocity.X > -3.5)
                this.velocity.X -= num18;
              else
                this.velocity.X -= num18 * 0.25f;
            }
            else if (flag2)
            {
              if ((double) this.velocity.X < 3.5)
                this.velocity.X += num18;
              else
                this.velocity.X += num18 * 0.25f;
            }
            else
            {
              this.velocity.X *= 0.9f;
              if ((double) this.velocity.X >= -(double) num18 && (double) this.velocity.X <= (double) num18)
                this.velocity.X = 0.0f;
            }
            if (this.type == 208)
            {
              this.velocity.X *= 0.95f;
              if ((double) this.velocity.X > -0.1 && (double) this.velocity.X < 0.1)
                this.velocity.X = 0.0f;
              flag1 = false;
              flag2 = false;
            }
            if (flag1 | flag2)
            {
              int num2 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
              int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
              if (this.type == 236)
                num2 += this.direction;
              if (flag1)
                --num2;
              if (flag2)
                ++num2;
              if (WorldGen.SolidTile(num2 + (int) this.velocity.X, j))
                flag4 = true;
            }
            if ((double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height - 8.0 > (double) this.position.Y + (double) this.height)
              flag3 = true;
            if (this.type == 268 && this.frameCounter < 10)
              flag4 = false;
            Collision.StepUp(ref this.position, ref this.velocity, this.width, this.height, ref this.stepSpeed, ref this.gfxOffY, 1, false, 0);
            if ((double) this.velocity.Y == 0.0 || this.type == 200)
            {
              if (!flag3 && ((double) this.velocity.X < 0.0 || (double) this.velocity.X > 0.0))
              {
                int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16 + 1;
                if (flag1)
                  --i;
                if (flag2)
                  ++i;
                WorldGen.SolidTile(i, j);
              }
              if (flag4)
              {
                int i1 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                int j = (int) ((double) this.position.Y + (double) this.height) / 16 + 1;
                if (WorldGen.SolidTile(i1, j) || Main.tile[i1, j].halfBrick() || ((int) Main.tile[i1, j].slope() > 0 || this.type == 200))
                {
                  if (this.type == 200)
                  {
                    this.velocity.Y = -3.1f;
                  }
                  else
                  {
                    try
                    {
                      int num2 = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
                      int num3 = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
                      if (flag1)
                        --num2;
                      if (flag2)
                        ++num2;
                      int i2 = num2 + (int) this.velocity.X;
                      if (!WorldGen.SolidTile(i2, num3 - 1) && !WorldGen.SolidTile(i2, num3 - 2))
                        this.velocity.Y = -5.1f;
                      else if (!WorldGen.SolidTile(i2, num3 - 2))
                        this.velocity.Y = -7.1f;
                      else if (WorldGen.SolidTile(i2, num3 - 5))
                        this.velocity.Y = -11.1f;
                      else if (WorldGen.SolidTile(i2, num3 - 4))
                        this.velocity.Y = -10.1f;
                      else
                        this.velocity.Y = -9.1f;
                    }
                    catch
                    {
                      this.velocity.Y = -9.1f;
                    }
                  }
                  if (this.type == (int) sbyte.MaxValue)
                    this.ai[0] = 1f;
                }
              }
              else if (this.type == 266 && flag1 | flag2)
                this.velocity.Y -= 6f;
            }
            if ((double) this.velocity.X > (double) num19)
              this.velocity.X = num19;
            if ((double) this.velocity.X < -(double) num19)
              this.velocity.X = -num19;
            if ((double) this.velocity.X < 0.0)
              this.direction = -1;
            if ((double) this.velocity.X > 0.0)
              this.direction = 1;
            if ((double) this.velocity.X > (double) num18 & flag2)
              this.direction = 1;
            if ((double) this.velocity.X < -(double) num18 & flag1)
              this.direction = -1;
            if (this.type != 313)
            {
              if (this.direction == -1)
                this.spriteDirection = 1;
              if (this.direction == 1)
                this.spriteDirection = -1;
            }
            if (this.type == 398)
              this.spriteDirection = this.direction;
            if (flag5)
            {
              if ((double) this.ai[1] > 0.0)
              {
                if ((double) this.localAI[1] == 0.0)
                {
                  this.localAI[1] = 1f;
                  this.frame = 1;
                }
                if (this.frame != 0)
                {
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 4)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame == 4)
                    this.frame = 0;
                }
              }
              else if ((double) this.velocity.Y == 0.0)
              {
                this.localAI[1] = 0.0f;
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame < 5)
                    this.frame = 5;
                  if (this.frame >= 11)
                    this.frame = 5;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y < 0.0)
              {
                this.frameCounter = 0;
                this.frame = 4;
              }
              else if ((double) this.velocity.Y > 0.0)
              {
                this.frameCounter = 0;
                this.frame = 4;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y > 10.0)
                this.velocity.Y = 10f;
              Vector2 velocity = this.velocity;
            }
            else if (this.type == 268)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if (this.frame > 5)
                  this.frameCounter = 0;
                if ((double) this.velocity.X == 0.0)
                {
                  int num2 = 3;
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter < num2)
                    this.frame = 0;
                  else if (this.frameCounter < num2 * 2)
                    this.frame = 1;
                  else if (this.frameCounter < num2 * 3)
                    this.frame = 2;
                  else if (this.frameCounter < num2 * 4)
                    this.frame = 3;
                  else
                    this.frameCounter = num2 * 4;
                }
                else
                {
                  this.velocity.X *= 0.8f;
                  this.frameCounter = this.frameCounter + 1;
                  int num2 = 3;
                  if (this.frameCounter < num2)
                    this.frame = 0;
                  else if (this.frameCounter < num2 * 2)
                    this.frame = 1;
                  else if (this.frameCounter < num2 * 3)
                    this.frame = 2;
                  else if (this.frameCounter < num2 * 4)
                    this.frame = 3;
                  else if (flag1 | flag2)
                  {
                    this.velocity.X *= 2f;
                    this.frame = 4;
                    this.velocity.Y = -6.1f;
                    this.frameCounter = 0;
                    for (int index1 = 0; index1 < 4; ++index1)
                    {
                      int index2 = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), this.width, 4, 5, 0.0f, 0.0f, 0, new Color(), 1f);
                      Main.dust[index2].velocity += this.velocity;
                      Main.dust[index2].velocity *= 0.4f;
                    }
                  }
                  else
                    this.frameCounter = num2 * 4;
                }
              }
              else if ((double) this.velocity.Y < 0.0)
              {
                this.frameCounter = 0;
                this.frame = 5;
              }
              else
              {
                this.frame = 4;
                this.frameCounter = 3;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 269)
            {
              if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  int index = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), this.width, 6, 76, 0.0f, 0.0f, 0, new Color(), 1f);
                  Main.dust[index].noGravity = true;
                  Main.dust[index].velocity *= 0.3f;
                  Main.dust[index].noLight = true;
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 3)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frameCounter = 0;
                this.frame = 2;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 313)
            {
              int index1 = (int) ((double) this.Center.X / 16.0);
              int index2 = (int) ((double) this.Center.Y / 16.0);
              if (Main.tile[index1, index2] != null && (int) Main.tile[index1, index2].wall > 0)
              {
                this.position.Y += (float) this.height;
                this.height = 34;
                this.position.Y -= (float) this.height;
                this.position.X += (float) (this.width / 2);
                this.width = 34;
                this.position.X -= (float) (this.width / 2);
                double num2 = 4.0;
                Vector2 vector2_2 = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
                float num3 = Main.player[this.owner].Center.X - vector2_2.X;
                float num4 = Main.player[this.owner].Center.Y - vector2_2.Y;
                float num5 = (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
                double num6 = (double) num5;
                float num7 = (float) (num2 / num6);
                float num8 = num3 * num7;
                float num9 = num4 * num7;
                if ((double) num5 < 120.0)
                {
                  this.velocity.X *= 0.9f;
                  this.velocity.Y *= 0.9f;
                  if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 0.1)
                    this.velocity = this.velocity * 0.0f;
                }
                else
                {
                  this.velocity.X = (float) (((double) this.velocity.X * 9.0 + (double) num8) / 10.0);
                  this.velocity.Y = (float) (((double) this.velocity.Y * 9.0 + (double) num9) / 10.0);
                }
                if ((double) num5 >= 120.0)
                {
                  this.spriteDirection = this.direction;
                  this.rotation = (float) Math.Atan2((double) this.velocity.Y * (double) -this.direction, (double) this.velocity.X * (double) -this.direction);
                }
                this.frameCounter = this.frameCounter + (int) ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y));
                if (this.frameCounter > 6)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
                if (this.frame > 10)
                  this.frame = 5;
                if (this.frame >= 5)
                  return;
                this.frame = 10;
              }
              else
              {
                this.rotation = 0.0f;
                if (this.direction == -1)
                  this.spriteDirection = 1;
                if (this.direction == 1)
                  this.spriteDirection = -1;
                this.position.Y += (float) this.height;
                this.height = 30;
                this.position.Y -= (float) this.height;
                this.position.X += (float) (this.width / 2);
                this.width = 30;
                this.position.X -= (float) (this.width / 2);
                if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                {
                  if ((double) this.velocity.X == 0.0)
                  {
                    this.frame = 0;
                    this.frameCounter = 0;
                  }
                  else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                  {
                    this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                    this.frameCounter = this.frameCounter + 1;
                    if (this.frameCounter > 6)
                    {
                      this.frame = this.frame + 1;
                      this.frameCounter = 0;
                    }
                    if (this.frame > 3)
                      this.frame = 0;
                  }
                  else
                  {
                    this.frame = 0;
                    this.frameCounter = 0;
                  }
                }
                else
                {
                  this.frameCounter = 0;
                  this.frame = 4;
                }
                this.velocity.Y += 0.4f;
                if ((double) this.velocity.Y <= 10.0)
                  return;
                this.velocity.Y = 10f;
              }
            }
            else if (this.type >= 390 && this.type <= 392)
            {
              int index1 = (int) ((double) this.Center.X / 16.0);
              int index2 = (int) ((double) this.Center.Y / 16.0);
              if (Main.tile[index1, index2] != null && (int) Main.tile[index1, index2].wall > 0)
              {
                this.position.Y += (float) this.height;
                this.height = 34;
                this.position.Y -= (float) this.height;
                this.position.X += (float) (this.width / 2);
                this.width = 34;
                this.position.X -= (float) (this.width / 2);
                float num2 = 9f;
                float num3 = (float) (40 * (this.minionPos + 1));
                Vector2 v = Main.player[this.owner].Center - this.Center;
                if (flag6)
                {
                  v = vector2_1;
                  num3 = 10f;
                }
                else if (!Collision.CanHitLine(this.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
                  this.ai[0] = 1f;
                if ((double) v.Length() < (double) num3)
                {
                  this.velocity = this.velocity * 0.9f;
                  if ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y) < 0.1)
                    this.velocity = this.velocity * 0.0f;
                }
                else if ((double) v.Length() < 800.0 || !flag6)
                  this.velocity = (this.velocity * 9f + Vector2.Normalize(v) * num2) / 10f;
                if ((double) v.Length() >= (double) num3)
                {
                  this.spriteDirection = this.direction;
                  this.rotation = this.velocity.ToRotation() + 1.570796f;
                }
                else
                  this.rotation = v.ToRotation() + 1.570796f;
                this.frameCounter = this.frameCounter + (int) ((double) Math.Abs(this.velocity.X) + (double) Math.Abs(this.velocity.Y));
                if (this.frameCounter > 5)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
                if (this.frame > 7)
                  this.frame = 4;
                if (this.frame >= 4)
                  return;
                this.frame = 7;
              }
              else
              {
                if (!flag7)
                  this.rotation = 0.0f;
                if (this.direction == -1)
                  this.spriteDirection = 1;
                if (this.direction == 1)
                  this.spriteDirection = -1;
                this.position.Y += (float) this.height;
                this.height = 30;
                this.position.Y -= (float) this.height;
                this.position.X += (float) (this.width / 2);
                this.width = 30;
                this.position.X -= (float) (this.width / 2);
                if (!flag6 && !Collision.CanHitLine(this.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
                  this.ai[0] = 1f;
                if (!flag7 && this.frame >= 4 && this.frame <= 7)
                {
                  Vector2 vector2_2 = Main.player[this.owner].Center - this.Center;
                  if (flag6)
                    vector2_2 = vector2_1;
                  float num2 = -vector2_2.Y;
                  if ((double) vector2_2.Y <= 0.0)
                  {
                    if ((double) num2 < 120.0)
                      this.velocity.Y = -10f;
                    else if ((double) num2 < 210.0)
                      this.velocity.Y = -13f;
                    else if ((double) num2 < 270.0)
                      this.velocity.Y = -15f;
                    else if ((double) num2 < 310.0)
                      this.velocity.Y = -17f;
                    else if ((double) num2 < 380.0)
                      this.velocity.Y = -18f;
                  }
                }
                if (flag7)
                {
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 3)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 8)
                    this.frame = 4;
                  if (this.frame <= 3)
                    this.frame = 7;
                }
                else if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
                {
                  if ((double) this.velocity.X == 0.0)
                  {
                    this.frame = 0;
                    this.frameCounter = 0;
                  }
                  else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                  {
                    this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                    this.frameCounter = this.frameCounter + 1;
                    if (this.frameCounter > 5)
                    {
                      this.frame = this.frame + 1;
                      this.frameCounter = 0;
                    }
                    if (this.frame > 2)
                      this.frame = 0;
                  }
                  else
                  {
                    this.frame = 0;
                    this.frameCounter = 0;
                  }
                }
                else
                {
                  this.frameCounter = 0;
                  this.frame = 3;
                }
                this.velocity.Y += 0.4f;
                if ((double) this.velocity.Y <= 10.0)
                  return;
                this.velocity.Y = 10f;
              }
            }
            else if (this.type == 314)
            {
              if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 6)
                    this.frame = 1;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frameCounter = 0;
                this.frame = 7;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 319)
            {
              if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 8)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 5)
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frameCounter = 0;
                this.frame = 1;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 236)
            {
              if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  if (this.frame < 2)
                    this.frame = 2;
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 8)
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frameCounter = 0;
                this.frame = 1;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 499)
            {
              if ((double) this.velocity.Y >= 0.0 && (double) this.velocity.Y <= 0.8)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  if (this.frame < 2)
                    this.frame = 2;
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 8)
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frameCounter = 0;
                this.frame = 1;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 266)
            {
              this.frameCounter = (double) this.velocity.Y < 0.0 || (double) this.velocity.Y > 0.8 ? this.frameCounter + 5 : ((double) this.velocity.X != 0.0 ? this.frameCounter + 3 : this.frameCounter + 1);
              if (this.frameCounter >= 20)
              {
                this.frameCounter = this.frameCounter - 20;
                this.frame = this.frame + 1;
              }
              if (this.frame > 1)
                this.frame = 0;
              if (this.wet && (double) Main.player[this.owner].position.Y + (double) Main.player[this.owner].height < (double) this.position.Y + (double) this.height && (double) this.localAI[0] == 0.0)
              {
                if ((double) this.velocity.Y > -4.0)
                  this.velocity.Y -= 0.2f;
                if ((double) this.velocity.Y > 0.0)
                  this.velocity.Y *= 0.95f;
              }
              else
                this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 334)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  if (this.frame > 0)
                  {
                    this.frameCounter = this.frameCounter + 2;
                    if (this.frameCounter > 6)
                    {
                      this.frame = this.frame + 1;
                      this.frameCounter = 0;
                    }
                    if (this.frame >= 7)
                      this.frame = 0;
                  }
                  else
                  {
                    this.frame = 0;
                    this.frameCounter = 0;
                  }
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs((double) this.velocity.X * 0.75);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 7 || this.frame < 1)
                    this.frame = 1;
                }
                else if (this.frame > 0)
                {
                  this.frameCounter = this.frameCounter + 2;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 7)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y < 0.0)
              {
                this.frameCounter = 0;
                this.frame = 2;
              }
              else if ((double) this.velocity.Y > 0.0)
              {
                this.frameCounter = 0;
                this.frame = 4;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 353)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 9)
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y < 0.0)
              {
                this.frameCounter = 0;
                this.frame = 1;
              }
              else if ((double) this.velocity.Y > 0.0)
              {
                this.frameCounter = 0;
                this.frame = 1;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 111)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 7)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y < 0.0)
              {
                this.frameCounter = 0;
                this.frame = 4;
              }
              else if ((double) this.velocity.Y > 0.0)
              {
                this.frameCounter = 0;
                this.frame = 6;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 112)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 3)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y < 0.0)
              {
                this.frameCounter = 0;
                this.frame = 2;
              }
              else if ((double) this.velocity.Y > 0.0)
              {
                this.frameCounter = 0;
                this.frame = 2;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == (int) sbyte.MaxValue)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 5)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frame = 0;
                this.frameCounter = 0;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 200)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 5)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.rotation = this.velocity.X * 0.1f;
                this.frameCounter = this.frameCounter + 1;
                if ((double) this.velocity.Y < 0.0)
                  this.frameCounter = this.frameCounter + 2;
                if (this.frameCounter > 6)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
                if (this.frame > 9)
                  this.frame = 6;
                if (this.frame < 6)
                  this.frame = 6;
              }
              this.velocity.Y += 0.1f;
              if ((double) this.velocity.Y <= 4.0)
                return;
              this.velocity.Y = 4f;
            }
            else if (this.type == 208)
            {
              if ((double) this.velocity.Y == 0.0 && (double) this.velocity.X == 0.0)
              {
                if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) < (double) this.position.X + (double) (this.width / 2))
                  this.direction = -1;
                else if ((double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2) > (double) this.position.X + (double) (this.width / 2))
                  this.direction = 1;
                this.rotation = 0.0f;
                this.frame = 0;
              }
              else
              {
                this.rotation = this.velocity.X * 0.075f;
                this.frameCounter = this.frameCounter + 1;
                if (this.frameCounter > 6)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
                if (this.frame > 4)
                  this.frame = 1;
                if (this.frame < 1)
                  this.frame = 1;
              }
              this.velocity.Y += 0.1f;
              if ((double) this.velocity.Y <= 4.0)
                return;
              this.velocity.Y = 4f;
            }
            else if (this.type == 209)
            {
              if (this.alpha > 0)
              {
                this.alpha = this.alpha - 5;
                if (this.alpha < 0)
                  this.alpha = 0;
              }
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 11)
                    this.frame = 2;
                  if (this.frame < 2)
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frame = 1;
                this.frameCounter = 0;
                this.rotation = 0.0f;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else if (this.type == 324)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 5)
                    this.frame = 2;
                  if (this.frame < 2)
                    this.frame = 2;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.frameCounter = 0;
                this.frame = 1;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 14.0)
                return;
              this.velocity.Y = 14f;
            }
            else if (this.type == 210)
            {
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X < -0.1 || (double) this.velocity.X > 0.1)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame > 6)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else
              {
                this.rotation = this.velocity.X * 0.05f;
                this.frameCounter = this.frameCounter + 1;
                if (this.frameCounter > 6)
                {
                  this.frame = this.frame + 1;
                  this.frameCounter = 0;
                }
                if (this.frame > 11)
                  this.frame = 7;
                if (this.frame < 7)
                  this.frame = 7;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
            else
            {
              if (this.type != 398)
                return;
              if ((double) this.velocity.Y == 0.0)
              {
                if ((double) this.velocity.X == 0.0)
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
                else if ((double) this.velocity.X < -0.8 || (double) this.velocity.X > 0.8)
                {
                  this.frameCounter = this.frameCounter + (int) Math.Abs(this.velocity.X);
                  this.frameCounter = this.frameCounter + 1;
                  if (this.frameCounter > 6)
                  {
                    this.frame = this.frame + 1;
                    this.frameCounter = 0;
                  }
                  if (this.frame >= 5)
                    this.frame = 0;
                }
                else
                {
                  this.frame = 0;
                  this.frameCounter = 0;
                }
              }
              else if ((double) this.velocity.Y != 0.0)
              {
                this.frameCounter = 0;
                this.frame = 5;
              }
              this.velocity.Y += 0.4f;
              if ((double) this.velocity.Y <= 10.0)
                return;
              this.velocity.Y = 10f;
            }
          }
        }
      }
    }

    private void AI_062()
    {
      if (this.type == 373)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].hornetMinion = false;
        if (Main.player[this.owner].hornetMinion)
          this.timeLeft = 2;
      }
      if (this.type == 375)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].impMinion = false;
        if (Main.player[this.owner].impMinion)
          this.timeLeft = 2;
      }
      if (this.type == 407)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].sharknadoMinion = false;
        if (Main.player[this.owner].sharknadoMinion)
          this.timeLeft = 2;
      }
      if (this.type == 423)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].UFOMinion = false;
        if (Main.player[this.owner].UFOMinion)
          this.timeLeft = 2;
      }
      if (this.type == 613)
      {
        if (Main.player[this.owner].dead)
          Main.player[this.owner].stardustMinion = false;
        if (Main.player[this.owner].stardustMinion)
          this.timeLeft = 2;
        Lighting.AddLight(this.Center, 0.2f, 0.6f, 0.7f);
        if ((double) this.localAI[1] > 0.0)
          --this.localAI[1];
      }
      if (this.type == 423)
      {
        if ((double) this.ai[0] == 2.0)
        {
          --this.ai[1];
          this.tileCollide = false;
          if ((double) this.ai[1] > 3.0)
          {
            int index = Dust.NewDust(this.Center, 0, 0, 220 + Main.rand.Next(2), this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
            Main.dust[index].scale = (float) (0.5 + Main.rand.NextDouble() * 0.300000011920929);
            Main.dust[index].velocity /= 2.5f;
            Main.dust[index].noGravity = true;
            Main.dust[index].noLight = true;
            Main.dust[index].frame.Y = 80;
          }
          if ((double) this.ai[1] != 0.0)
            return;
          this.ai[1] = 30f;
          this.ai[0] = 0.0f;
          this.velocity = this.velocity / 5f;
          this.velocity.Y = 0.0f;
          this.extraUpdates = 0;
          this.numUpdates = 0;
          this.netUpdate = true;
          this.extraUpdates = 0;
          this.numUpdates = 0;
        }
        if (this.extraUpdates > 1)
          this.extraUpdates = 0;
        if (this.numUpdates > 1)
          this.numUpdates = 0;
      }
      if (this.type == 613)
      {
        if ((double) this.ai[0] == 2.0)
        {
          --this.ai[1];
          this.tileCollide = false;
          if ((double) this.ai[1] > 3.0)
          {
            if (this.numUpdates < 20)
            {
              for (int index = 0; index < 3; ++index)
              {
                Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                int num1 = 1;
                dust.noGravity = num1 != 0;
                Vector2 center = this.Center;
                dust.position = center;
                Vector2 vector2_1 = dust.velocity * 3f;
                dust.velocity = vector2_1;
                Vector2 vector2_2 = dust.velocity + this.velocity * 3f;
                dust.velocity = vector2_2;
                double num2 = 1.0;
                dust.fadeIn = (float) num2;
              }
            }
            float num3 = (float) (2.0 - (double) this.numUpdates / 30.0);
            if ((double) this.scale > 0.0)
            {
              float num1 = 2f;
              for (int index = 0; (double) index < (double) num1; ++index)
              {
                Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
                int num2 = 1;
                dust.noGravity = num2 != 0;
                Vector2 vector2_1 = this.Center + Vector2.UnitY.RotatedBy((double) this.numUpdates * 0.104719758033752 + (double) this.whoAmI * 0.785398185253143 + 1.57079637050629, new Vector2()) * (float) (this.height / 2) - this.velocity * ((float) index / num1);
                dust.position = vector2_1;
                Vector2 vector2_2 = this.velocity / 3f;
                dust.velocity = vector2_2;
                double num4 = (double) num3 / 2.0;
                dust.fadeIn = (float) num4;
                double num5 = (double) num3;
                dust.scale = (float) num5;
              }
            }
          }
          if ((double) this.ai[1] != 0.0)
            return;
          this.ai[1] = 30f;
          this.ai[0] = 0.0f;
          this.velocity = this.velocity / 5f;
          this.velocity.Y = 0.0f;
          this.extraUpdates = 0;
          this.numUpdates = 0;
          this.netUpdate = true;
          float num = 15f;
          for (int index = 0; (double) index < (double) num; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.noGravity = true;
            dust.position = this.Center - this.velocity * 5f;
            dust.velocity *= 3f;
            dust.velocity += this.velocity * 3f;
            dust.fadeIn = 1f;
            if (Main.rand.Next(3) != 0)
            {
              dust.fadeIn = 2f;
              dust.scale = 2f;
              dust.velocity /= 8f;
            }
          }
          for (int index = 0; (double) index < (double) num; ++index)
          {
            Dust dust = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust.noGravity = true;
            dust.position = this.Center;
            dust.velocity *= 3f;
            dust.velocity += this.velocity * 3f;
            dust.fadeIn = 1f;
            if (Main.rand.Next(3) != 0)
            {
              dust.fadeIn = 2f;
              dust.scale = 2f;
              dust.velocity /= 8f;
            }
          }
          this.extraUpdates = 0;
          this.numUpdates = 0;
        }
        if (this.extraUpdates > 1)
          this.extraUpdates = 0;
        if (this.numUpdates > 1)
          this.numUpdates = 0;
      }
      if (this.type == 423 && (double) this.localAI[0] > 0.0)
        --this.localAI[0];
      if (this.type == 613 && (double) this.localAI[0] > 0.0)
        --this.localAI[0];
      float num6 = 0.05f;
      float width = (float) this.width;
      if (this.type == 407)
      {
        num6 = 0.1f;
        width *= 2f;
      }
      for (int index = 0; index < 1000; ++index)
      {
        if (index != this.whoAmI && Main.projectile[index].active && (Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type) && (double) Math.Abs(this.position.X - Main.projectile[index].position.X) + (double) Math.Abs(this.position.Y - Main.projectile[index].position.Y) < (double) width)
        {
          if ((double) this.position.X < (double) Main.projectile[index].position.X)
            this.velocity.X -= num6;
          else
            this.velocity.X += num6;
          if ((double) this.position.Y < (double) Main.projectile[index].position.Y)
            this.velocity.Y -= num6;
          else
            this.velocity.Y += num6;
        }
      }
      Vector2 vector2_3 = this.position;
      float num7 = 400f;
      if (this.type == 423)
        num7 = 300f;
      if (this.type == 613)
        num7 = 300f;
      bool flag = false;
      int num8 = -1;
      this.tileCollide = true;
      if (this.type == 407)
      {
        this.tileCollide = false;
        if (Collision.SolidCollision(this.position, this.width, this.height))
        {
          this.alpha = this.alpha + 20;
          if (this.alpha > 150)
            this.alpha = 150;
        }
        else
        {
          this.alpha = this.alpha - 50;
          if (this.alpha < 60)
            this.alpha = 60;
        }
      }
      if (this.type == 407 || this.type == 613 || this.type == 423)
      {
        Vector2 center = Main.player[this.owner].Center;
        Vector2 vector2_1 = new Vector2(0.5f);
        if (this.type == 423)
          vector2_1.Y = 0.0f;
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
        {
          Vector2 vector2_2 = minionAttackTargetNpc.position + minionAttackTargetNpc.Size * vector2_1;
          float num1 = Vector2.Distance(vector2_2, center);
          if (((double) Vector2.Distance(center, vector2_3) > (double) num1 && (double) num1 < (double) num7 || !flag) && Collision.CanHitLine(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
          {
            num7 = num1;
            vector2_3 = vector2_2;
            flag = true;
            num8 = minionAttackTargetNpc.whoAmI;
          }
        }
        if (!flag)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this, false))
            {
              Vector2 vector2_2 = npc.position + npc.Size * vector2_1;
              float num1 = Vector2.Distance(vector2_2, center);
              if (((double) Vector2.Distance(center, vector2_3) > (double) num1 && (double) num1 < (double) num7 || !flag) && Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num7 = num1;
                vector2_3 = vector2_2;
                flag = true;
                num8 = index;
              }
            }
          }
        }
      }
      else
      {
        NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
        if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
        {
          float num1 = Vector2.Distance(minionAttackTargetNpc.Center, this.Center);
          if (((double) Vector2.Distance(this.Center, vector2_3) > (double) num1 && (double) num1 < (double) num7 || !flag) && Collision.CanHitLine(this.position, this.width, this.height, minionAttackTargetNpc.position, minionAttackTargetNpc.width, minionAttackTargetNpc.height))
          {
            num7 = num1;
            vector2_3 = minionAttackTargetNpc.Center;
            flag = true;
            num8 = minionAttackTargetNpc.whoAmI;
          }
        }
        if (!flag)
        {
          for (int index = 0; index < 200; ++index)
          {
            NPC npc = Main.npc[index];
            if (npc.CanBeChasedBy((object) this, false))
            {
              float num1 = Vector2.Distance(npc.Center, this.Center);
              if (((double) Vector2.Distance(this.Center, vector2_3) > (double) num1 && (double) num1 < (double) num7 || !flag) && Collision.CanHitLine(this.position, this.width, this.height, npc.position, npc.width, npc.height))
              {
                num7 = num1;
                vector2_3 = npc.Center;
                flag = true;
                num8 = index;
              }
            }
          }
        }
      }
      int num9 = 500;
      if (flag)
        num9 = 1000;
      if (flag && this.type == 423)
        num9 = 1200;
      if (flag && this.type == 613)
        num9 = 1350;
      Player player = Main.player[this.owner];
      if ((double) Vector2.Distance(player.Center, this.Center) > (double) num9)
      {
        this.ai[0] = 1f;
        this.netUpdate = true;
      }
      if ((double) this.ai[0] == 1.0)
        this.tileCollide = false;
      if (flag && (double) this.ai[0] == 0.0)
      {
        Vector2 vector2_1 = vector2_3 - this.Center;
        float num1 = vector2_1.Length();
        vector2_1.Normalize();
        if (this.type == 423)
        {
          Vector2 vector2_2 = vector2_3 - Vector2.UnitY * 80f;
          int index = (int) vector2_2.Y / 16;
          if (index < 0)
            index = 0;
          Tile tile1 = Main.tile[(int) vector2_2.X / 16, index];
          if (tile1 != null && tile1.active() && (Main.tileSolid[(int) tile1.type] && !Main.tileSolidTop[(int) tile1.type]))
          {
            vector2_2 += Vector2.UnitY * 16f;
            Tile tile2 = Main.tile[(int) vector2_2.X / 16, (int) vector2_2.Y / 16];
            if (tile2 != null && tile2.active() && (Main.tileSolid[(int) tile2.type] && !Main.tileSolidTop[(int) tile2.type]))
              vector2_2 += Vector2.UnitY * 16f;
          }
          vector2_1 = vector2_2 - this.Center;
          num1 = vector2_1.Length();
          vector2_1.Normalize();
          if ((double) num1 > 300.0 && (double) num1 <= 800.0 && (double) this.localAI[0] == 0.0)
          {
            this.ai[0] = 2f;
            this.ai[1] = (float) (int) ((double) num1 / 10.0);
            this.extraUpdates = (int) this.ai[1];
            this.velocity = vector2_1 * 10f;
            this.localAI[0] = 60f;
            return;
          }
        }
        if (this.type == 613)
        {
          Vector2 vector2_2 = vector2_3;
          Vector2 vector2_4 = this.Center - vector2_2;
          if (vector2_4 == Vector2.Zero)
            vector2_4 = -Vector2.UnitY;
          vector2_4.Normalize();
          Vector2 vector2_5 = vector2_2 + vector2_4 * 60f;
          int index = (int) vector2_5.Y / 16;
          if (index < 0)
            index = 0;
          Tile tile1 = Main.tile[(int) vector2_5.X / 16, index];
          if (tile1 != null && tile1.active() && (Main.tileSolid[(int) tile1.type] && !Main.tileSolidTop[(int) tile1.type]))
          {
            vector2_5 += Vector2.UnitY * 16f;
            Tile tile2 = Main.tile[(int) vector2_5.X / 16, (int) vector2_5.Y / 16];
            if (tile2 != null && tile2.active() && (Main.tileSolid[(int) tile2.type] && !Main.tileSolidTop[(int) tile2.type]))
              vector2_5 += Vector2.UnitY * 16f;
          }
          vector2_1 = vector2_5 - this.Center;
          num1 = vector2_1.Length();
          vector2_1.Normalize();
          if ((double) num1 > 400.0 && (double) num1 <= 800.0 && (double) this.localAI[0] == 0.0)
          {
            this.ai[0] = 2f;
            this.ai[1] = (float) (int) ((double) num1 / 10.0);
            this.extraUpdates = (int) this.ai[1];
            this.velocity = vector2_1 * 10f;
            this.localAI[0] = 60f;
            return;
          }
        }
        if (this.type == 407)
        {
          if ((double) num1 > 400.0)
          {
            float num2 = 2f;
            vector2_1 *= num2;
            this.velocity = (this.velocity * 20f + vector2_1) / 21f;
          }
          else
            this.velocity = this.velocity * 0.96f;
        }
        if ((double) num1 > 200.0)
        {
          float num2 = 6f;
          Vector2 vector2_2 = vector2_1 * num2;
          this.velocity.X = (float) (((double) this.velocity.X * 40.0 + (double) vector2_2.X) / 41.0);
          this.velocity.Y = (float) (((double) this.velocity.Y * 40.0 + (double) vector2_2.Y) / 41.0);
        }
        else if (this.type == 423 || this.type == 613)
        {
          if ((double) num1 > 70.0 && (double) num1 < 130.0)
          {
            float num2 = 7f;
            if ((double) num1 < 100.0)
              num2 = -3f;
            Vector2 vector2_2 = vector2_1 * num2;
            this.velocity = (this.velocity * 20f + vector2_2) / 21f;
            if ((double) Math.Abs(vector2_2.X) > (double) Math.Abs(vector2_2.Y))
              this.velocity.X = (float) (((double) this.velocity.X * 10.0 + (double) vector2_2.X) / 11.0);
          }
          else
            this.velocity = this.velocity * 0.97f;
        }
        else if (this.type == 375)
        {
          if ((double) num1 < 150.0)
          {
            float num2 = 4f;
            Vector2 vector2_2 = vector2_1 * -num2;
            this.velocity.X = (float) (((double) this.velocity.X * 40.0 + (double) vector2_2.X) / 41.0);
            this.velocity.Y = (float) (((double) this.velocity.Y * 40.0 + (double) vector2_2.Y) / 41.0);
          }
          else
            this.velocity = this.velocity * 0.97f;
        }
        else if ((double) this.velocity.Y > -1.0)
          this.velocity.Y -= 0.1f;
      }
      else
      {
        if (!Collision.CanHitLine(this.Center, 1, 1, Main.player[this.owner].Center, 1, 1))
          this.ai[0] = 1f;
        float num1 = 6f;
        if ((double) this.ai[0] == 1.0)
          num1 = 15f;
        if (this.type == 407)
          num1 = 9f;
        Vector2 center = this.Center;
        Vector2 vector2_1 = player.Center - center + new Vector2(0.0f, -60f);
        if (this.type == 407)
          vector2_1 += new Vector2(0.0f, 40f);
        if (this.type == 375)
        {
          this.ai[1] = 3600f;
          this.netUpdate = true;
          vector2_1 = player.Center - center;
          int num2 = 1;
          for (int index = 0; index < this.whoAmI; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type)
              ++num2;
          }
          vector2_1.X -= (float) (10 * Main.player[this.owner].direction);
          vector2_1.X -= (float) (num2 * 40 * Main.player[this.owner].direction);
          vector2_1.Y -= 10f;
        }
        float num3 = vector2_1.Length();
        if ((double) num3 > 200.0 && (double) num1 < 9.0)
          num1 = 9f;
        if (this.type == 375)
          num1 = (float) (int) ((double) num1 * 0.75);
        if ((double) num3 < 100.0 && (double) this.ai[0] == 1.0 && !Collision.SolidCollision(this.position, this.width, this.height))
        {
          this.ai[0] = 0.0f;
          this.netUpdate = true;
        }
        if ((double) num3 > 2000.0)
        {
          this.position.X = Main.player[this.owner].Center.X - (float) (this.width / 2);
          this.position.Y = Main.player[this.owner].Center.Y - (float) (this.width / 2);
        }
        if (this.type == 375)
        {
          if ((double) num3 > 10.0)
          {
            vector2_1.Normalize();
            if ((double) num3 < 50.0)
              num1 /= 2f;
            this.velocity = (this.velocity * 20f + vector2_1 * num1) / 21f;
          }
          else
          {
            this.direction = Main.player[this.owner].direction;
            this.velocity = this.velocity * 0.9f;
          }
        }
        else if (this.type == 407)
        {
          if ((double) Math.Abs(vector2_1.X) > 40.0 || (double) Math.Abs(vector2_1.Y) > 10.0)
          {
            vector2_1.Normalize();
            this.velocity = (this.velocity * 20f + vector2_1 * num1 * new Vector2(1.25f, 0.65f)) / 21f;
          }
          else
          {
            if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
            {
              this.velocity.X = -0.15f;
              this.velocity.Y = -0.05f;
            }
            this.velocity = this.velocity * 1.01f;
          }
        }
        else if ((double) num3 > 70.0)
        {
          vector2_1.Normalize();
          this.velocity = (this.velocity * 20f + vector2_1 * num1) / 21f;
        }
        else
        {
          if ((double) this.velocity.X == 0.0 && (double) this.velocity.Y == 0.0)
          {
            this.velocity.X = -0.15f;
            this.velocity.Y = -0.05f;
          }
          this.velocity = this.velocity * 1.01f;
        }
      }
      this.rotation = this.velocity.X * 0.05f;
      this.frameCounter = this.frameCounter + 1;
      if (this.type == 373)
      {
        if (this.frameCounter > 1)
        {
          this.frame = this.frame + 1;
          this.frameCounter = 0;
        }
        if (this.frame > 2)
          this.frame = 0;
      }
      if (this.type == 375)
      {
        if (this.frameCounter >= 16)
          this.frameCounter = 0;
        this.frame = this.frameCounter / 4;
        if ((double) this.ai[1] > 0.0 && (double) this.ai[1] < 16.0)
          this.frame = this.frame + 4;
        if (Main.rand.Next(6) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
        }
      }
      if (this.type == 407)
      {
        int num1 = 2;
        if (this.frameCounter >= 6 * num1)
          this.frameCounter = 0;
        this.frame = this.frameCounter / num1;
        if (Main.rand.Next(5) == 0)
        {
          int index = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 217, 0.0f, 0.0f, 100, new Color(), 2f);
          Main.dust[index].velocity *= 0.3f;
          Main.dust[index].noGravity = true;
          Main.dust[index].noLight = true;
        }
      }
      if (this.type == 423 || this.type == 613)
      {
        int num1 = 3;
        if (this.frameCounter >= 4 * num1)
          this.frameCounter = 0;
        this.frame = this.frameCounter / num1;
      }
      if ((double) this.velocity.X > 0.0)
        this.spriteDirection = this.direction = -1;
      else if ((double) this.velocity.X < 0.0)
        this.spriteDirection = this.direction = 1;
      if (this.type == 373)
      {
        if ((double) this.ai[1] > 0.0)
          this.ai[1] += (float) Main.rand.Next(1, 4);
        if ((double) this.ai[1] > 90.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 375)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) == 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > (double) Main.rand.Next(180, 900))
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 407)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) != 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > 60.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 423)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) != 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > 30.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      else if (this.type == 613)
      {
        if ((double) this.ai[1] > 0.0)
        {
          ++this.ai[1];
          if (Main.rand.Next(3) != 0)
            ++this.ai[1];
        }
        if ((double) this.ai[1] > 60.0)
        {
          this.ai[1] = 0.0f;
          this.netUpdate = true;
        }
      }
      if ((double) this.ai[0] != 0.0)
        return;
      float num10 = 0.0f;
      int Type = 0;
      if (this.type == 373)
      {
        num10 = 10f;
        Type = 374;
      }
      else if (this.type == 375)
      {
        num10 = 11f;
        Type = 376;
      }
      else if (this.type == 407)
      {
        num10 = 14f;
        Type = 408;
      }
      else if (this.type == 423)
      {
        num10 = 4f;
        Type = 433;
      }
      else if (this.type == 613)
      {
        num10 = 14f;
        Type = 614;
      }
      if (!flag)
        return;
      if (this.type == 375)
      {
        if ((double) (vector2_3 - this.Center).X > 0.0)
          this.spriteDirection = this.direction = -1;
        else if ((double) (vector2_3 - this.Center).X < 0.0)
          this.spriteDirection = this.direction = 1;
      }
      if (this.type == 407 && Collision.SolidCollision(this.position, this.width, this.height))
        return;
      if (this.type == 423)
      {
        if ((double) Math.Abs((vector2_3 - this.Center).ToRotation() - 1.570796f) > 0.785398185253143)
        {
          this.velocity = this.velocity + Vector2.Normalize(vector2_3 - this.Center - Vector2.UnitY * 80f);
        }
        else
        {
          if ((double) (vector2_3 - this.Center).Length() > 400.0 || (double) this.ai[1] != 0.0)
            return;
          ++this.ai[1];
          if (Main.myPlayer != this.owner)
            return;
          Vector2 vector2_1 = vector2_3 - this.Center;
          vector2_1.Normalize();
          Vector2 vector2_2 = vector2_1 * num10;
          Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, Type, this.damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
          this.netUpdate = true;
        }
      }
      else if ((double) this.ai[1] == 0.0 && this.type == 613)
      {
        if ((double) (vector2_3 - this.Center).Length() > 500.0 || (double) this.ai[1] != 0.0)
          return;
        ++this.ai[1];
        if (Main.myPlayer == this.owner)
        {
          Vector2 vector2_1 = vector2_3 - this.Center;
          vector2_1.Normalize();
          Vector2 vector2_2 = vector2_1 * num10;
          int index = Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, Type, this.damage, 0.0f, Main.myPlayer, 0.0f, (float) num8);
          Main.projectile[index].timeLeft = 300;
          Main.projectile[index].netUpdate = true;
          this.velocity = this.velocity - vector2_2 / 3f;
          this.netUpdate = true;
        }
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int num1 = this.width / 4;
          Vector2 vector2_1 = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() * (float) Main.rand.Next(24, 41) / 8f;
          int index2 = Dust.NewDust(this.Center - Vector2.One * (float) num1, num1 * 2, num1 * 2, 88, 0.0f, 0.0f, 0, new Color(), 1f);
          Dust dust = Main.dust[index2];
          Vector2 vector2_2 = Vector2.Normalize(dust.position - this.Center);
          dust.position = this.Center + vector2_2 * (float) num1 * this.scale - new Vector2(4f);
          dust.velocity = index1 >= 30 ? 2f * vector2_2 * (float) Main.rand.Next(45, 91) / 10f : vector2_2 * dust.velocity.Length() * 2f;
          dust.noGravity = true;
          dust.scale = 0.7f + Main.rand.NextFloat();
        }
      }
      else
      {
        if ((double) this.ai[1] != 0.0)
          return;
        ++this.ai[1];
        if (Main.myPlayer != this.owner)
          return;
        Vector2 vector2_1 = vector2_3 - this.Center;
        vector2_1.Normalize();
        Vector2 vector2_2 = vector2_1 * num10;
        int index = Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, Type, this.damage, 0.0f, Main.myPlayer, 0.0f, 0.0f);
        Main.projectile[index].timeLeft = 300;
        Main.projectile[index].netUpdate = true;
        this.netUpdate = true;
      }
    }

    private void AI_075()
    {
      Player player1 = Main.player[this.owner];
      float num1 = 1.570796f;
      Vector2 vector2_1 = player1.RotatedRelativePoint(player1.MountedCenter, true);
      if (this.type == 439)
      {
        ++this.ai[0];
        int num2 = 0;
        if ((double) this.ai[0] >= 40.0)
          ++num2;
        if ((double) this.ai[0] >= 80.0)
          ++num2;
        if ((double) this.ai[0] >= 120.0)
          ++num2;
        int num3 = 24;
        int num4 = 6;
        ++this.ai[1];
        bool flag = false;
        if ((double) this.ai[1] >= (double) (num3 - num4 * num2))
        {
          this.ai[1] = 0.0f;
          flag = true;
        }
        this.frameCounter = this.frameCounter + (1 + num2);
        if (this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame >= 6)
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          this.soundDelay = num3 - num4 * num2;
          if ((double) this.ai[0] != 1.0)
            Main.PlaySound(SoundID.Item91, this.position);
        }
        if ((double) this.ai[1] == 1.0 && (double) this.ai[0] != 1.0)
        {
          Vector2 vector2_2 = this.Center + (Vector2.UnitX * 24f).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(vector2_2 - Vector2.One * 8f, 16, 16, 135, this.velocity.X / 2f, this.velocity.Y / 2f, 100, new Color(), 1f);
            Main.dust[index2].velocity *= 0.66f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.4f;
          }
        }
        if (flag && Main.myPlayer == this.owner)
        {
          if ((!player1.channel || !player1.CheckMana(player1.inventory[player1.selectedItem].mana, true, false) || player1.noItems ? 0 : (!player1.CCed ? 1 : 0)) != 0)
          {
            float num5 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_2 = vector2_1;
            Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
            if ((double) player1.gravDir == -1.0)
              vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            Vector2 vector2_4 = Vector2.Normalize(vector2_3);
            if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
              vector2_4 = -Vector2.UnitY;
            Vector2 vector2_5 = vector2_4 * num5;
            if ((double) vector2_5.X != (double) this.velocity.X || (double) vector2_5.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_5;
            int Type = 440;
            float num6 = 14f;
            int num7 = 7;
            for (int index = 0; index < 2; ++index)
            {
              Vector2 vector2_6 = this.Center + new Vector2((float) Main.rand.Next(-num7, num7 + 1), (float) Main.rand.Next(-num7, num7 + 1));
              Vector2 vector2_7 = (Vector2.Normalize(this.velocity) * num6).RotatedBy(Main.rand.NextDouble() * 0.196349546313286 - 0.0981747731566429, new Vector2());
              if (float.IsNaN(vector2_7.X) || float.IsNaN(vector2_7.Y))
                vector2_7 = -Vector2.UnitY;
              Projectile.NewProjectile(vector2_6.X, vector2_6.Y, vector2_7.X, vector2_7.Y, Type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 445)
      {
        ++this.localAI[0];
        if ((double) this.localAI[0] >= 60.0)
          this.localAI[0] = 0.0f;
        if ((double) Vector2.Distance(vector2_1, this.Center) >= 5.0)
        {
          float num2 = this.localAI[0] / 60f;
          if ((double) num2 > 0.5)
            num2 = 1f - num2;
          Vector3 vector3 = Vector3.Lerp(new Vector3(0.0f, 1f, 0.7f), new Vector3(0.0f, 0.7f, 1f), (float) (1.0 - (double) num2 * 2.0)) * 0.5f;
          if ((double) Vector2.Distance(vector2_1, this.Center) >= 30.0)
          {
            Vector2 vector2_2 = this.Center - vector2_1;
            vector2_2.Normalize();
            Vector2 vector2_3 = vector2_2 * (Vector2.Distance(vector2_1, this.Center) - 30f);
            DelegateMethods.v3_1 = vector3 * 0.8f;
            Utils.PlotTileLine(this.Center - vector2_3, this.Center, 8f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
          }
          Lighting.AddLight((int) this.Center.X / 16, (int) this.Center.Y / 16, vector3.X, vector3.Y, vector3.Z);
        }
        if (Main.myPlayer == this.owner)
        {
          if ((double) this.localAI[1] > 0.0)
            --this.localAI[1];
          if (!player1.channel || player1.noItems || player1.CCed)
            this.Kill();
          else if ((double) this.localAI[1] == 0.0)
          {
            Vector2 vector2_2 = vector2_1;
            Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
            if ((double) player1.gravDir == -1.0)
              vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            if (Main.tile[Player.tileTargetX, Player.tileTargetY].active())
            {
              vector2_3 = new Vector2((float) Player.tileTargetX, (float) Player.tileTargetY) * 16f + Vector2.One * 8f - vector2_2;
              this.localAI[1] = 2f;
            }
            Vector2 vector2_4 = Vector2.Lerp(vector2_3, this.velocity, 0.7f);
            if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
              vector2_4 = -Vector2.UnitY;
            float num2 = 30f;
            if ((double) vector2_4.Length() < (double) num2)
              vector2_4 = Vector2.Normalize(vector2_4) * num2;
            int tileBoost = player1.inventory[player1.selectedItem].tileBoost;
            int num3 = -Player.tileRangeX - tileBoost + 1;
            int num4 = Player.tileRangeX + tileBoost - 1;
            int num5 = -Player.tileRangeY - tileBoost;
            int num6 = Player.tileRangeY + tileBoost - 1;
            int num7 = 12;
            bool flag = false;
            if ((double) vector2_4.X < (double) (num3 * 16 - num7))
              flag = true;
            if ((double) vector2_4.Y < (double) (num5 * 16 - num7))
              flag = true;
            if ((double) vector2_4.X > (double) (num4 * 16 + num7))
              flag = true;
            if ((double) vector2_4.Y > (double) (num6 * 16 + num7))
              flag = true;
            if (flag)
            {
              Vector2 vector2_5 = Vector2.Normalize(vector2_4);
              float num8 = -1f;
              if ((double) vector2_5.X < 0.0 && ((double) (num3 * 16 - num7) / (double) vector2_5.X < (double) num8 || (double) num8 == -1.0))
                num8 = (float) (num3 * 16 - num7) / vector2_5.X;
              if ((double) vector2_5.X > 0.0 && ((double) (num4 * 16 + num7) / (double) vector2_5.X < (double) num8 || (double) num8 == -1.0))
                num8 = (float) (num4 * 16 + num7) / vector2_5.X;
              if ((double) vector2_5.Y < 0.0 && ((double) (num5 * 16 - num7) / (double) vector2_5.Y < (double) num8 || (double) num8 == -1.0))
                num8 = (float) (num5 * 16 - num7) / vector2_5.Y;
              if ((double) vector2_5.Y > 0.0 && ((double) (num6 * 16 + num7) / (double) vector2_5.Y < (double) num8 || (double) num8 == -1.0))
                num8 = (float) (num6 * 16 + num7) / vector2_5.Y;
              vector2_4 = vector2_5 * num8;
            }
            if ((double) vector2_4.X != (double) this.velocity.X || (double) vector2_4.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_4;
          }
        }
      }
      if (this.type == 460)
      {
        ++this.ai[0];
        int num2 = 0;
        if ((double) this.ai[0] >= 60.0)
          ++num2;
        if ((double) this.ai[0] >= 180.0)
          ++num2;
        bool flag1 = false;
        if ((double) this.ai[0] == 60.0 || (double) this.ai[0] == 180.0 || (double) this.ai[0] > 180.0 && (double) this.ai[0] % 20.0 == 0.0)
          flag1 = true;
        bool flag2 = (double) this.ai[0] >= 180.0;
        int num3 = 10;
        if (!flag2)
          ++this.ai[1];
        bool flag3 = false;
        if (flag2 && (double) this.ai[0] % 20.0 == 0.0)
          flag3 = true;
        if ((double) this.ai[1] >= (double) num3 && !flag2)
        {
          this.ai[1] = 0.0f;
          flag3 = true;
          if (!flag2)
          {
            float num4 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_2 = vector2_1;
            Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
            if ((double) player1.gravDir == -1.0)
              vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            Vector2 vector2_4 = Vector2.Normalize(vector2_3);
            if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
              vector2_4 = -Vector2.UnitY;
            Vector2 vector2_5 = vector2_4 * num4;
            if ((double) vector2_5.X != (double) this.velocity.X || (double) vector2_5.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_5;
          }
        }
        if (this.soundDelay <= 0 && !flag2)
        {
          this.soundDelay = num3 - num2;
          this.soundDelay = this.soundDelay * 2;
          if ((double) this.ai[0] != 1.0)
            Main.PlaySound(SoundID.Item15, this.position);
        }
        if ((double) this.ai[0] > 10.0 && !flag2)
        {
          Vector2 vector2_2 = this.Center + (Vector2.UnitX * 18f).RotatedBy((double) this.rotation - 1.57079637050629, new Vector2());
          for (int index1 = 0; index1 < num2 + 1; ++index1)
          {
            int Type = 226;
            float num4 = 0.4f;
            if (index1 % 2 == 1)
            {
              Type = 226;
              num4 = 0.65f;
            }
            Vector2 vector2_3 = vector2_2 + ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2() * (12f - (float) (num2 * 2));
            int index2 = Dust.NewDust(vector2_3 - Vector2.One * 8f, 16, 16, Type, this.velocity.X / 2f, this.velocity.Y / 2f, 0, new Color(), 1f);
            Main.dust[index2].velocity = Vector2.Normalize(vector2_2 - vector2_3) * 1.5f * (float) (10.0 - (double) num2 * 2.0) / 10f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = num4;
            Main.dust[index2].customData = (object) player1;
          }
        }
        if (flag3 && Main.myPlayer == this.owner)
        {
          bool flag4 = !flag1 || player1.CheckMana(player1.inventory[player1.selectedItem].mana, true, false);
          if ((!(player1.channel & flag4) || player1.noItems ? 0 : (!player1.CCed ? 1 : 0)) != 0)
          {
            if ((double) this.ai[0] == 180.0)
            {
              Vector2 center = this.Center;
              Vector2 vector2_2 = Vector2.Normalize(this.velocity);
              if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                vector2_2 = -Vector2.UnitY;
              int Damage = (int) ((double) this.damage * 3.0);
              this.ai[1] = (float) Projectile.NewProjectile(center.X, center.Y, vector2_2.X, vector2_2.Y, 461, Damage, this.knockBack, this.owner, 0.0f, (float) this.whoAmI);
              this.netUpdate = true;
            }
            else if (flag2)
            {
              Projectile projectile = Main.projectile[(int) this.ai[1]];
              if (!projectile.active || projectile.type != 461)
              {
                this.Kill();
                return;
              }
            }
          }
          else
          {
            if (!flag2)
            {
              int Type = 459;
              float num4 = 10f;
              Vector2 center = this.Center;
              Vector2 vector2_2 = Vector2.Normalize(this.velocity) * num4;
              if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                vector2_2 = -Vector2.UnitY;
              float ai1 = (float) (0.699999988079071 + (double) num2 * 0.300000011920929);
              int Damage = (double) ai1 < 1.0 ? this.damage : (int) ((double) this.damage * 2.0);
              Projectile.NewProjectile(center.X, center.Y, vector2_2.X, vector2_2.Y, Type, Damage, this.knockBack, this.owner, 0.0f, ai1);
            }
            this.Kill();
          }
        }
      }
      if (this.type == 633)
      {
        float num2 = 30f;
        if ((double) this.ai[0] > 90.0)
          num2 = 15f;
        if ((double) this.ai[0] > 120.0)
          num2 = 5f;
        this.damage = (int) ((double) player1.inventory[player1.selectedItem].damage * (double) player1.magicDamage);
        ++this.ai[0];
        ++this.ai[1];
        bool flag1 = false;
        if ((double) this.ai[0] % (double) num2 == 0.0)
          flag1 = true;
        int num3 = 10;
        bool flag2 = false;
        if ((double) this.ai[0] % (double) num2 == 0.0)
          flag2 = true;
        if ((double) this.ai[1] >= 1.0)
        {
          this.ai[1] = 0.0f;
          flag2 = true;
          if (Main.myPlayer == this.owner)
          {
            float num4 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_2 = vector2_1;
            Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
            if ((double) player1.gravDir == -1.0)
              vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            Vector2 vector2_4 = Vector2.Normalize(vector2_3);
            if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
              vector2_4 = -Vector2.UnitY;
            Vector2 vector2_5 = Vector2.Normalize(Vector2.Lerp(vector2_4, Vector2.Normalize(this.velocity), 0.92f)) * num4;
            if ((double) vector2_5.X != (double) this.velocity.X || (double) vector2_5.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_5;
          }
        }
        this.frameCounter = this.frameCounter + 1;
        if (this.frameCounter >= ((double) this.ai[0] < 120.0 ? 4 : 1))
        {
          this.frameCounter = 0;
          int num4 = this.frame + 1;
          this.frame = num4;
          if (num4 >= 5)
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          this.soundDelay = num3;
          this.soundDelay = this.soundDelay * 2;
          if ((double) this.ai[0] != 1.0)
            Main.PlaySound(SoundID.Item15, this.position);
        }
        if (flag2 && Main.myPlayer == this.owner)
        {
          bool flag3 = !flag1 || player1.CheckMana(player1.inventory[player1.selectedItem].mana, true, false);
          if ((!(player1.channel & flag3) || player1.noItems ? 0 : (!player1.CCed ? 1 : 0)) != 0)
          {
            if ((double) this.ai[0] == 1.0)
            {
              Vector2 center = this.Center;
              Vector2 vector2_2 = Vector2.Normalize(this.velocity);
              if (float.IsNaN(vector2_2.X) || float.IsNaN(vector2_2.Y))
                vector2_2 = -Vector2.UnitY;
              int damage = this.damage;
              for (int index = 0; index < 6; ++index)
                Projectile.NewProjectile(center.X, center.Y, vector2_2.X, vector2_2.Y, 632, damage, this.knockBack, this.owner, (float) index, (float) this.whoAmI);
              this.netUpdate = true;
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 595)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.141593f;
        int num2 = this.frame + 1;
        this.frame = num2;
        if (num2 >= Main.projFrames[this.type])
          this.frame = 0;
        this.soundDelay = this.soundDelay - 1;
        if (this.soundDelay <= 0)
        {
          Main.PlaySound(SoundID.Item1, this.Center);
          this.soundDelay = 12;
        }
        if (Main.myPlayer == this.owner)
        {
          if (player1.channel && !player1.noItems && !player1.CCed)
          {
            float num3 = 1f;
            if (player1.inventory[player1.selectedItem].shoot == this.type)
              num3 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
            Vector2 vec = Main.MouseWorld - vector2_1;
            vec.Normalize();
            if (vec.HasNaNs())
              vec = Vector2.UnitX * (float) player1.direction;
            vec *= num3;
            if ((double) vec.X != (double) this.velocity.X || (double) vec.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vec;
          }
          else
            this.Kill();
        }
        Vector2 position = this.Center + this.velocity * 3f;
        Lighting.AddLight(position, 0.8f, 0.8f, 0.8f);
        if (Main.rand.Next(3) == 0)
        {
          int index = Dust.NewDust(position - this.Size / 2f, this.width, this.height, 63, this.velocity.X, this.velocity.Y, 100, new Color(), 2f);
          Main.dust[index].noGravity = true;
          Main.dust[index].position -= this.velocity;
        }
      }
      if (this.type == 600)
      {
        if ((double) this.ai[0] == 0.0)
        {
          if ((double) this.ai[1] != 0.0)
            Main.PlaySound(SoundID.Item114, this.position);
          else
            Main.PlaySound(SoundID.Item115, this.position);
        }
        ++this.ai[0];
        if (Main.myPlayer == this.owner && (double) this.ai[0] == 1.0)
        {
          float num2 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
          Vector2 vector2_2 = vector2_1;
          Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
          if ((double) player1.gravDir == -1.0)
            vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
          Vector2 vector2_4 = Vector2.Normalize(vector2_3);
          if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
            vector2_4 = -Vector2.UnitY;
          Vector2 vector2_5 = vector2_4 * num2;
          if ((double) vector2_5.X != (double) this.velocity.X || (double) vector2_5.Y != (double) this.velocity.Y)
            this.netUpdate = true;
          this.velocity = vector2_5;
          int Type = 601;
          float num3 = 3f;
          Vector2 center = this.Center;
          Vector2 vector2_6 = Vector2.Normalize(this.velocity) * num3;
          if (float.IsNaN(vector2_6.X) || float.IsNaN(vector2_6.Y))
            vector2_6 = -Vector2.UnitY;
          Projectile.NewProjectile(center.X, center.Y, vector2_6.X, vector2_6.Y, Type, this.damage, this.knockBack, this.owner, this.ai[1], 0.0f);
        }
        if ((double) this.ai[0] >= 30.0)
          this.Kill();
      }
      if (this.type == 611)
      {
        if ((double) this.localAI[1] > 0.0)
          --this.localAI[1];
        this.alpha = this.alpha - 42;
        if (this.alpha < 0)
          this.alpha = 0;
        if ((double) this.localAI[0] == 0.0)
          this.localAI[0] = this.velocity.ToRotation();
        float num2 = (double) this.localAI[0].ToRotationVector2().X >= 0.0 ? 1f : -1f;
        if ((double) this.ai[1] <= 0.0)
          num2 *= -1f;
        Vector2 rotationVector2 = (num2 * (float) ((double) this.ai[0] / 30.0 * 6.28318548202515 - 1.57079637050629)).ToRotationVector2();
        rotationVector2.Y *= (float) Math.Sin((double) this.ai[1]);
        if ((double) this.ai[1] <= 0.0)
          rotationVector2.Y *= -1f;
        Vector2 vector2_2 = rotationVector2.RotatedBy((double) this.localAI[0], new Vector2());
        ++this.ai[0];
        if ((double) this.ai[0] < 30.0)
          this.velocity = this.velocity + 48f * vector2_2;
        else
          this.Kill();
      }
      if (this.type == 615)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.141593f;
        ++this.ai[0];
        int num2 = 0;
        if ((double) this.ai[0] >= 40.0)
          ++num2;
        if ((double) this.ai[0] >= 80.0)
          ++num2;
        if ((double) this.ai[0] >= 120.0)
          ++num2;
        int num3 = 5;
        int num4 = 0;
        --this.ai[1];
        bool flag = false;
        int num5 = -1;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[1] = (float) (num3 - num4 * num2);
          flag = true;
          if ((int) this.ai[0] / (num3 - num4 * num2) % 7 == 0)
            num5 = 0;
        }
        this.frameCounter = this.frameCounter + (1 + num2);
        if (this.frameCounter >= 4)
        {
          this.frameCounter = 0;
          this.frame = this.frame + 1;
          if (this.frame >= Main.projFrames[this.type])
            this.frame = 0;
        }
        if (this.soundDelay <= 0)
        {
          this.soundDelay = num3 - num4 * num2;
          if ((double) this.ai[0] != 1.0)
            Main.PlaySound(SoundID.Item36, this.position);
        }
        if (flag && Main.myPlayer == this.owner)
        {
          bool canShoot = player1.channel && player1.HasAmmo(player1.inventory[player1.selectedItem], true) && !player1.noItems && !player1.CCed;
          int shoot = 14;
          float speed = 14f;
          int weaponDamage = player1.GetWeaponDamage(player1.inventory[player1.selectedItem]);
          float knockBack = player1.inventory[player1.selectedItem].knockBack;
          if (canShoot)
          {
            player1.PickAmmo(player1.inventory[player1.selectedItem], ref shoot, ref speed, ref canShoot, ref weaponDamage, ref knockBack, false);
            float weaponKnockback = player1.GetWeaponKnockback(player1.inventory[player1.selectedItem], knockBack);
            float num6 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_2 = vector2_1;
            Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
            if ((double) player1.gravDir == -1.0)
              vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            Vector2 vector2_4 = Vector2.Normalize(vector2_3);
            if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
              vector2_4 = -Vector2.UnitY;
            Vector2 vector2_5 = (vector2_4 * num6).RotatedBy(Main.rand.NextDouble() * 0.130899697542191 - 0.0654498487710953, new Vector2());
            if ((double) vector2_5.X != (double) this.velocity.X || (double) vector2_5.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_5;
            for (int index = 0; index < 1; ++index)
            {
              Vector2 vector2_6 = (Vector2.Normalize(this.velocity) * speed).RotatedBy(Main.rand.NextDouble() * 0.196349546313286 - 0.0981747731566429, new Vector2());
              if (float.IsNaN(vector2_6.X) || float.IsNaN(vector2_6.Y))
                vector2_6 = -Vector2.UnitY;
              Projectile.NewProjectile(vector2_2.X, vector2_2.Y, vector2_6.X, vector2_6.Y, shoot, weaponDamage, weaponKnockback, this.owner, 0.0f, 0.0f);
            }
            if (num5 == 0)
            {
              shoot = 616;
              float num7 = 8f;
              for (int index = 0; index < 1; ++index)
              {
                Vector2 vector2_6 = (Vector2.Normalize(this.velocity) * num7).RotatedBy(Main.rand.NextDouble() * 0.392699092626572 - 0.196349546313286, new Vector2());
                if (float.IsNaN(vector2_6.X) || float.IsNaN(vector2_6.Y))
                  vector2_6 = -Vector2.UnitY;
                Projectile.NewProjectile(vector2_2.X, vector2_2.Y, vector2_6.X, vector2_6.Y, shoot, weaponDamage + 20, weaponKnockback * 1.25f, this.owner, 0.0f, 0.0f);
              }
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 630)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.141593f;
        ++this.ai[0];
        int num2 = 0;
        if ((double) this.ai[0] >= 40.0)
          ++num2;
        if ((double) this.ai[0] >= 80.0)
          ++num2;
        if ((double) this.ai[0] >= 120.0)
          ++num2;
        int num3 = 24;
        int num4 = 2;
        --this.ai[1];
        bool flag = false;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[1] = (float) (num3 - num4 * num2);
          flag = true;
          int num5 = (int) this.ai[0] / (num3 - num4 * num2);
        }
        bool canShoot = player1.channel && player1.HasAmmo(player1.inventory[player1.selectedItem], true) && !player1.noItems && !player1.CCed;
        if ((double) this.localAI[0] > 0.0)
          --this.localAI[0];
        if (this.soundDelay <= 0 & canShoot)
        {
          this.soundDelay = num3 - num4 * num2;
          if ((double) this.ai[0] != 1.0)
            Main.PlaySound(SoundID.Item5, this.position);
          this.localAI[0] = 12f;
        }
        player1.phantasmTime = 2;
        if (flag && Main.myPlayer == this.owner)
        {
          int shoot = 14;
          float speed = 14f;
          int weaponDamage = player1.GetWeaponDamage(player1.inventory[player1.selectedItem]);
          float knockBack = player1.inventory[player1.selectedItem].knockBack;
          if (canShoot)
          {
            player1.PickAmmo(player1.inventory[player1.selectedItem], ref shoot, ref speed, ref canShoot, ref weaponDamage, ref knockBack, false);
            float weaponKnockback = player1.GetWeaponKnockback(player1.inventory[player1.selectedItem], knockBack);
            float num5 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_2 = vector2_1;
            Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
            if ((double) player1.gravDir == -1.0)
              vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            Vector2 vector2_4 = Vector2.Normalize(vector2_3);
            if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
              vector2_4 = -Vector2.UnitY;
            Vector2 vector2_5 = vector2_4 * num5;
            if ((double) vector2_5.X != (double) this.velocity.X || (double) vector2_5.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_5 * 0.55f;
            for (int index1 = 0; index1 < 4; ++index1)
            {
              Vector2 vector2_6 = Vector2.Normalize(this.velocity) * speed * (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.800000011920929);
              if (float.IsNaN(vector2_6.X) || float.IsNaN(vector2_6.Y))
                vector2_6 = -Vector2.UnitY;
              Vector2 vector2_7 = vector2_2 + Utils.RandomVector2(Main.rand, -15f, 15f);
              int index2 = Projectile.NewProjectile(vector2_7.X, vector2_7.Y, vector2_6.X, vector2_6.Y, shoot, weaponDamage, weaponKnockback, this.owner, 0.0f, 0.0f);
              Main.projectile[index2].noDropItem = true;
            }
          }
          else
            this.Kill();
        }
      }
      if (this.type == 705)
      {
        num1 = 0.0f;
        if (this.spriteDirection == -1)
          num1 = 3.141593f;
        ++this.ai[0];
        int itemAnimationMax = player1.itemAnimationMax;
        --this.ai[1];
        bool flag = false;
        if ((double) this.ai[1] <= 0.0)
        {
          this.ai[1] = (float) itemAnimationMax;
          flag = true;
        }
        bool canShoot = player1.channel && player1.HasAmmo(player1.inventory[player1.selectedItem], true) && !player1.noItems && !player1.CCed;
        if ((double) this.localAI[0] > 0.0)
          --this.localAI[0];
        if (this.soundDelay <= 0 & canShoot)
        {
          this.soundDelay = itemAnimationMax;
          if ((double) this.ai[0] != 1.0)
            Main.PlaySound(SoundID.Item5, this.position);
          this.localAI[0] = 12f;
        }
        if (flag && Main.myPlayer == this.owner)
        {
          int shoot = 14;
          float speed = 12f;
          int weaponDamage = player1.GetWeaponDamage(player1.inventory[player1.selectedItem]);
          float knockBack = player1.inventory[player1.selectedItem].knockBack;
          int num2 = 2;
          float max = 1.5f;
          if (canShoot)
          {
            player1.PickAmmo(player1.inventory[player1.selectedItem], ref shoot, ref speed, ref canShoot, ref weaponDamage, ref knockBack, false);
            float weaponKnockback = player1.GetWeaponKnockback(player1.inventory[player1.selectedItem], knockBack);
            if (shoot == 1)
              shoot = 2;
            Player player2 = player1;
            int num3 = player2.phantomPhoneixCounter + 1;
            int num4 = num3;
            player2.phantomPhoneixCounter = num4;
            if (num3 >= 4)
            {
              player1.phantomPhoneixCounter = 0;
              num2 = 1;
              weaponDamage *= 2;
              max = 0.0f;
              this.ai[1] *= 1.5f;
              shoot = 706;
              speed = 16f;
            }
            float num5 = player1.inventory[player1.selectedItem].shootSpeed * this.scale;
            Vector2 vector2_2 = vector2_1;
            Vector2 vector2_3 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY) - vector2_2;
            if ((double) player1.gravDir == -1.0)
              vector2_3.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y - vector2_2.Y;
            Vector2 vector2_4 = Vector2.Normalize(vector2_3);
            if (float.IsNaN(vector2_4.X) || float.IsNaN(vector2_4.Y))
              vector2_4 = -Vector2.UnitY;
            Vector2 vector2_5 = vector2_4 * num5;
            if ((double) vector2_5.X != (double) this.velocity.X || (double) vector2_5.Y != (double) this.velocity.Y)
              this.netUpdate = true;
            this.velocity = vector2_5 * 0.55f;
            for (int index1 = 0; index1 < num2; ++index1)
            {
              Vector2 vector2_6 = Vector2.Normalize(this.velocity) * speed + Main.rand.NextVector2Square(-max, max);
              if (float.IsNaN(vector2_6.X) || float.IsNaN(vector2_6.Y))
                vector2_6 = -Vector2.UnitY;
              Vector2 vector2_7 = vector2_2;
              int index2 = Projectile.NewProjectile(vector2_7.X, vector2_7.Y, vector2_6.X, vector2_6.Y, shoot, weaponDamage, weaponKnockback, this.owner, 0.0f, 0.0f);
              Main.projectile[index2].noDropItem = true;
            }
          }
          else
            this.Kill();
        }
      }
      this.position = player1.RotatedRelativePoint(player1.MountedCenter, true) - this.Size / 2f;
      this.rotation = this.velocity.ToRotation() + num1;
      this.spriteDirection = this.direction;
      this.timeLeft = 2;
      player1.ChangeDir(this.direction);
      player1.heldProj = this.whoAmI;
      player1.itemTime = 2;
      player1.itemAnimation = 2;
      player1.itemRotation = (float) Math.Atan2((double) this.velocity.Y * (double) this.direction, (double) this.velocity.X * (double) this.direction);
      if (this.type == 460 || this.type == 611)
      {
        Vector2 vector2_2 = Main.OffsetsPlayerOnhand[player1.bodyFrame.Y / 56] * 2f;
        if (player1.direction != 1)
          vector2_2.X = (float) player1.bodyFrame.Width - vector2_2.X;
        if ((double) player1.gravDir != 1.0)
          vector2_2.Y = (float) player1.bodyFrame.Height - vector2_2.Y;
        Vector2 vector2_3 = vector2_2 - new Vector2((float) (player1.bodyFrame.Width - player1.width), (float) (player1.bodyFrame.Height - 42)) / 2f;
        this.Center = player1.RotatedRelativePoint(player1.position + vector2_3, true) - this.velocity;
      }
      if (this.type == 615)
        this.position.Y += player1.gravDir * 2f;
      if (this.type != 611 || this.alpha != 0)
        return;
      for (int index = 0; index < 2; ++index)
      {
        Dust dust = Main.dust[Dust.NewDust(this.position + this.velocity * 2f, this.width, this.height, 6, 0.0f, 0.0f, 100, Color.Transparent, 2f)];
        int num2 = 1;
        dust.noGravity = num2 != 0;
        Vector2 vector2_2 = dust.velocity * 2f;
        dust.velocity = vector2_2;
        Vector2 vector2_3 = dust.velocity + this.localAI[0].ToRotationVector2();
        dust.velocity = vector2_3;
        double num3 = 1.5;
        dust.fadeIn = (float) num3;
      }
      float num9 = 18f;
      for (int index = 0; (double) index < (double) num9; ++index)
      {
        if (Main.rand.Next(4) == 0)
        {
          Vector2 Position = this.position + this.velocity + this.velocity * ((float) index / num9);
          Dust dust = Main.dust[Dust.NewDust(Position, this.width, this.height, 6, 0.0f, 0.0f, 100, Color.Transparent, 1f)];
          int num2 = 1;
          dust.noGravity = num2 != 0;
          double num3 = 0.5;
          dust.fadeIn = (float) num3;
          Vector2 vector2_2 = dust.velocity + this.localAI[0].ToRotationVector2();
          dust.velocity = vector2_2;
          int num4 = 1;
          dust.noLight = num4 != 0;
        }
      }
    }

    private void AI_099_1()
    {
      this.timeLeft = 6;
      bool flag1 = true;
      float num1 = 250f;
      float num2 = 0.1f;
      float num3 = 15f;
      float num4 = 12f;
      float num5 = num1 * 0.5f;
      float num6 = num3 * 0.8f;
      float num7 = num4 * 1.5f;
      if (this.owner == Main.myPlayer)
      {
        bool flag2 = false;
        for (int index = 0; index < 1000; ++index)
        {
          if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].aiStyle == 99 && (Main.projectile[index].type < 556 || Main.projectile[index].type > 561))
            flag2 = true;
        }
        if (!flag2)
        {
          this.ai[0] = -1f;
          this.netUpdate = true;
        }
      }
      if (Main.player[this.owner].yoyoString)
        num5 += (float) ((double) num5 * 0.25 + 10.0);
      this.rotation = this.rotation + 0.5f;
      if (Main.player[this.owner].dead)
      {
        this.Kill();
      }
      else
      {
        if (!flag1)
        {
          Main.player[this.owner].heldProj = this.whoAmI;
          Main.player[this.owner].itemAnimation = 2;
          Main.player[this.owner].itemTime = 2;
          if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
          {
            Main.player[this.owner].ChangeDir(1);
            this.direction = 1;
          }
          else
          {
            Main.player[this.owner].ChangeDir(-1);
            this.direction = -1;
          }
        }
        if ((double) this.ai[0] == 0.0 || (double) this.ai[0] == 1.0)
        {
          if ((double) this.ai[0] == 1.0)
            num5 *= 0.75f;
          float num8 = num7 * 0.5f;
          bool flag2 = false;
          Vector2 vector2_1 = Main.player[this.owner].Center - this.Center;
          if ((double) vector2_1.Length() > (double) num5 * 0.9)
            flag2 = true;
          if ((double) vector2_1.Length() > (double) num5)
          {
            float num9 = vector2_1.Length() - num5;
            Vector2 vector2_2;
            vector2_2.X = vector2_1.Y;
            vector2_2.Y = vector2_1.X;
            vector2_1.Normalize();
            Vector2 vector2_3 = vector2_1 * num5;
            this.position = Main.player[this.owner].Center - vector2_3;
            this.position.X -= (float) (this.width / 2);
            this.position.Y -= (float) (this.height / 2);
            float num10 = this.velocity.Length();
            this.velocity.Normalize();
            if ((double) num9 > (double) num10 - 1.0)
              num9 = num10 - 1f;
            this.velocity = this.velocity * (num10 - num9);
            this.velocity.Length();
            Vector2 vector2_4 = new Vector2(this.Center.X, this.Center.Y);
            Vector2 vector2_5 = new Vector2(Main.player[this.owner].Center.X, Main.player[this.owner].Center.Y);
            if ((double) vector2_4.Y < (double) vector2_5.Y)
              vector2_2.Y = Math.Abs(vector2_2.Y);
            else if ((double) vector2_4.Y > (double) vector2_5.Y)
              vector2_2.Y = -Math.Abs(vector2_2.Y);
            if ((double) vector2_4.X < (double) vector2_5.X)
              vector2_2.X = Math.Abs(vector2_2.X);
            else if ((double) vector2_4.X > (double) vector2_5.X)
              vector2_2.X = -Math.Abs(vector2_2.X);
            vector2_2.Normalize();
            Vector2 vector2_6 = vector2_2 * this.velocity.Length();
            Vector2 vector2_7 = new Vector2(vector2_6.X, vector2_6.Y);
            if ((double) Math.Abs(this.velocity.X) > (double) Math.Abs(this.velocity.Y))
            {
              Vector2 velocity = this.velocity;
              velocity.Y += vector2_6.Y;
              velocity.Normalize();
              Vector2 vector2_8 = velocity * this.velocity.Length();
              if ((double) Math.Abs(vector2_6.X) < 0.1 || (double) Math.Abs(vector2_6.Y) < 0.1)
                this.velocity = vector2_8;
              else
                this.velocity = (vector2_8 + this.velocity * 2f) / 3f;
            }
            else
            {
              Vector2 velocity = this.velocity;
              velocity.X += vector2_6.X;
              velocity.Normalize();
              Vector2 vector2_8 = velocity * this.velocity.Length();
              if ((double) Math.Abs(vector2_6.X) < 0.2 || (double) Math.Abs(vector2_6.Y) < 0.2)
                this.velocity = vector2_8;
              else
                this.velocity = (vector2_8 + this.velocity * 2f) / 3f;
            }
          }
          if (Main.myPlayer == this.owner)
          {
            if (Main.player[this.owner].channel)
            {
              Vector2 vector2_2 = new Vector2((float) (Main.mouseX - Main.lastMouseX), (float) (Main.mouseY - Main.lastMouseY));
              if ((double) this.velocity.X != 0.0 || (double) this.velocity.Y != 0.0)
              {
                if (flag1)
                  vector2_2 *= -1f;
                if (flag2)
                {
                  if ((double) this.Center.X < (double) Main.player[this.owner].Center.X && (double) vector2_2.X < 0.0)
                    vector2_2.X = 0.0f;
                  if ((double) this.Center.X > (double) Main.player[this.owner].Center.X && (double) vector2_2.X > 0.0)
                    vector2_2.X = 0.0f;
                  if ((double) this.Center.Y < (double) Main.player[this.owner].Center.Y && (double) vector2_2.Y < 0.0)
                    vector2_2.Y = 0.0f;
                  if ((double) this.Center.Y > (double) Main.player[this.owner].Center.Y && (double) vector2_2.Y > 0.0)
                    vector2_2.Y = 0.0f;
                }
                this.velocity = this.velocity + vector2_2 * num2;
                this.netUpdate = true;
              }
            }
            else
            {
              this.ai[0] = 10f;
              this.netUpdate = true;
            }
          }
          if (flag1 || this.type == 562 || (this.type == 547 || this.type == 555) || (this.type == 564 || this.type == 552 || (this.type == 563 || this.type == 549)) || (this.type == 550 || this.type == 554 || (this.type == 553 || this.type == 603)))
          {
            float num9 = 800f;
            Vector2 vector2_2 = new Vector2();
            bool flag3 = false;
            if (this.type == 549)
              num9 = 200f;
            if (this.type == 554)
              num9 = 400f;
            if (this.type == 553)
              num9 = 250f;
            if (this.type == 603)
              num9 = 320f;
            for (int index = 0; index < 200; ++index)
            {
              if (Main.npc[index].CanBeChasedBy((object) this, false))
              {
                float num10 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
                float num11 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
                float num12 = Math.Abs(this.position.X + (float) (this.width / 2) - num10) + Math.Abs(this.position.Y + (float) (this.height / 2) - num11);
                if ((double) num12 < (double) num9 && (this.type != 563 || (double) num12 >= 200.0) && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height) && (double) (Main.npc[index].Center - Main.player[this.owner].Center).Length() < (double) num5 * 0.9)
                {
                  num9 = num12;
                  vector2_2.X = num10;
                  vector2_2.Y = num11;
                  flag3 = true;
                }
              }
            }
            if (flag3)
            {
              vector2_2 -= this.Center;
              vector2_2.Normalize();
              if (this.type == 563)
              {
                vector2_2 *= 4f;
                this.velocity = (this.velocity * 14f + vector2_2) / 15f;
              }
              else if (this.type == 553)
              {
                vector2_2 *= 5f;
                this.velocity = (this.velocity * 12f + vector2_2) / 13f;
              }
              else if (this.type == 603)
              {
                vector2_2 *= 16f;
                this.velocity = (this.velocity * 9f + vector2_2) / 10f;
              }
              else if (this.type == 554)
              {
                vector2_2 *= 8f;
                this.velocity = (this.velocity * 6f + vector2_2) / 7f;
              }
              else
              {
                vector2_2 *= 6f;
                this.velocity = (this.velocity * 7f + vector2_2) / 8f;
              }
            }
          }
          if ((double) this.velocity.Length() > (double) num6)
          {
            this.velocity.Normalize();
            this.velocity = this.velocity * num6;
          }
          if ((double) this.velocity.Length() >= (double) num8)
            return;
          this.velocity.Normalize();
          this.velocity = this.velocity * num8;
        }
        else
        {
          this.tileCollide = false;
          Vector2 vec = Main.player[this.owner].Center - this.Center;
          if ((double) vec.Length() < 40.0 || vec.HasNaNs())
          {
            this.Kill();
          }
          else
          {
            float num8 = num6 * 1.5f;
            if (this.type == 546)
              num8 *= 1.5f;
            if (this.type == 554)
              num8 *= 1.25f;
            if (this.type == 555)
              num8 *= 1.35f;
            if (this.type == 562)
              num8 *= 1.25f;
            float num9 = 12f;
            vec.Normalize();
            vec *= num8;
            this.velocity = (this.velocity * (num9 - 1f) + vec) / num9;
          }
        }
      }
    }

    private void AI_099_2()
    {
      bool flag1 = false;
      for (int index = 0; index < this.whoAmI; ++index)
      {
        if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == this.type)
          flag1 = true;
      }
      if (this.owner == Main.myPlayer)
      {
        ++this.localAI[0];
        if (flag1)
          this.localAI[0] += (float) Main.rand.Next(10, 31) * 0.1f;
        float num1 = this.localAI[0] / 60f / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed) / 2.0);
        float num2 = ProjectileID.Sets.YoyosLifeTimeMultiplier[this.type];
        if ((double) num2 != -1.0 && (double) num1 > (double) num2)
          this.ai[0] = -1f;
      }
      if (this.type == 603 && this.owner == Main.myPlayer)
      {
        ++this.localAI[1];
        if ((double) this.localAI[1] >= 6.0)
        {
          float num1 = 400f;
          Vector2 velocity = this.velocity;
          Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
          vector2_1.Normalize();
          Vector2 vector2_2 = vector2_1 * ((float) Main.rand.Next(10, 41) * 0.1f);
          if (Main.rand.Next(3) == 0)
            vector2_2 *= 2f;
          Vector2 vector2_3 = velocity * 0.25f + vector2_2;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, false))
            {
              float num2 = Main.npc[index].position.X + (float) (Main.npc[index].width / 2);
              float num3 = Main.npc[index].position.Y + (float) (Main.npc[index].height / 2);
              float num4 = Math.Abs(this.position.X + (float) (this.width / 2) - num2) + Math.Abs(this.position.Y + (float) (this.height / 2) - num3);
              if ((double) num4 < (double) num1 && Collision.CanHit(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
              {
                num1 = num4;
                vector2_3.X = num2;
                vector2_3.Y = num3;
                Vector2 vector2_4 = vector2_3 - this.Center;
                vector2_4.Normalize();
                vector2_3 = vector2_4 * 8f;
              }
            }
          }
          Vector2 vector2_5 = vector2_3 * 0.8f;
          Projectile.NewProjectile(this.Center.X - vector2_5.X, this.Center.Y - vector2_5.Y, vector2_5.X, vector2_5.Y, 604, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
          this.localAI[1] = 0.0f;
        }
      }
      bool flag2 = false;
      if (this.type >= 556 && this.type <= 561)
        flag2 = true;
      if (Main.player[this.owner].dead)
      {
        this.Kill();
      }
      else
      {
        if (!flag2 && !flag1)
        {
          Main.player[this.owner].heldProj = this.whoAmI;
          Main.player[this.owner].itemAnimation = 2;
          Main.player[this.owner].itemTime = 2;
          if ((double) this.position.X + (double) (this.width / 2) > (double) Main.player[this.owner].position.X + (double) (Main.player[this.owner].width / 2))
          {
            Main.player[this.owner].ChangeDir(1);
            this.direction = 1;
          }
          else
          {
            Main.player[this.owner].ChangeDir(-1);
            this.direction = -1;
          }
        }
        if (this.velocity.HasNaNs())
          this.Kill();
        this.timeLeft = 6;
        float num1 = ProjectileID.Sets.YoyosMaximumRange[this.type];
        float num2 = ProjectileID.Sets.YoyosTopSpeed[this.type];
        if (this.type == 545)
        {
          if (Main.rand.Next(6) == 0)
          {
            int index = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index].noGravity = true;
          }
        }
        else if (this.type == 553 && Main.rand.Next(2) == 0)
        {
          int index = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index].noGravity = true;
          Main.dust[index].scale = 1.6f;
        }
        if (Main.player[this.owner].yoyoString)
          num1 = (float) ((double) num1 * 1.25 + 30.0);
        float num3 = num1 / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed * 3.0) / 4.0);
        float num4 = num2 / (float) ((1.0 + (double) Main.player[this.owner].meleeSpeed * 3.0) / 4.0);
        float num5 = (float) (14.0 - (double) num4 / 2.0);
        float num6 = (float) (5.0 + (double) num4 / 2.0);
        if (flag1)
          num6 += 20f;
        if ((double) this.ai[0] >= 0.0)
        {
          if ((double) this.velocity.Length() > (double) num4)
            this.velocity = this.velocity * 0.98f;
          bool flag3 = false;
          bool flag4 = false;
          Vector2 vector2_1 = Main.player[this.owner].Center - this.Center;
          if ((double) vector2_1.Length() > (double) num3)
          {
            flag3 = true;
            if ((double) vector2_1.Length() > (double) num3 * 1.3)
              flag4 = true;
          }
          if (this.owner == Main.myPlayer)
          {
            if (!Main.player[this.owner].channel || Main.player[this.owner].stoned || Main.player[this.owner].frozen)
            {
              this.ai[0] = -1f;
              this.ai[1] = 0.0f;
              this.netUpdate = true;
            }
            else
            {
              Vector2 vector2_2 = Main.ReverseGravitySupport(Main.MouseScreen, 0.0f) + Main.screenPosition;
              float x = vector2_2.X;
              float y = vector2_2.Y;
              Vector2 vector2_3 = new Vector2(x, y) - Main.player[this.owner].Center;
              if ((double) vector2_3.Length() > (double) num3)
              {
                vector2_3.Normalize();
                Vector2 vector2_4 = vector2_3 * num3;
                Vector2 vector2_5 = Main.player[this.owner].Center + vector2_4;
                x = vector2_5.X;
                y = vector2_5.Y;
              }
              if ((double) this.ai[0] != (double) x || (double) this.ai[1] != (double) y)
              {
                Vector2 vector2_4 = new Vector2(x, y) - Main.player[this.owner].Center;
                if ((double) vector2_4.Length() > (double) num3 - 1.0)
                {
                  vector2_4.Normalize();
                  vector2_4 *= num3 - 1f;
                  Vector2 vector2_5 = Main.player[this.owner].Center + vector2_4;
                  x = vector2_5.X;
                  y = vector2_5.Y;
                }
                this.ai[0] = x;
                this.ai[1] = y;
                this.netUpdate = true;
              }
            }
          }
          if (flag4 && this.owner == Main.myPlayer)
          {
            this.ai[0] = -1f;
            this.netUpdate = true;
          }
          if ((double) this.ai[0] >= 0.0)
          {
            if (flag3)
            {
              num5 /= 2f;
              num4 *= 2f;
              if ((double) this.Center.X > (double) Main.player[this.owner].Center.X && (double) this.velocity.X > 0.0)
                this.velocity.X *= 0.5f;
              if ((double) this.Center.Y > (double) Main.player[this.owner].Center.Y && (double) this.velocity.Y > 0.0)
                this.velocity.Y *= 0.5f;
              if ((double) this.Center.X < (double) Main.player[this.owner].Center.X && (double) this.velocity.X > 0.0)
                this.velocity.X *= 0.5f;
              if ((double) this.Center.Y < (double) Main.player[this.owner].Center.Y && (double) this.velocity.Y > 0.0)
                this.velocity.Y *= 0.5f;
            }
            Vector2 vector2_2 = new Vector2(this.ai[0], this.ai[1]) - this.Center;
            double num7 = (double) this.velocity.Length();
            float num8 = vector2_2.Length();
            if ((double) num8 > (double) num6)
            {
              vector2_2.Normalize();
              float num9 = (double) num8 > (double) num4 * 2.0 ? num4 : num8 / 2f;
              vector2_2 *= num9;
              this.velocity = (this.velocity * (num5 - 1f) + vector2_2) / num5;
            }
            else if (flag1)
            {
              if ((double) this.velocity.Length() < (double) num4 * 0.6)
              {
                vector2_2 = this.velocity;
                vector2_2.Normalize();
                vector2_2 *= num4 * 0.6f;
                this.velocity = (this.velocity * (num5 - 1f) + vector2_2) / num5;
              }
            }
            else
              this.velocity = this.velocity * 0.8f;
            if (flag1 && !flag3 && (double) this.velocity.Length() < (double) num4 * 0.6)
            {
              this.velocity.Normalize();
              this.velocity = this.velocity * (num4 * 0.6f);
            }
          }
        }
        else
        {
          float num7 = (float) (int) ((double) num5 * 0.8);
          float num8 = num4 * 1.5f;
          this.tileCollide = false;
          Vector2 vector2 = Main.player[this.owner].position - this.Center;
          float num9 = vector2.Length();
          if ((double) num9 < (double) num8 + 10.0 || (double) num9 == 0.0)
          {
            this.Kill();
          }
          else
          {
            vector2.Normalize();
            vector2 *= num8;
            this.velocity = (this.velocity * (num7 - 1f) + vector2) / num7;
          }
        }
        this.rotation = this.rotation + 0.45f;
      }
    }

    private void AI_130_FlameBurstTower()
    {
      float shot_range = 900f;
      float angleRatioMax = 1f;
      Vector2 vector2_1 = this.Center;
      int Type = 664;
      int num1 = 12;
      float num2 = 12f;
      int num3 = 1;
      int num4 = 6;
      int num5 = 4;
      int num6 = 80;
      switch (this.type)
      {
        case 663:
          Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f));
          Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f));
          vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -40f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @this.localAI[0];
          // ISSUE: explicit reference operation
          float num7 = ^local1 + 1f;
          double num8 = (double) num7;
          // ISSUE: explicit reference operation
          ^local1 = (float) num8;
          if ((double) num7 >= 300.0)
            this.localAI[0] = 0.0f;
          Microsoft.Xna.Framework.Rectangle r1 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16, this.width / 4 * 3, 6);
          if (this.direction == 1)
            r1.X -= this.width / 4;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Dust.NewDustDirect(r1.TopLeft() + new Vector2(-2f, -2f), r1.Width + 4, r1.Height + 4, 270, (float) (-this.direction * 2), -2f, 200, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1f);
              dust.fadeIn = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.600000023841858);
              dust.scale = 0.4f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity = Vector2.Zero;
              dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
            }
          }
          r1 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4, 10);
          if (this.direction == -1)
            r1.X -= r1.Width;
          r1.X += this.direction * 4;
          r1.Y -= this.height - 10;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(5) == 0)
            {
              Dust dust = Dust.NewDustDirect(r1.TopLeft(), r1.Width, r1.Height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
              double num9 = 1.0;
              dust.fadeIn = (float) num9;
              double num10 = 1.0;
              dust.scale = (float) num10;
              int num11 = 1;
              dust.noGravity = num11 != 0;
              int num12 = 1;
              dust.noLight = num12 != 0;
              Vector2 vector2_2 = dust.velocity * 2f;
              dust.velocity = vector2_2;
            }
          }
          break;
        case 665:
          Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
          Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.2f);
          num6 = 70;
          num2 += 3f;
          num4 = 8;
          Type = 666;
          vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -44f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @this.localAI[0];
          // ISSUE: explicit reference operation
          float num13 = ^local2 + 1f;
          double num14 = (double) num13;
          // ISSUE: explicit reference operation
          ^local2 = (float) num14;
          if ((double) num13 >= 300.0)
            this.localAI[0] = 0.0f;
          Microsoft.Xna.Framework.Rectangle r2 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16, this.width / 4 * 2, 6);
          if (this.direction == 1)
            r2.X -= this.width / 4;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Dust.NewDustDirect(r2.TopLeft() + new Vector2(-2f, -2f), r2.Width + 4, r2.Height + 4, 270, (float) (-this.direction * 2), -2f, 200, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1f);
              dust.fadeIn = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.600000023841858);
              dust.scale = 0.4f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity = Vector2.Zero;
              dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
            }
          }
          r2 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4, 10);
          if (this.direction == -1)
            r2.X -= r2.Width;
          r2.X += this.direction * 4;
          r2.Y -= this.height - 10;
          for (int index = 0; index < 2; ++index)
          {
            if (Main.rand.Next(5) == 0)
            {
              Dust dust = Dust.NewDustDirect(r2.TopLeft(), r2.Width, r2.Height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
              double num9 = 1.0;
              dust.fadeIn = (float) num9;
              double num10 = 1.0;
              dust.scale = (float) num10;
              int num11 = 1;
              dust.noGravity = num11 != 0;
              int num12 = 1;
              dust.noLight = num12 != 0;
              Vector2 vector2_2 = dust.velocity * 2f;
              dust.velocity = vector2_2;
            }
          }
          break;
        case 667:
          Lighting.AddLight(this.Center, new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
          Lighting.AddLight(this.Bottom + new Vector2(0.0f, -10f), new Vector3(0.4f, 0.2f, 0.1f) * 1.5f);
          num6 = 60;
          num2 += 6f;
          num4 = 8;
          Type = 668;
          vector2_1 = this.Bottom + new Vector2((float) (this.direction * 6), -46f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @this.localAI[0];
          // ISSUE: explicit reference operation
          float num15 = ^local3 + 1f;
          double num16 = (double) num15;
          // ISSUE: explicit reference operation
          ^local3 = (float) num16;
          if ((double) num15 >= 300.0)
            this.localAI[0] = 0.0f;
          Microsoft.Xna.Framework.Rectangle r3 = new Microsoft.Xna.Framework.Rectangle((int) this.position.X + this.width / 4, (int) this.position.Y + this.height - 16, this.width / 4 * 2, 6);
          if (this.direction == 1)
            r3.X -= this.width / 4;
          for (int index = 0; index < 1; ++index)
          {
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Dust.NewDustDirect(r3.TopLeft() + new Vector2(-2f, -2f), r3.Width + 4, r3.Height + 4, 270, (float) (-this.direction * 2), -2f, 200, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1f);
              dust.fadeIn = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.600000023841858);
              dust.scale = 0.4f;
              dust.noGravity = true;
              dust.noLight = true;
              dust.velocity = Vector2.Zero;
              dust.velocity.X = (float) -this.direction * Main.rand.NextFloat() * dust.fadeIn;
            }
          }
          r3 = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X, (int) this.Bottom.Y, this.width / 4, 10);
          if (this.direction == -1)
            r3.X -= r3.Width;
          r3.X += this.direction * 4;
          r3.Y -= this.height - 10;
          for (int index = 0; index < 3; ++index)
          {
            if (Main.rand.Next(5) == 0)
            {
              Dust dust = Dust.NewDustDirect(r3.TopLeft(), r3.Width, r3.Height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
              double num9 = 1.10000002384186;
              dust.fadeIn = (float) num9;
              double num10 = 1.0;
              dust.scale = (float) num10;
              int num11 = 1;
              dust.noGravity = num11 != 0;
              int num12 = 1;
              dust.noLight = num12 != 0;
              Vector2 vector2_2 = dust.velocity * 2.4f;
              dust.velocity = vector2_2;
            }
          }
          break;
      }
      if (Main.player[this.owner].setApprenticeT2)
      {
        angleRatioMax = 0.1f;
        shot_range *= 1.5f;
        num2 *= 1.4f;
      }
      if ((double) this.ai[0] == 0.0)
      {
        this.direction = this.spriteDirection = Main.player[this.owner].direction;
        this.ai[0] = 1f;
        this.ai[1] = 0.0f;
        this.netUpdate = true;
      }
      if ((double) this.ai[0] == 1.0)
      {
        this.frame = 0;
        bool flag = false;
        if ((double) this.ai[1] > 0.0)
          --this.ai[1];
        else
          flag = true;
        if (flag && this.owner == Main.myPlayer)
        {
          int target = this.AI_130_FlameBurstTower_FindTarget(shot_range, angleRatioMax, vector2_1, true);
          if (target != -1)
          {
            this.direction = Math.Sign(this.DirectionTo(Main.npc[target].Center).X);
            this.ai[0] = 2f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        this.frame = num3 + (int) ((double) this.ai[1] / (double) num5);
        if ((double) this.ai[1] == (double) num1)
        {
          Vector2 vector2_2 = new Vector2((float) this.direction, 0.0f);
          int target = this.AI_130_FlameBurstTower_FindTarget(shot_range, angleRatioMax, vector2_1, false);
          if (target != -1)
            vector2_2 = (Main.npc[target].Center - vector2_1).SafeNormalize(Vector2.UnitX * (float) this.direction);
          Vector2 velocity = vector2_2 * num2;
          if (this.owner == Main.myPlayer)
            Projectile.NewProjectile(vector2_1, velocity, Type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local4 = @this.ai[1];
        // ISSUE: explicit reference operation
        float num9 = ^local4 + 1f;
        double num10 = (double) num9;
        // ISSUE: explicit reference operation
        ^local4 = (float) num10;
        if ((double) num9 >= (double) (num4 * num5))
        {
          this.ai[0] = 1f;
          this.ai[1] = (float) num6;
        }
      }
      this.spriteDirection = this.direction;
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    private int AI_130_FlameBurstTower_FindTarget(float shot_range, float angleRatioMax, Vector2 shootingSpot, bool canChangeDirection = true)
    {
      int index1 = -1;
      NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
      if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
      {
        for (int index2 = 0; index2 < 1; ++index2)
        {
          if (minionAttackTargetNpc.CanBeChasedBy((object) this, false))
          {
            float num = Vector2.Distance(shootingSpot, minionAttackTargetNpc.Center);
            if ((double) num <= (double) shot_range)
            {
              Vector2 vector2 = (minionAttackTargetNpc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
              if ((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) angleRatioMax && (canChangeDirection || (double) this.direction * (double) vector2.X >= 0.0) && ((index1 == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, minionAttackTargetNpc.Center, 0, 0)))
                index1 = minionAttackTargetNpc.whoAmI;
            }
          }
        }
        if (index1 != -1)
          return index1;
      }
      for (int index2 = 0; index2 < 200; ++index2)
      {
        NPC npc = Main.npc[index2];
        if (npc.CanBeChasedBy((object) this, false))
        {
          float num = Vector2.Distance(shootingSpot, npc.Center);
          if ((double) num <= (double) shot_range)
          {
            Vector2 vector2 = (npc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
            if ((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) angleRatioMax && (canChangeDirection || (double) this.direction * (double) vector2.X >= 0.0) && ((index1 == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, npc.Center, 0, 0)))
              index1 = index2;
          }
        }
      }
      return index1;
    }

    private int AI_134_Ballista_FindTarget(float shot_range, float deadBottomAngle, Vector2 shootingSpot)
    {
      int index1 = -1;
      NPC minionAttackTargetNpc = this.OwnerMinionAttackTargetNPC;
      if (minionAttackTargetNpc != null && minionAttackTargetNpc.CanBeChasedBy((object) this, false))
      {
        for (int index2 = 0; index2 < 1; ++index2)
        {
          if (minionAttackTargetNpc.CanBeChasedBy((object) this, true))
          {
            float num = Vector2.Distance(shootingSpot, minionAttackTargetNpc.Center);
            if ((double) num <= (double) shot_range)
            {
              Vector2 vector2 = (minionAttackTargetNpc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
              if (((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) deadBottomAngle || (double) vector2.Y <= 0.0) && (index1 == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, minionAttackTargetNpc.Center, 0, 0))
                index1 = minionAttackTargetNpc.whoAmI;
            }
          }
        }
        if (index1 != -1)
          return index1;
      }
      for (int index2 = 0; index2 < 200; ++index2)
      {
        NPC npc = Main.npc[index2];
        if (npc.CanBeChasedBy((object) this, true))
        {
          float num = Vector2.Distance(shootingSpot, npc.Center);
          if ((double) num <= (double) shot_range)
          {
            Vector2 vector2 = (npc.Center - shootingSpot).SafeNormalize(Vector2.UnitY);
            if (((double) Math.Abs(vector2.X) >= (double) Math.Abs(vector2.Y) * (double) deadBottomAngle || (double) vector2.Y <= 0.0) && (index1 == -1 || (double) num < (double) Vector2.Distance(shootingSpot, Main.npc[index1].Center)) && Collision.CanHitLine(shootingSpot, 0, 0, npc.Center, 0, 0))
              index1 = index2;
          }
        }
      }
      return index1;
    }

    private void AI_131_FlameBurstShot()
    {
      if (this.type != 664 && this.type != 666 && this.type != 668)
        return;
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_FlameburstTowerShot, this.Center);
      }
      if (this.alpha > 0)
      {
        this.alpha = this.alpha - 25;
        if (this.alpha < 0)
          this.alpha = 0;
      }
      int num = 1;
      if (this.type == 666)
        num = 2;
      if (this.type == 668)
        num = 3;
      for (int index = 0; index < num; ++index)
      {
        if (Main.rand.Next(2) != 0)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, this.velocity.X * 0.2f, this.velocity.Y * 0.2f, 100, new Color(), 2f);
          dust.noGravity = true;
          dust.velocity *= 0.3f;
          if (Main.rand.Next(1) == 0)
          {
            dust.velocity.Y += (float) Math.Sign(dust.velocity.Y) * 1.2f;
            dust.fadeIn += 0.5f;
          }
        }
      }
      this.rotation = this.velocity.ToRotation() + 1.570796f;
    }

    private void AI_134_Ballista()
    {
      float shot_range = 900f;
      float deadBottomAngle = 0.75f;
      Vector2 center = this.Center;
      int Type = 680;
      float num1 = 16f;
      int num2 = 1;
      int num3 = 5;
      int num4 = 5;
      int num5 = 180;
      if (Main.player[this.owner].setSquireT2)
        num1 = 21f;
      if (Main.player[this.owner].setSquireT3)
        num5 = 100;
      if (Main.player[this.owner].ballistaPanic)
        num5 = 60;
      if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3)
        num5 = 30;
      int num6 = num4;
      if (this.type == 677)
        center.Y -= 4f;
      if ((double) this.ai[0] == 0.0)
      {
        this.direction = this.spriteDirection = Main.player[this.owner].direction;
        this.ai[0] = 1f;
        this.ai[1] = 0.0f;
        this.netUpdate = true;
        if (this.direction == -1)
          this.rotation = 3.141593f;
      }
      if ((double) this.ai[0] == 1.0)
      {
        this.frame = 0;
        bool flag = false;
        if (Main.player[this.owner].ballistaPanic && (double) this.ai[1] > 60.0)
          this.ai[1] = 60f;
        if (Main.player[this.owner].ballistaPanic && Main.player[this.owner].setSquireT3 && (double) this.ai[1] > 30.0)
          this.ai[1] = 30f;
        if ((double) this.ai[1] > 0.0)
          --this.ai[1];
        else
          flag = true;
        int target = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
        if (target != -1)
        {
          Vector2 v = (Main.npc[target].Center - center).SafeNormalize(Vector2.UnitY);
          this.rotation = this.rotation.AngleLerp(v.ToRotation(), 0.08f);
          if ((double) this.rotation > 1.57079637050629 || (double) this.rotation < -1.57079637050629)
            this.direction = -1;
          else
            this.direction = 1;
          if (flag && this.owner == Main.myPlayer)
          {
            this.direction = Math.Sign(v.X);
            this.ai[0] = 2f;
            this.ai[1] = 0.0f;
            this.netUpdate = true;
          }
        }
        else
        {
          float targetAngle = 0.0f;
          if (this.direction == -1)
            targetAngle = 3.141593f;
          this.rotation = this.rotation.AngleLerp(targetAngle, 0.05f);
        }
      }
      else if ((double) this.ai[0] == 2.0)
      {
        this.frame = num2 + (int) ((double) this.ai[1] / (double) num4);
        if ((double) this.ai[1] == (double) num6)
        {
          Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BallistaTowerShot, this.Center);
          Vector2 v = new Vector2((float) this.direction, 0.0f);
          int target = this.AI_134_Ballista_FindTarget(shot_range, deadBottomAngle, center);
          if (target != -1)
            v = (Main.npc[target].Center - center).SafeNormalize(Vector2.UnitX * (float) this.direction);
          this.rotation = v.ToRotation();
          if ((double) this.rotation > 1.57079637050629 || (double) this.rotation < -1.57079637050629)
            this.direction = -1;
          else
            this.direction = 1;
          Vector2 velocity = v * num1;
          if (this.owner == Main.myPlayer)
            Projectile.NewProjectile(center, velocity, Type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
        }
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @this.ai[1];
        // ISSUE: explicit reference operation
        float num7 = ^local + 1f;
        double num8 = (double) num7;
        // ISSUE: explicit reference operation
        ^local = (float) num8;
        if ((double) num7 >= (double) (num3 * num4))
        {
          this.ai[0] = 1f;
          this.ai[1] = (float) num5;
        }
      }
      this.spriteDirection = this.direction;
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    private void AI_135_OgreStomp()
    {
      ++this.ai[0];
      if ((double) this.ai[0] > 9.0)
      {
        this.Kill();
      }
      else
      {
        this.velocity = Vector2.Zero;
        this.position = this.Center;
        this.Size = new Vector2(16f, 16f) * MathHelper.Lerp(5f, 40f, Utils.InverseLerp(0.0f, 9f, this.ai[0], false));
        this.Center = this.position;
        Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
        Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
        int num1 = tileCoordinates1.X / 2 + tileCoordinates2.X / 2;
        int num2 = this.width / 2;
        if ((int) this.ai[0] % 3 != 0)
          return;
        int num3 = (int) this.ai[0] / 3;
        for (int x = tileCoordinates1.X; x <= tileCoordinates2.X; ++x)
        {
          for (int y = tileCoordinates1.Y; y <= tileCoordinates2.Y; ++y)
          {
            if ((double) Vector2.Distance(this.Center, new Vector2((float) (x * 16), (float) (y * 16))) <= (double) num2)
            {
              Tile tileSafely1 = Framing.GetTileSafely(x, y);
              if (tileSafely1.active() && Main.tileSolid[(int) tileSafely1.type] && (!Main.tileSolidTop[(int) tileSafely1.type] && !Main.tileFrameImportant[(int) tileSafely1.type]))
              {
                Tile tileSafely2 = Framing.GetTileSafely(x, y - 1);
                if (!tileSafely2.active() || !Main.tileSolid[(int) tileSafely2.type] || Main.tileSolidTop[(int) tileSafely2.type])
                {
                  int tileDustAmount = WorldGen.KillTile_GetTileDustAmount(true, tileSafely1);
                  for (int index = 0; index < tileDustAmount; ++index)
                  {
                    Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                    dust.velocity.Y -= (float) (3.0 + (double) num3 * 1.5);
                    dust.velocity.Y *= Main.rand.NextFloat();
                    double num4 = (double) dust.scale + (double) num3 * 0.0299999993294477;
                    dust.scale = (float) num4;
                  }
                  if (num3 >= 2)
                  {
                    for (int index = 0; index < tileDustAmount - 1; ++index)
                    {
                      Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                      dust.velocity.Y -= 1f + (float) num3;
                      dust.velocity.Y *= Main.rand.NextFloat();
                    }
                  }
                  if (tileDustAmount > 0 && Main.rand.Next(3) != 0)
                  {
                    float num4 = (float) Math.Abs(num1 - x) / 20f;
                    Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 61 + Main.rand.Next(3), (float) (1.0 - (double) num3 * 0.150000005960464 + (double) num4 * 0.5));
                    gore.velocity.Y -= (float) (0.100000001490116 + (double) num3 * 0.5 + (double) num4 * (double) num3 * 1.0);
                    gore.velocity.Y *= Main.rand.NextFloat();
                    Vector2 vector2 = new Vector2((float) (x * 16 + 20), (float) (y * 16 + 20));
                    gore.position = vector2;
                  }
                }
              }
            }
          }
        }
      }
    }

    private void AI_136_BetsyBreath()
    {
      if ((double) this.ai[1] < 0.0 || (double) this.ai[1] > 200.0)
      {
        this.Kill();
      }
      else
      {
        NPC npc = Main.npc[(int) this.ai[1]];
        float num1 = -8f;
        this.Center = npc.Center + new Vector2((110f + num1) * (float) npc.spriteDirection, 30f).RotatedBy((double) npc.rotation, new Vector2());
        this.rotation = npc.DirectionTo(this.Center).ToRotation();
        DelegateMethods.v3_1 = new Vector3(1.2f, 1f, 0.3f);
        float num2 = this.ai[0] / 40f;
        if ((double) num2 > 1.0)
          num2 = 1f;
        float num3 = (float) (((double) this.ai[0] - 38.0) / 40.0);
        if ((double) num3 < 0.0)
          num3 = 0.0f;
        Utils.PlotTileLine(this.Center + this.rotation.ToRotationVector2() * 400f * num3, this.Center + this.rotation.ToRotationVector2() * 400f * num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
        Utils.PlotTileLine(this.Center + this.rotation.ToRotationVector2().RotatedBy(0.196349546313286, new Vector2()) * 400f * num3, this.Center + this.rotation.ToRotationVector2().RotatedBy(0.196349546313286, new Vector2()) * 400f * num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
        Utils.PlotTileLine(this.Center + this.rotation.ToRotationVector2().RotatedBy(-0.196349546313286, new Vector2()) * 400f * num3, this.Center + this.rotation.ToRotationVector2().RotatedBy(-0.196349546313286, new Vector2()) * 400f * num2, 16f, new Utils.PerLinePoint(DelegateMethods.CastLight));
        if ((double) num3 == 0.0 && (double) num2 > 0.100000001490116)
        {
          for (int index = 0; index < 3; ++index)
          {
            Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
            double num4 = 1.5;
            dust.fadeIn = (float) num4;
            Vector2 vector2_1 = this.rotation.ToRotationVector2().RotatedBy((double) Main.rand.NextFloatDirection() * 0.261799395084381, new Vector2()) * (float) (0.5 + (double) Main.rand.NextFloat() * 2.5) * 15f;
            dust.velocity = vector2_1;
            Vector2 vector2_2 = dust.velocity + npc.velocity * 2f;
            dust.velocity = vector2_2;
            int num5 = 1;
            dust.noLight = num5 != 0;
            int num6 = 1;
            dust.noGravity = num6 != 0;
            int num7 = 200;
            dust.alpha = num7;
          }
        }
        if (Main.rand.Next(5) == 0 && (double) this.ai[0] >= 15.0)
        {
          Gore gore = Gore.NewGoreDirect(this.Center + this.rotation.ToRotationVector2() * 300f - Utils.RandomVector2(Main.rand, -20f, 20f), Vector2.Zero, 61 + Main.rand.Next(3), 0.5f);
          Vector2 vector2_1 = gore.velocity * 0.3f;
          gore.velocity = vector2_1;
          Vector2 vector2_2 = gore.velocity + this.rotation.ToRotationVector2() * 4f;
          gore.velocity = vector2_2;
        }
        for (int index = 0; index < 1; ++index)
        {
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1f);
          double num4 = 1.5;
          dust.fadeIn = (float) num4;
          double num5 = 0.400000005960464;
          dust.scale = (float) num5;
          Vector2 vector2_1 = this.rotation.ToRotationVector2().RotatedBy((double) Main.rand.NextFloatDirection() * 0.261799395084381, new Vector2()) * (float) (0.5 + (double) Main.rand.NextFloat() * 2.5) * 15f;
          dust.velocity = vector2_1;
          Vector2 vector2_2 = dust.velocity + npc.velocity * 2f;
          dust.velocity = vector2_2;
          Vector2 vector2_3 = dust.velocity * 0.3f;
          dust.velocity = vector2_3;
          int num6 = 1;
          dust.noLight = num6 != 0;
          int num7 = 1;
          dust.noGravity = num7 != 0;
          float amount = Main.rand.NextFloat();
          Vector2 vector2_4 = Vector2.Lerp(this.Center + this.rotation.ToRotationVector2() * 400f * num3, this.Center + this.rotation.ToRotationVector2() * 400f * num2, amount);
          dust.position = vector2_4;
          Vector2 vector2_5 = dust.position + this.rotation.ToRotationVector2().RotatedBy(1.57079637050629, new Vector2()) * (float) (20.0 + 100.0 * ((double) amount - 0.5));
          dust.position = vector2_5;
        }
        this.frameCounter = this.frameCounter + 1;
        ++this.ai[0];
        if ((double) this.ai[0] < 78.0)
          return;
        this.Kill();
      }
    }

    private void AI_137_LightningAura()
    {
      int maxDistance = 10;
      int num1 = 999;
      int num2 = 30;
      int num3 = 40;
      int num4 = 4;
      this.knockBack = 0.0f;
      if (Main.player[this.owner].setMonkT2)
        num2 -= 5;
      if (Main.player[this.owner].setMonkT3)
      {
        maxDistance = 14;
        num4 = 8;
      }
      ++this.ai[0];
      if ((double) this.ai[0] >= (double) num2)
        this.ai[0] = 0.0f;
      if ((double) this.ai[0] == 0.0)
      {
        bool flag = false;
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.CanBeChasedBy((object) this, false) && (double) npc.Hitbox.Distance(this.Center) < (double) (this.width / 2) && this.Colliding(this.Hitbox, npc.Hitbox))
          {
            flag = true;
            break;
          }
        }
        if (flag)
          Main.PlayTrackedSound((SoundStyle) SoundID.DD2_LightningAuraZap, this.Center);
      }
      if ((double) this.localAI[0] == 0.0)
      {
        this.localAI[0] = 1f;
        this.velocity = Vector2.Zero;
        Point tileCoordinates = this.Center.ToTileCoordinates();
        Point result1;
        if (!WorldUtils.Find(tileCoordinates, Searches.Chain((GenSearch) new Searches.Down(500), (GenCondition) new Conditions.IsSolid()), out result1))
        {
          this.position.Y += 16f;
          return;
        }
        Point result2;
        if (!WorldUtils.Find(new Point(result1.X, result1.Y - 1), Searches.Chain((GenSearch) new Searches.Up(maxDistance), (GenCondition) new Conditions.IsSolid()), out result2))
          result2 = new Point(tileCoordinates.X, tileCoordinates.Y - maxDistance - 1);
        Vector2 worldCoordinates1 = result1.ToWorldCoordinates(8f, 0.0f);
        Vector2 worldCoordinates2 = result2.ToWorldCoordinates(8f, 0.0f);
        this.Size = new Vector2(1f, worldCoordinates1.Y - worldCoordinates2.Y);
        if (this.height > maxDistance * 16)
          this.height = maxDistance * 16;
        if (this.height < num4 * 16)
          this.height = num4 * 16;
        this.height = this.height * 2;
        this.width = (int) ((double) this.height * 1.0);
        if (this.width > num1)
          this.width = num1;
        this.Center = worldCoordinates1;
      }
      int num5 = this.frameCounter + 1;
      this.frameCounter = num5;
      if (num5 >= 8)
      {
        this.frameCounter = 0;
        int num6 = this.frame + 1;
        this.frame = num6;
        if (num6 >= Main.projFrames[this.type])
          this.frame = 0;
      }
      DelegateMethods.v3_1 = new Vector3(0.2f, 0.7f, 1f);
      Utils.PlotTileLine(this.Center + Vector2.UnitX * -40f, this.Center + Vector2.UnitX * 40f, 80f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
      Vector2 vector2_1 = new Vector2(this.Top.X, this.position.Y + (float) num3);
      for (int index = 0; index < 4; ++index)
      {
        if (Main.rand.Next(6) == 0)
        {
          Vector2 vector2_2 = Main.rand.NextVector2Unit(0.0f, 6.283185f);
          if ((double) Math.Abs(vector2_2.X) >= 0.119999997317791)
          {
            Vector2 vector2_3 = this.Center + vector2_2 * new Vector2((float) ((this.height - num3) / 2));
            if (!WorldGen.SolidTile((int) vector2_3.X / 16, (int) vector2_3.Y / 16) && this.AI_137_CanHit(vector2_3))
            {
              Dust dust = Dust.NewDustDirect(vector2_3, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 1f);
              dust.position = vector2_3;
              dust.velocity = (vector2_1 - dust.position).SafeNormalize(Vector2.Zero);
              dust.scale = 0.7f;
              dust.fadeIn = 1f;
              dust.noGravity = true;
              dust.noLight = true;
            }
          }
        }
      }
      for (int index = 0; index < 0; ++index)
      {
        if (Main.rand.Next(10) == 0)
        {
          Vector2 vector2_2 = Main.rand.NextVector2Unit(0.0f, 6.283185f);
          if ((double) Math.Abs(vector2_2.X) >= 0.119999997317791)
          {
            Vector2 vector2_3 = this.Center + vector2_2 * new Vector2((float) ((this.height - num3) / 2)) * Main.rand.NextFloat();
            if (!WorldGen.SolidTile((int) vector2_3.X / 16, (int) vector2_3.Y / 16) && this.AI_137_CanHit(vector2_3))
            {
              Dust dust = Dust.NewDustDirect(vector2_3, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 1f);
              Vector2 vector2_4 = dust.velocity * 0.6f;
              dust.velocity = vector2_4;
              Vector2 vector2_5 = dust.velocity + Vector2.UnitY * -2f;
              dust.velocity = vector2_5;
              int num6 = 1;
              dust.noGravity = num6 != 0;
              int num7 = 1;
              dust.noLight = num7 != 0;
            }
          }
        }
      }
      for (int index = 0; index < 4; ++index)
      {
        if (Main.rand.Next(10) == 0)
        {
          Dust dust = Dust.NewDustDirect(vector2_1 - new Vector2(8f, 0.0f), 16, this.height / 2 - 40, 226, 0.0f, 0.0f, 100, new Color(), 1f);
          Vector2 vector2_2 = dust.velocity * 0.6f;
          dust.velocity = vector2_2;
          Vector2 vector2_3 = dust.velocity + Vector2.UnitY * -2f;
          dust.velocity = vector2_3;
          double num6 = 0.699999988079071;
          dust.scale = (float) num6;
          int num7 = 1;
          dust.noGravity = num7 != 0;
          int num8 = 1;
          dust.noLight = num8 != 0;
        }
      }
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    private void AI_138_ExplosiveTrap()
    {
      this.spriteDirection = this.direction = 1;
      int num1 = 110;
      int Type = 694;
      int num2 = 48;
      if (Main.player[this.owner].setHuntressT2)
        num1 = 74;
      if (Main.player[this.owner].setHuntressT3)
        num1 = 40;
      switch (this.type)
      {
        case 692:
          Type = 695;
          break;
        case 693:
          Type = 696;
          break;
      }
      Lighting.AddLight(this.Center, 0.6f, 0.5f, 0.3f);
      int num3 = this.frameCounter + 1;
      this.frameCounter = num3;
      if (num3 >= 12)
      {
        this.frameCounter = 0;
        int num4 = this.frame + 1;
        this.frame = num4;
        if (num4 >= Main.projFrames[this.type])
          this.frame = 0;
      }
      if ((double) this.localAI[0] > 0.0)
        --this.localAI[0];
      if ((double) this.localAI[0] <= 0.0 && this.owner == Main.myPlayer)
      {
        this.localAI[0] = 3f;
        bool flag = false;
        Microsoft.Xna.Framework.Rectangle rectangle = Utils.CenteredRectangle(this.Center + new Vector2(0.0f, (float) -num2), new Vector2((float) (num2 * 2)));
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.CanBeChasedBy((object) this, true) && rectangle.Intersects(npc.Hitbox))
          {
            flag = true;
            break;
          }
        }
        if (flag)
        {
          Main.PlayTrackedSound((SoundStyle) SoundID.DD2_ExplosiveTrapExplode);
          this.localAI[0] = (float) num1;
          Projectile.NewProjectile(this.Center + new Vector2(0.0f, (float) -num2), Vector2.Zero, Type, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
        }
      }
      this.tileCollide = true;
      this.velocity.Y += 0.2f;
    }

    private void AI_139_ExplosiveTrapExplosion()
    {
      int projFrame = Main.projFrames[this.type];
      int num1 = 3;
      this.alpha = this.alpha - 25;
      if (this.alpha < 0)
        this.alpha = 0;
      if ((double) this.localAI[0] == 0.0)
        this.localAI[0] = 1f;
      int num2 = this.frameCounter + 1;
      this.frameCounter = num2;
      if (num2 >= num1)
      {
        this.frameCounter = 0;
        int num3 = this.frame + 1;
        this.frame = num3;
        if (num3 >= projFrame)
        {
          this.Kill();
          return;
        }
      }
      DelegateMethods.v3_1 = new Vector3(1.3f, 0.9f, 0.2f);
      Utils.PlotTileLine(this.Top, this.Bottom, 2f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
    }

    private void AI_140_MonkStaffT1()
    {
      float num1 = 50f;
      float num2 = 2f;
      float num3 = 20f;
      Player player = Main.player[this.owner];
      float num4 = -0.7853982f;
      Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter, true);
      Vector2 vector2_2 = Vector2.Zero;
      if (player.dead)
      {
        this.Kill();
      }
      else
      {
        if (this.type == 697)
        {
          int Damage = this.damage * 2;
          int num5 = Math.Sign(this.velocity.X);
          this.velocity = new Vector2((float) num5, 0.0f);
          if ((double) this.ai[0] == 0.0)
          {
            this.rotation = (float) ((double) new Vector2((float) num5, -player.gravDir).ToRotation() + (double) num4 + 3.14159274101257);
            if ((double) this.velocity.X < 0.0)
              this.rotation = this.rotation - 1.570796f;
          }
          this.alpha = this.alpha - 128;
          if (this.alpha < 0)
            this.alpha = 0;
          double num6 = (double) this.ai[0] / (double) num1;
          ++this.ai[0];
          this.rotation = this.rotation + 6.283185f * num2 / num1 * (float) num5;
          bool flag = (double) this.ai[0] == (double) (int) ((double) num1 / 2.0);
          if ((double) this.ai[0] >= (double) num1 || flag && !player.controlUseItem)
          {
            this.Kill();
            player.reuseDelay = 10;
          }
          else if (flag)
          {
            Vector2 mouseWorld = Main.MouseWorld;
            int dir = (double) player.DirectionTo(mouseWorld).X > 0.0 ? 1 : -1;
            if ((double) dir != (double) this.velocity.X)
            {
              player.ChangeDir(dir);
              this.velocity = new Vector2((float) dir, 0.0f);
              this.netUpdate = true;
              this.rotation = this.rotation - 3.141593f;
            }
          }
          float num7 = this.rotation - 0.7853982f * (float) num5;
          vector2_2 = (num7 + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * (this.ai[0] / num1) * num3;
          Vector2 vec = this.Center + (num7 + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * 30f;
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150, new Color(), 1f);
            dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
          }
          double num8 = 0.75;
          if (num6 >= num8)
          {
            Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50, new Color(), 1f);
            dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
            dust.noGravity = true;
            dust.color = new Color(20, (int) byte.MaxValue, 100, 160);
          }
          if ((double) this.ai[0] >= (double) num1 - 8.0 && (double) this.ai[0] < (double) num1 - 2.0)
          {
            for (int index = 0; index < 5; ++index)
            {
              Dust dust = Dust.NewDustDirect(vec - new Vector2(5f), 10, 10, 55, player.velocity.X, player.velocity.Y, 50, new Color(), 1f);
              Vector2 vector2_3 = dust.velocity * 1.2f;
              dust.velocity = vector2_3;
              int num9 = 1;
              dust.noGravity = num9 != 0;
              double num10 = (double) dust.scale + 0.100000001490116;
              dust.scale = (float) num10;
              Color color = new Color(20, (int) byte.MaxValue, 100, 160);
              dust.color = color;
            }
          }
          if ((double) this.ai[0] == (double) num1 - 3.0 && this.owner == Main.myPlayer)
          {
            if ((double) this.localAI[1] != 1.0)
            {
              Point result;
              if (!WorldUtils.Find(vec.ToTileCoordinates(), Searches.Chain((GenSearch) new Searches.Down(4), (GenCondition) new Conditions.IsSolid()), out result))
              {
                Main.PlayTrackedSound((SoundStyle) SoundID.DD2_MonkStaffGroundMiss, this.Center);
                goto label_26;
              }
            }
            Projectile.NewProjectile(vec + new Vector2((float) (num5 * 20), -60f), Vector2.Zero, 698, Damage, 0.0f, this.owner, 0.0f, 0.0f);
            Main.PlayTrackedSound((SoundStyle) SoundID.DD2_MonkStaffGroundImpact, this.Center);
          }
        }
label_26:
        if (this.type == 707)
        {
          Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
          int num5 = Math.Sign(this.velocity.X);
          this.velocity = new Vector2((float) num5, 0.0f);
          if ((double) this.ai[0] == 0.0)
          {
            this.rotation = (float) ((double) new Vector2((float) num5, -player.gravDir).ToRotation() + (double) num4 + 3.14159274101257);
            if ((double) this.velocity.X < 0.0)
              this.rotation = this.rotation - 1.570796f;
          }
          this.alpha = this.alpha - 128;
          if (this.alpha < 0)
            this.alpha = 0;
          double num6 = (double) this.ai[0] / (double) num1;
          float num7 = 1f;
          this.ai[0] += num7;
          this.rotation = this.rotation + 6.283185f * num2 / num1 * (float) num5;
          bool flag = (double) this.ai[0] == (double) (int) ((double) num1 / 2.0);
          if ((double) this.ai[0] >= (double) num1 || flag && !player.controlUseItem)
          {
            this.Kill();
            player.reuseDelay = 2;
          }
          else if (flag)
          {
            Vector2 mouseWorld = Main.MouseWorld;
            int dir = (double) player.DirectionTo(mouseWorld).X > 0.0 ? 1 : -1;
            if ((double) dir != (double) this.velocity.X)
            {
              player.ChangeDir(dir);
              this.velocity = new Vector2((float) dir, 0.0f);
              this.netUpdate = true;
              this.rotation = this.rotation - 3.141593f;
            }
          }
          if (((double) this.ai[0] == (double) num7 || (double) this.ai[0] == (double) (int) ((double) num1 / 2.0) && this.active) && this.owner == Main.myPlayer)
          {
            Vector2 mouseWorld = Main.MouseWorld;
            Vector2 vector2_3 = player.DirectionTo(mouseWorld) * 0.0f;
          }
          float f = this.rotation - 0.7853982f * (float) num5;
          vector2_2 = (f + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * (this.ai[0] / num1) * num3;
          Vector2 vector2_4 = this.Center + (f + (num5 == -1 ? 3.141593f : 0.0f)).ToRotationVector2() * 30f;
          Vector2 rotationVector2 = f.ToRotationVector2();
          Vector2 vector2_5 = rotationVector2.RotatedBy(1.57079637050629 * (double) this.spriteDirection, new Vector2());
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Dust.NewDustDirect(vector2_4 - new Vector2(5f), 10, 10, 31, player.velocity.X, player.velocity.Y, 150, new Color(), 1f);
            dust.velocity = this.DirectionTo(dust.position) * 0.1f + dust.velocity * 0.1f;
          }
          for (int index = 0; index < 4; ++index)
          {
            float num8 = 1f;
            float num9 = 1f;
            switch (index - 1)
            {
              case 0:
                num9 = -1f;
                break;
              case 1:
                num9 = 1.25f;
                num8 = 0.5f;
                break;
              case 2:
                num9 = -1.25f;
                num8 = 0.5f;
                break;
            }
            if (Main.rand.Next(6) != 0)
            {
              Dust dust = Dust.NewDustDirect(this.position, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 1f);
              dust.position = this.Center + rotationVector2 * (float) (60.0 + (double) Main.rand.NextFloat() * 20.0) * num9;
              dust.velocity = vector2_5 * (float) (4.0 + 4.0 * (double) Main.rand.NextFloat()) * num9 * num8;
              dust.noGravity = true;
              dust.noLight = true;
              dust.scale = 0.5f;
              dust.customData = (object) this;
              if (Main.rand.Next(4) == 0)
                dust.noGravity = false;
            }
          }
        }
        this.position = vector2_1 - this.Size / 2f;
        this.position = this.position + vector2_2;
        this.spriteDirection = this.direction;
        this.timeLeft = 2;
        player.ChangeDir(this.direction);
        player.heldProj = this.whoAmI;
        player.itemTime = 2;
        player.itemAnimation = 2;
        player.itemRotation = MathHelper.WrapAngle(this.rotation);
      }
    }

    private void AI_141_MonkStaffT1Explosion()
    {
      Point tileCoordinates1 = this.TopLeft.ToTileCoordinates();
      Point tileCoordinates2 = this.BottomRight.ToTileCoordinates();
      int num1 = tileCoordinates1.X / 2;
      int num2 = tileCoordinates2.X / 2;
      int width = this.width;
      ++this.ai[0];
      if ((double) this.ai[0] > 20.0)
      {
        this.Kill();
      }
      else
      {
        if ((double) this.ai[0] != 1.0)
          return;
        bool flag = false;
        int num3 = 4;
        for (int x = tileCoordinates1.X; x <= tileCoordinates2.X; ++x)
        {
          for (int y = tileCoordinates1.Y; y <= tileCoordinates2.Y; ++y)
          {
            if ((double) Vector2.Distance(this.Bottom, new Vector2((float) (x * 16), (float) (y * 16))) <= (double) width)
            {
              Tile tileSafely1 = Framing.GetTileSafely(x, y);
              if (tileSafely1.active() && Main.tileSolid[(int) tileSafely1.type] && (!Main.tileSolidTop[(int) tileSafely1.type] && !Main.tileFrameImportant[(int) tileSafely1.type]))
              {
                Tile tileSafely2 = Framing.GetTileSafely(x, y - 1);
                if (!tileSafely2.active() || !Main.tileSolid[(int) tileSafely2.type] || Main.tileSolidTop[(int) tileSafely2.type])
                {
                  int num4 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely1) * 6;
                  for (int index = 0; index < num4; ++index)
                  {
                    Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                    dust.velocity.Y -= (float) (3.0 + (double) num3 * 1.5);
                    dust.velocity.Y *= Main.rand.NextFloat();
                    double num5 = (double) dust.scale + (double) num3 * 0.0299999993294477;
                    dust.scale = (float) num5;
                  }
                  if (num3 >= 2)
                  {
                    for (int index = 0; index < num4 - 1; ++index)
                    {
                      Dust dust = Main.dust[WorldGen.KillTile_MakeTileDust(x, y, tileSafely1)];
                      dust.velocity.Y -= 1f + (float) num3;
                      dust.velocity.Y *= Main.rand.NextFloat();
                    }
                  }
                  if (num4 > 0)
                    flag = true;
                }
              }
            }
          }
        }
        Vector2 bottom = this.Bottom;
        Vector2 spinningpoint = new Vector2(7f, 0.0f);
        Vector2 vector2_1 = new Vector2(1f, 0.7f);
        Color color1 = new Color(20, (int) byte.MaxValue, 100, 200);
        for (float num4 = 0.0f; (double) num4 < 25.0; ++num4)
        {
          Vector2 vector2_2 = spinningpoint.RotatedBy((double) num4 * 6.28318548202515 / 25.0, new Vector2()) * vector2_1;
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 0, new Color(), 1f);
          dust.alpha = 0;
          if (!flag)
            dust.alpha = 50;
          dust.color = color1;
          dust.position = bottom + vector2_2;
          dust.velocity.Y -= 3f;
          dust.velocity.X *= 0.5f;
          dust.fadeIn = (float) (0.5 + (double) Main.rand.NextFloat() * 0.5);
          dust.noLight = true;
        }
        if (flag)
          return;
        for (float num4 = 0.0f; (double) num4 < 25.0; ++num4)
        {
          Vector2 vector2_2 = spinningpoint.RotatedBy((double) num4 * 6.28318548202515 / 25.0, new Vector2()) * vector2_1;
          Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 55, 0.0f, 0.0f, 0, new Color(), 1f);
          int num5 = 100;
          dust.alpha = num5;
          Color color2 = color1;
          dust.color = color2;
          Vector2 vector2_3 = bottom + vector2_2;
          dust.position = vector2_3;
          dust.velocity.Y -= 5f;
          dust.velocity.X *= 0.8f;
          double num6 = 0.5 + (double) Main.rand.NextFloat() * 0.5;
          dust.fadeIn = (float) num6;
          int num7 = 1;
          dust.noLight = num7 != 0;
        }
      }
    }

    private void AI_142_MonkStaffT2And3()
    {
      Player player = Main.player[this.owner];
      Vector2 vector2_1 = player.RotatedRelativePoint(player.MountedCenter, true);
      this.direction = player.direction;
      player.heldProj = this.whoAmI;
      this.Center = vector2_1;
      if (player.dead)
      {
        this.Kill();
      }
      else
      {
        if (!player.frozen)
        {
          if (this.type == 699)
          {
            this.spriteDirection = this.direction = player.direction;
            this.alpha = this.alpha - (int) sbyte.MaxValue;
            if (this.alpha < 0)
              this.alpha = 0;
            if ((double) this.localAI[0] > 0.0)
              --this.localAI[0];
            float num1 = 1f - (float) player.itemAnimation / (float) player.itemAnimationMax;
            float rotation = this.velocity.ToRotation();
            float x = this.velocity.Length();
            float num2 = 22f;
            Vector2 spinningpoint1 = new Vector2(1f, 0.0f).RotatedBy(3.14159274101257 + (double) num1 * 6.28318548202515, new Vector2()) * new Vector2(x, this.ai[0]);
            this.position = this.position + spinningpoint1.RotatedBy((double) rotation, new Vector2()) + new Vector2(x + num2, 0.0f).RotatedBy((double) rotation, new Vector2());
            Vector2 Destination = vector2_1 + spinningpoint1.RotatedBy((double) rotation, new Vector2()) + new Vector2((float) ((double) x + (double) num2 + 40.0), 0.0f).RotatedBy((double) rotation, new Vector2());
            this.rotation = player.AngleTo(Destination) + 0.7853982f * (float) player.direction;
            if (this.spriteDirection == -1)
              this.rotation = this.rotation + 3.141593f;
            player.DirectionTo(this.Center);
            Vector2 vector2_2 = player.DirectionTo(Destination);
            Vector2 spinningpoint2 = this.velocity.SafeNormalize(Vector2.UnitY);
            float num3 = 2f;
            for (int index = 0; (double) index < (double) num3; ++index)
            {
              Dust dust = Dust.NewDustDirect(this.Center, 14, 14, 228, 0.0f, 0.0f, 110, new Color(), 1f);
              dust.velocity = player.DirectionTo(dust.position) * 2f;
              dust.position = this.Center + spinningpoint2.RotatedBy((double) num1 * 6.28318548202515 * 2.0 + (double) index / (double) num3 * 6.28318548202515, new Vector2()) * 10f;
              dust.scale = (float) (1.0 + 0.600000023841858 * (double) Main.rand.NextFloat());
              dust.velocity += spinningpoint2 * 3f;
              dust.noGravity = true;
            }
            for (int index = 0; index < 1; ++index)
            {
              if (Main.rand.Next(3) == 0)
              {
                Dust dust = Dust.NewDustDirect(this.Center, 20, 20, 228, 0.0f, 0.0f, 110, new Color(), 1f);
                dust.velocity = player.DirectionTo(dust.position) * 2f;
                dust.position = this.Center + vector2_2 * -110f;
                dust.scale = (float) (0.449999988079071 + 0.400000005960464 * (double) Main.rand.NextFloat());
                dust.fadeIn = (float) (0.699999988079071 + 0.400000005960464 * (double) Main.rand.NextFloat());
                dust.noGravity = true;
                dust.noLight = true;
              }
            }
          }
          else if (this.type == 708)
          {
            Lighting.AddLight(player.Center, 0.75f, 0.9f, 1.15f);
            this.spriteDirection = this.direction = player.direction;
            this.alpha = this.alpha - (int) sbyte.MaxValue;
            if (this.alpha < 0)
              this.alpha = 0;
            float num1 = 1f - (float) player.itemAnimation / (float) player.itemAnimationMax;
            float rotation = this.velocity.ToRotation();
            float x = this.velocity.Length();
            float num2 = 22f;
            Vector2 spinningpoint1 = new Vector2(1f, 0.0f).RotatedBy(3.14159274101257 + (double) num1 * 6.28318548202515, new Vector2()) * new Vector2(x, this.ai[0]);
            this.position = this.position + spinningpoint1.RotatedBy((double) rotation, new Vector2()) + new Vector2(x + num2, 0.0f).RotatedBy((double) rotation, new Vector2());
            Vector2 Destination = vector2_1 + spinningpoint1.RotatedBy((double) rotation, new Vector2()) + new Vector2((float) ((double) x + (double) num2 + 40.0), 0.0f).RotatedBy((double) rotation, new Vector2());
            this.rotation = player.AngleTo(Destination) + 0.7853982f * (float) player.direction;
            if (this.spriteDirection == -1)
              this.rotation = this.rotation + 3.141593f;
            player.DirectionTo(this.Center);
            player.DirectionTo(Destination);
            Vector2 spinningpoint2 = this.velocity.SafeNormalize(Vector2.UnitY);
            if ((player.itemAnimation == 2 || player.itemAnimation == 6 || player.itemAnimation == 10) && this.owner == Main.myPlayer)
            {
              Vector2 vector2_2 = (spinningpoint2 + Main.rand.NextVector2Square(-0.2f, 0.2f)) * 12f;
              switch (player.itemAnimation)
              {
                case 2:
                  vector2_2 = spinningpoint2.RotatedBy(0.383972465991974, new Vector2());
                  break;
                case 6:
                  vector2_2 = spinningpoint2.RotatedBy(-0.383972465991974, new Vector2());
                  break;
                case 10:
                  vector2_2 = spinningpoint2.RotatedBy(0.0, new Vector2());
                  break;
              }
              Projectile.NewProjectile(this.Center, vector2_2 * (10f + (float) Main.rand.Next(4)), 709, this.damage, 0.0f, this.owner, 0.0f, 0.0f);
            }
            int num3 = 0;
            while (num3 < 3)
            {
              float num4 = 1f;
              float num5 = 1f;
              switch (num3 - 1)
              {
                case 0:
                  num5 = -1f;
                  break;
                case 1:
                  num5 = 1.25f;
                  num4 = 0.5f;
                  break;
                case 2:
                  num5 = -1.25f;
                  num4 = 0.5f;
                  break;
              }
              if (Main.rand.Next(6) != 0)
              {
                float num6 = num5 * 1.2f;
                Dust dust = Dust.NewDustDirect(this.position, this.width, this.height, 226, 0.0f, 0.0f, 100, new Color(), 1f);
                dust.velocity = spinningpoint2 * (float) (4.0 + 4.0 * (double) Main.rand.NextFloat()) * num6 * num4;
                dust.noGravity = true;
                dust.noLight = true;
                dust.scale = 0.75f;
                dust.fadeIn = 0.8f;
                dust.customData = (object) this;
                if (Main.rand.Next(3) == 0)
                {
                  dust.noGravity = false;
                  dust.fadeIn = 0.0f;
                }
              }
              num3 += 2;
            }
          }
        }
        if (player.itemAnimation != 2)
          return;
        this.Kill();
        player.reuseDelay = 2;
      }
    }

    private void AI_143_MonkStaffT2Ghast()
    {
      SlotId slotId;
      if ((double) this.ai[0] == 0.0)
      {
        float[] localAi = this.localAI;
        int index = 1;
        slotId = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_GhastlyGlaiveImpactGhost, this.Center);
        // ISSUE: explicit reference operation
        double num = (double) ((SlotId) @slotId).ToFloat();
        localAi[index] = (float) num;
      }
      ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
      if (activeSound == null)
      {
        float[] localAi = this.localAI;
        int index = 1;
        slotId = (SlotId) SlotId.Invalid;
        // ISSUE: explicit reference operation
        double num = (double) ((SlotId) @slotId).ToFloat();
        localAi[index] = (float) num;
      }
      else
        activeSound.Position = this.Center;
      ++this.ai[0];
      if ((double) this.ai[0] > 50.0)
      {
        this.alpha = this.alpha + 25;
        if (this.alpha > (int) byte.MaxValue)
          this.alpha = (int) byte.MaxValue;
      }
      else
      {
        this.alpha = this.alpha - 25;
        if (this.alpha < 100)
          this.alpha = 100;
      }
      this.velocity = this.velocity * 0.98f;
      int num1 = this.frameCounter + 1;
      this.frameCounter = num1;
      if (num1 >= 5)
      {
        this.frameCounter = 0;
        int num2 = this.frame + 1;
        this.frame = num2;
        if (num2 >= 4)
          this.frame = 0;
      }
      if ((double) this.ai[0] >= 60.0)
        this.Kill();
      this.direction = this.spriteDirection = (double) this.velocity.X > 0.0 ? 1 : -1;
      this.rotation = this.velocity.ToRotation();
      if (this.spriteDirection == -1)
        this.rotation = this.rotation + 3.141593f;
      if ((double) this.ai[0] < 10.0 || (double) this.ai[0] >= 34.0)
        return;
      Vector2 spinningpoint = this.velocity.SafeNormalize(Vector2.UnitY);
      float num3 = this.ai[0] / 60f;
      float num4 = 2f;
      for (int index = 0; (double) index < (double) num4; ++index)
      {
        Dust dust = Dust.NewDustDirect(this.Center, 14, 14, 228, 0.0f, 0.0f, 110, new Color(), 1f);
        Vector2 vector2_1 = spinningpoint * 2f;
        dust.velocity = vector2_1;
        Vector2 vector2_2 = this.Center + spinningpoint.RotatedBy((double) num3 * 6.28318548202515 * 2.0 + (double) index / (double) num4 * 6.28318548202515, new Vector2()) * 7f;
        dust.position = vector2_2;
        double num2 = 1.0 + 0.600000023841858 * (double) Main.rand.NextFloat();
        dust.scale = (float) num2;
        Vector2 vector2_3 = dust.velocity + spinningpoint * 3f;
        dust.velocity = vector2_3;
        int num5 = 1;
        dust.noGravity = num5 != 0;
      }
    }

    private void AI_144_DD2Pet()
    {
      Player player = Main.player[this.owner];
      float num1 = 4f;
      int num2 = 6;
      int num3 = 4;
      int num4 = Main.projFrames[this.type];
      int num5 = 0;
      Vector2 vector2_1 = new Vector2((float) (player.direction * 30), -20f);
      if (player.dead)
      {
        this.Kill();
      }
      else
      {
        bool flag = true;
        switch (this.type)
        {
          case 701:
            if (Main.myPlayer == this.owner && player.petFlagDD2Dragon)
            {
              this.timeLeft = 2;
              break;
            }
            break;
          case 702:
            if (Main.myPlayer == this.owner && player.petFlagDD2Ghost)
              this.timeLeft = 2;
            vector2_1.Y += (float) Math.Cos((double) this.localAI[0] * 0.0523598790168762) * 2f;
            num3 = 4;
            num2 = 10;
            flag = false;
            num1 = 6f;
            Vector2 vector2_2 = new Vector2(this.spriteDirection == -1 ? -6f : -2f, -20f).RotatedBy((double) this.rotation, new Vector2());
            if (Main.rand.Next(24) == 0)
            {
              Dust dust = Dust.NewDustDirect(this.Center + vector2_2, 4, 4, 135, 0.0f, 0.0f, 100, new Color(), 1f);
              if (Main.rand.Next(3) != 0)
              {
                dust.noGravity = true;
                dust.velocity.Y -= 3f;
                dust.noLight = true;
              }
              else if (Main.rand.Next(2) != 0)
                dust.noLight = true;
              dust.velocity *= 0.5f;
              dust.velocity.Y -= 0.9f;
              dust.scale += (float) (0.100000001490116 + (double) Main.rand.NextFloat() * 0.600000023841858);
            }
            DelegateMethods.v3_1 = new Vector3(0.3f, 0.5f, 1f);
            Utils.PlotTileLine(this.Center, this.Center + this.velocity * 6f, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(this.Left, this.Right, 20f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Center, player.Center + player.velocity * 6f, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            Utils.PlotTileLine(player.Left, player.Right, 40f, new Utils.PerLinePoint(DelegateMethods.CastLightOpen));
            break;
          case 703:
            if (Main.myPlayer == this.owner && player.petFlagDD2Gato)
              this.timeLeft = 2;
            vector2_1.Y += (float) Math.Cos((double) this.localAI[0] * 0.104719758033752) * 2f;
            num2 = 4;
            num3 = 2;
            num1 = 3f;
            num4 = 4;
            break;
        }
        if (flag && (player.suspiciouslookingTentacle || player.petFlagDD2Ghost))
          vector2_1.X += (float) (-player.direction * 64);
        this.direction = this.spriteDirection = player.direction;
        Vector2 vector2_3 = player.MountedCenter + vector2_1;
        double num6 = (double) Vector2.Distance(this.Center, vector2_3);
        double num7 = 1000.0;
        if (num6 > num7)
          this.Center = player.Center + vector2_1;
        Vector2 vector2_4 = vector2_3 - this.Center;
        double num8 = (double) num1;
        if (num6 < num8)
          this.velocity = this.velocity * 0.25f;
        if (vector2_4 != Vector2.Zero)
        {
          if ((double) vector2_4.Length() < (double) num1 * 0.5)
            this.velocity = vector2_4;
          else
            this.velocity = vector2_4 * 0.1f;
        }
        if ((double) this.velocity.Length() > 6.0)
        {
          float num9 = (float) ((double) this.velocity.X * 0.0799999982118607 + (double) this.velocity.Y * (double) this.spriteDirection * 0.0199999995529652);
          if ((double) Math.Abs(this.rotation - num9) >= 3.14159274101257)
            this.rotation = (double) num9 >= (double) this.rotation ? this.rotation + 6.283185f : this.rotation - 6.283185f;
          float num10 = 12f;
          this.rotation = (this.rotation * (num10 - 1f) + num9) / num10;
          int num11 = this.frameCounter + 1;
          this.frameCounter = num11;
          if (num11 >= num3)
          {
            this.frameCounter = 0;
            int num12 = this.frame + 1;
            this.frame = num12;
            if (num12 >= num4)
              this.frame = num5;
          }
        }
        else
        {
          if ((double) this.rotation > 3.14159274101257)
            this.rotation = this.rotation - 6.283185f;
          this.rotation = (double) this.rotation <= -0.00499999988824129 || (double) this.rotation >= 0.00499999988824129 ? this.rotation * 0.96f : 0.0f;
          int num9 = this.frameCounter + 1;
          this.frameCounter = num9;
          if (num9 >= num2)
          {
            this.frameCounter = 0;
            int num10 = this.frame + 1;
            this.frame = num10;
            if (num10 >= num4)
              this.frame = num5;
          }
        }
        ++this.localAI[0];
        if ((double) this.localAI[0] <= 120.0)
          return;
        this.localAI[0] = 0.0f;
      }
    }

    private void AI_145_BookStaffStorm()
    {
      float num1 = 300f;
      SlotId slotId;
      if (this.soundDelay == 0)
      {
        this.soundDelay = -1;
        float[] localAi = this.localAI;
        int index = 1;
        slotId = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BookStaffTwisterLoop, this.Center);
        // ISSUE: explicit reference operation
        double num2 = (double) ((SlotId) @slotId).ToFloat();
        localAi[index] = (float) num2;
      }
      ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
      if (activeSound != null)
      {
        activeSound.Position = this.Center;
        activeSound.Volume = (float) (1.0 - (double) Math.Max(this.ai[0] - (num1 - 15f), 0.0f) / 15.0);
      }
      else
      {
        float[] localAi = this.localAI;
        int index = 1;
        slotId = (SlotId) SlotId.Invalid;
        // ISSUE: explicit reference operation
        double num2 = (double) ((SlotId) @slotId).ToFloat();
        localAi[index] = (float) num2;
      }
      if ((double) this.localAI[0] >= 16.0 && (double) this.ai[0] < (double) num1 - 15.0)
        this.ai[0] = num1 - 15f;
      ++this.ai[0];
      if ((double) this.ai[0] >= (double) num1)
        this.Kill();
      Vector2 top = this.Top;
      Vector2 bottom = this.Bottom;
      Vector2 vector2_1 = Vector2.Lerp(top, bottom, 0.5f);
      Vector2 vector2_2 = new Vector2(0.0f, bottom.Y - top.Y);
      vector2_2.X = vector2_2.Y * 0.2f;
      int Width = 16;
      int Height = 160;
      for (int index = 0; index < 1; ++index)
      {
        Vector2 Position = new Vector2(this.Center.X - (float) (Width / 2), this.position.Y + (float) this.height - (float) Height);
        if (Collision.SolidCollision(Position, Width, Height) || Collision.WetCollision(Position, Width, Height))
        {
          if ((double) this.velocity.Y > 0.0)
            this.velocity.Y = 0.0f;
          if ((double) this.velocity.Y > -4.0)
          {
            this.velocity.Y -= 2f;
          }
          else
          {
            this.velocity.Y -= 4f;
            this.localAI[0] += 2f;
          }
          if ((double) this.velocity.Y < -16.0)
            this.velocity.Y = -16f;
        }
        else
        {
          --this.localAI[0];
          if ((double) this.localAI[0] < 0.0)
            this.localAI[0] = 0.0f;
          if ((double) this.velocity.Y < 0.0)
            this.velocity.Y = 0.0f;
          if ((double) this.velocity.Y < 4.0)
            this.velocity.Y += 2f;
          else
            this.velocity.Y += 4f;
          if ((double) this.velocity.Y > 16.0)
            this.velocity.Y = 16f;
        }
      }
      if ((double) this.ai[0] < (double) num1 - 30.0)
      {
        for (int index = 0; index < 1; ++index)
        {
          float num2 = -1f;
          float num3 = 0.9f;
          float amount = Main.rand.NextFloat();
          Vector2 vector2_3 = new Vector2(MathHelper.Lerp(0.1f, 1f, Main.rand.NextFloat()), MathHelper.Lerp(num2, num3, amount));
          vector2_3.X *= MathHelper.Lerp(2.2f, 0.6f, amount);
          vector2_3.X *= -1f;
          Vector2 vector2_4 = new Vector2(6f, 10f);
          Vector2 Position = vector2_1 + vector2_2 * vector2_3 * 0.5f + vector2_4;
          Dust dust = Main.dust[Dust.NewDust(Position, 0, 0, 274, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust.position = Position;
          dust.fadeIn = 1.3f;
          dust.scale = 0.87f;
          dust.alpha = 211;
          if ((double) vector2_3.X > -1.20000004768372)
            dust.velocity.X = 1f + Main.rand.NextFloat();
          dust.noGravity = true;
          dust.velocity.Y = (float) ((double) Main.rand.NextFloat() * -0.5 - 1.29999995231628);
          dust.velocity.X += this.velocity.X * 2.1f;
          dust.noLight = true;
        }
      }
      Vector2 Position1 = this.Bottom + new Vector2(-25f, -25f);
      for (int index = 0; index < 4; ++index)
      {
        Dust dust = Dust.NewDustDirect(Position1, 50, 25, 31, this.velocity.X, -2f, 100, new Color(), 1f);
        double num2 = 1.10000002384186;
        dust.fadeIn = (float) num2;
        int num3 = 1;
        dust.noGravity = num3 != 0;
      }
      for (int index = 0; index < 1; ++index)
      {
        if (Main.rand.Next(5) == 0)
        {
          Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size, new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)), Utils.SelectRandom<int>(Main.rand, new int[3]{ 1007, 1008, 1008 }), 1f);
          int num2 = 60;
          gore.timeLeft = num2;
          int num3 = 50;
          gore.alpha = num3;
          gore.velocity.X += this.velocity.X;
        }
      }
      for (int index = 0; index < 1; ++index)
      {
        if (Main.rand.Next(7) == 0)
        {
          Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size, new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)), Utils.SelectRandom<int>(Main.rand, new int[3]{ 1007, 1008, 1008 }), 1f);
          int num2 = 0;
          gore.timeLeft = num2;
          int num3 = 80;
          gore.alpha = num3;
        }
      }
      for (int index = 0; index < 1; ++index)
      {
        if (Main.rand.Next(7) == 0)
        {
          Gore gore = Gore.NewGoreDirect(this.TopLeft + Main.rand.NextVector2Square(0.0f, 1f) * this.Size, new Vector2(this.velocity.X * 1.5f, (float) (-(double) Main.rand.NextFloat() * 16.0)), Utils.SelectRandom<int>(Main.rand, new int[3]{ 1007, 1008, 1008 }), 1f);
          int num2 = 0;
          gore.timeLeft = num2;
          int num3 = 80;
          gore.alpha = num3;
        }
      }
    }

    public bool AI_137_CanHit(Vector2 targetPosition)
    {
      if (WorldGen.SolidTile((int) targetPosition.X / 16, (int) targetPosition.Y / 16))
        return false;
      Vector2 Position1 = this.Top + Vector2.UnitY * 20f;
      bool flag = Collision.CanHitLine(Position1, 0, 0, targetPosition, 0, 0);
      if (!flag)
      {
        Vector2 v = targetPosition - Position1;
        Vector2 spinningpoint = v.SafeNormalize(Vector2.UnitY);
        Vector2 vector2_1 = Vector2.Lerp(Position1, targetPosition, 0.5f);
        Vector2 vector2_2 = vector2_1 + spinningpoint.RotatedBy(1.57079637050629, new Vector2()) * v.Length() * 0.2f;
        if (Collision.CanHitLine(Position1, 0, 0, vector2_2, 0, 0) && Collision.CanHitLine(vector2_2, 0, 0, targetPosition, 0, 0))
          flag = true;
        if (!flag)
        {
          Vector2 vector2_3 = vector2_1 + spinningpoint.RotatedBy(-1.57079637050629, new Vector2()) * v.Length() * 0.2f;
          if (Collision.CanHitLine(Position1, 0, 0, vector2_3, 0, 0) && Collision.CanHitLine(vector2_3, 0, 0, targetPosition, 0, 0))
            flag = true;
        }
      }
      return flag;
    }

    public void Kill()
    {
      if (!this.active)
        return;
      Main.projectileIdentity[this.owner, this.identity] = -1;
      int timeLeft = this.timeLeft;
      this.timeLeft = 0;
      if (this.type == 686)
        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsyFireballImpact, this.Center);
      else if (this.type == 711)
        Main.PlayTrackedSound((SoundStyle) SoundID.DD2_BetsysWrathImpact, this.Center);
      else if (this.type == 704)
      {
        ActiveSound activeSound = Main.GetActiveSound(SlotId.FromFloat(this.localAI[1]));
        if (activeSound != null)
        {
          activeSound.Volume = 0.0f;
          activeSound.Stop();
        }
      }
      if (this.type == 710)
      {
        this.ai[1] = -1f;
        this.position = this.Center;
        this.width = this.height = 40;
        this.Center = this.position;
        this.Damage();
        Main.PlaySound(SoundID.Item14, this.position);
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 2.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
        }
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
        }
      }
      else if (this.type == 711)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        int index1 = 0;
        while (index1 < this.oldPos.Length / 2)
        {
          hitbox.X = (int) this.oldPos[index1].X;
          hitbox.Y = (int) this.oldPos[index1].Y;
          for (int index2 = 0; index2 < 2; ++index2)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 55, 158 });
            int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f, 0, new Color(), 1f);
            Main.dust[index3].alpha = 200;
            Dust dust1 = Main.dust[index3];
            dust1.velocity = dust1.velocity * 2.4f;
            Dust dust2 = Main.dust[index3];
            dust2.scale = dust2.scale + Main.rand.NextFloat();
            Dust dust3 = Main.dust[index3];
            dust3.scale = dust3.scale - 0.5f;
            if (Main.dust[index3].type == 55)
              Main.dust[index3].color = Color.Lerp(new Color(128, 0, 180, 128), Color.Gold, Main.rand.NextFloat());
            Main.dust[index3].noLight = true;
          }
          index1 += 2;
        }
        int index4 = 10;
        while (index4 < this.oldPos.Length)
        {
          hitbox.X = (int) this.oldPos[index4].X;
          hitbox.Y = (int) this.oldPos[index4].Y;
          for (int index2 = 0; index2 < 2; ++index2)
          {
            if (Main.rand.Next(3) != 0)
            {
              int Type = Utils.SelectRandom<int>(Main.rand, new int[1]{ 55 });
              int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f, 0, new Color(), 1f);
              Main.dust[index3].alpha = 120;
              Dust dust1 = Main.dust[index3];
              dust1.velocity = dust1.velocity * 2.4f;
              Dust dust2 = Main.dust[index3];
              dust2.scale = dust2.scale + Main.rand.NextFloat() * 0.7f;
              Dust dust3 = Main.dust[index3];
              dust3.scale = dust3.scale - 0.5f;
              if (Main.dust[index3].type == 55)
                Main.dust[index3].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
              Main.dust[index3].noLight = true;
            }
          }
          index4 += 2;
        }
        for (int index2 = 5; index2 < this.oldPos.Length; ++index2)
        {
          hitbox.X = (int) this.oldPos[index2].X;
          hitbox.Y = (int) this.oldPos[index2].Y;
          for (int index3 = 0; index3 < 1; ++index3)
          {
            if (Main.rand.Next(3) != 0)
            {
              int Type = Utils.SelectRandom<int>(Main.rand, new int[1]{ 55 });
              int index5 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f, 0, new Color(), 1f);
              Main.dust[index5].alpha = 80;
              Dust dust1 = Main.dust[index5];
              dust1.velocity = dust1.velocity * 0.3f;
              Dust dust2 = Main.dust[index5];
              dust2.velocity = dust2.velocity + this.velocity * 0.5f;
              Dust dust3 = Main.dust[index5];
              dust3.scale = dust3.scale + Main.rand.NextFloat() * 0.7f;
              Dust dust4 = Main.dust[index5];
              dust4.scale = dust4.scale - 0.5f;
              if (Main.dust[index5].type == 55)
                Main.dust[index5].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
              Main.dust[index5].noLight = true;
            }
          }
        }
        for (int index2 = 0; index2 < 20; ++index2)
        {
          if (Main.rand.Next(3) != 0)
          {
            int Type = 228;
            Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust1.noGravity = true;
            dust1.scale = 1.25f + Main.rand.NextFloat();
            dust1.fadeIn = 1.5f;
            Dust dust2 = dust1;
            dust2.velocity = dust2.velocity * 6f;
            dust1.noLight = true;
          }
        }
        for (int index2 = 0; index2 < 20; ++index2)
        {
          if (Main.rand.Next(3) != 0)
          {
            int Type = 55;
            Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
            dust1.noGravity = true;
            dust1.scale = 1.25f + Main.rand.NextFloat();
            dust1.fadeIn = 1.5f;
            Dust dust2 = dust1;
            dust2.velocity = dust2.velocity * 6f;
            dust1.noLight = true;
            dust1.color = new Color(0, 0, 220, 128);
          }
        }
        if (this.owner == Main.myPlayer)
        {
          this.position = this.Center;
          this.Size = new Vector2(140f);
          this.Center = this.position;
          this.penetrate = -1;
          this.usesLocalNPCImmunity = true;
          this.localNPCHitCooldown = -1;
          this.Damage();
        }
      }
      else if (this.type == 662 || this.type == 685)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        Vector2 vector2 = this.oldVelocity.SafeNormalize(Vector2.Zero);
        Vector2 Position = this.position + vector2 * 16f;
        for (int index = 0; index < 16; ++index)
        {
          if (Main.rand.Next(2) == 0)
          {
            Position -= vector2 * 8f;
          }
          else
          {
            Dust dust1 = Dust.NewDustDirect(Position, this.width, this.height, 11, 0.0f, 0.0f, 0, new Color(), 1f);
            dust1.position = (dust1.position + this.Center) / 2f;
            Dust dust2 = dust1;
            dust2.velocity = dust2.velocity + this.oldVelocity * 0.4f;
            Dust dust3 = dust1;
            dust3.velocity = dust3.velocity * 0.5f;
            dust1.noGravity = true;
            Position -= vector2 * 8f;
          }
        }
      }
      if (this.type == 680)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        Vector2 vector2 = this.oldVelocity.SafeNormalize(Vector2.Zero);
        Vector2 Position = this.position + vector2 * 16f;
        for (int index = 0; index < 16; ++index)
        {
          if (Main.rand.Next(2) == 0)
          {
            Position -= vector2 * 8f;
          }
          else
          {
            Dust dust1 = Dust.NewDustDirect(Position, this.width, this.height, 11, 0.0f, 0.0f, 0, new Color(), 1f);
            dust1.position = (dust1.position + this.Center) / 2f;
            Dust dust2 = dust1;
            dust2.velocity = dust2.velocity + this.oldVelocity * 0.4f;
            Dust dust3 = dust1;
            dust3.velocity = dust3.velocity * 0.5f;
            dust1.noGravity = true;
            Position -= vector2 * 8f;
          }
        }
        Dust.NewDustDirect(this.position, this.width, this.height, 11, 0.0f, 0.0f, 0, Color.Red, 1.6f).noGravity = true;
      }
      if (this.type == 664 || this.type == 666 || (this.type == 668 || this.type == 706))
      {
        int num1 = 4;
        int num2 = 20;
        int num3 = 10;
        int num4 = 20;
        int num5 = 20;
        int num6 = 4;
        float num7 = 1.5f;
        int num8 = 6;
        int Type = 6;
        if (Main.player[this.owner].setApprenticeT3)
        {
          num1 += 4;
          num5 += 10;
          num2 += 20;
          num4 += 30;
          num3 /= 2;
          num6 += 4;
          num7 += 0.5f;
          num8 += 7;
          Type = 270;
        }
        this.position = this.Center;
        this.width = this.height = 16 * num8;
        this.Center = this.position;
        this.Damage();
        Main.PlaySound(SoundID.Item100, this.position);
        for (int index1 = 0; index1 < num1; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index = 0; index < num2; ++index)
        {
          Dust dust1 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 200, new Color(), 2.5f);
          dust1.position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 10f;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 16f;
          if ((double) dust1.velocity.Y > -2.0)
            dust1.velocity.Y *= -0.4f;
          dust1.noLight = true;
          dust1.noGravity = true;
        }
        for (int index = 0; index < num4; ++index)
        {
          Dust dust1 = Dust.NewDustDirect(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, 0.0f, 0.0f, 100, new Color(), 1.5f);
          dust1.position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 2f;
          dust1.noGravity = true;
          dust1.fadeIn = num7;
        }
        for (int index1 = 0; index1 < num3; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 2.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < num5; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < num6; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Gore gore1 = Main.gore[index2];
          gore1.position = gore1.position - Vector2.One * 16f;
          if (Main.rand.Next(2) == 0)
            Main.gore[index2].position.Y -= 30f;
          Gore gore2 = Main.gore[index2];
          gore2.velocity = gore2.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      else if (this.type == 681)
      {
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) (this.height / 2);
        Main.PlaySound(SoundID.DD2_GoblinBomb, this.position);
        this.width = 22;
        this.height = 22;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.4f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 1.4f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].fadeIn = 2f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 5f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 3f;
        }
        int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
        Gore gore1 = Main.gore[index4];
        gore1.velocity = gore1.velocity * 0.4f;
        ++Main.gore[index4].velocity.X;
        ++Main.gore[index4].velocity.Y;
        int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
        Gore gore2 = Main.gore[index5];
        gore2.velocity = gore2.velocity * 0.4f;
        --Main.gore[index5].velocity.X;
        ++Main.gore[index5].velocity.Y;
        int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
        Gore gore3 = Main.gore[index6];
        gore3.velocity = gore3.velocity * 0.4f;
        ++Main.gore[index6].velocity.X;
        --Main.gore[index6].velocity.Y;
        int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
        Gore gore4 = Main.gore[index7];
        gore4.velocity = gore4.velocity * 0.4f;
        --Main.gore[index7].velocity.X;
        --Main.gore[index7].velocity.Y;
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) (this.height / 2);
        this.width = 80;
        this.height = 80;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        this.Damage();
      }
      if (this.type == 669)
      {
        Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        Vector2 vector2 = new Vector2(20f, 20f);
        for (int index = 0; index < 10; ++index)
        {
          Dust dust = Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, 0.0f, 0.0f, 100, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 110), 1.1f);
          dust.velocity = dust.velocity * 1.4f;
        }
        for (int index = 0; index < 40; ++index)
        {
          Dust dust1 = Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, 0.0f, 0.0f, 50, new Color(245, 200, 30, 155), 1.2f);
          dust1.noGravity = true;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 4f;
          Dust dust3 = Dust.NewDustDirect(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 4, 0.0f, 0.0f, 50, new Color(245, 200, 30, 155), 0.8f);
          dust3.velocity = dust3.velocity * 2f;
        }
      }
      if (this.type == 634 || this.type == 635)
      {
        int num1 = Utils.SelectRandom<int>(Main.rand, new int[5]{ 242, 73, 72, 71, (int) byte.MaxValue });
        int Type1 = (int) byte.MaxValue;
        int Type2 = (int) byte.MaxValue;
        int num2 = 50;
        float Scale1 = 1.7f;
        float Scale2 = 0.8f;
        float Scale3 = 2f;
        Vector2 vector2 = (this.rotation - 1.570796f).ToRotationVector2() * this.velocity.Length() * (float) this.MaxUpdates;
        if (this.type == 635)
        {
          Type1 = 88;
          Type2 = 88;
          num1 = Utils.SelectRandom<int>(Main.rand, new int[3]
          {
            242,
            59,
            88
          });
          Scale1 = 3.7f;
          Scale2 = 1.5f;
          Scale3 = 2.2f;
          vector2 *= 0.5f;
        }
        Main.PlaySound(SoundID.Item14, this.position);
        this.position = this.Center;
        this.width = this.height = num2;
        this.Center = this.position;
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        for (int index1 = 0; index1 < 40; ++index1)
        {
          int Type3 = Utils.SelectRandom<int>(Main.rand, new int[5]{ 242, 73, 72, 71, (int) byte.MaxValue });
          if (this.type == 635)
            Type3 = Utils.SelectRandom<int>(Main.rand, new int[3]
            {
              242,
              59,
              88
            });
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type3, 0.0f, 0.0f, 200, new Color(), Scale1);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + vector2 * Main.rand.NextFloat();
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type1, 0.0f, 0.0f, 100, new Color(), Scale2);
          Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Dust dust3 = Main.dust[index3];
          dust3.velocity = dust3.velocity * 2f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].fadeIn = 1f;
          Main.dust[index3].color = Color.Crimson * 0.5f;
          Dust dust4 = Main.dust[index3];
          dust4.velocity = dust4.velocity + vector2 * Main.rand.NextFloat();
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type2, 0.0f, 0.0f, 0, new Color(), Scale3);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 3f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 0.5f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + vector2 * (float) (0.600000023841858 + 0.600000023841858 * (double) Main.rand.NextFloat());
        }
      }
      else if (this.type == 651)
      {
        if ((double) this.localAI[0] == 1.0 && this.owner == Main.myPlayer)
        {
          Player master = Main.player[this.owner];
          Point point = new Vector2(this.ai[0], this.ai[1]).ToPoint();
          Point tileCoordinates = this.Center.ToTileCoordinates();
          if (Main.netMode == 1)
            NetMessage.SendData(109, -1, -1, (NetworkText) null, point.X, (float) point.Y, (float) tileCoordinates.X, (float) tileCoordinates.Y, (int) WiresUI.Settings.ToolMode, 0, 0);
          else
            Wiring.MassWireOperation(point, tileCoordinates, master);
        }
      }
      else if (this.type == 641)
      {
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == 642)
              Main.projectile[index].Kill();
          }
        }
      }
      else if (this.type == 643)
      {
        if (this.owner == Main.myPlayer)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].owner == this.owner && Main.projectile[index].type == 644)
              Main.projectile[index].Kill();
          }
        }
      }
      else if (this.type == 645)
      {
        bool flag = WorldGen.SolidTile(Framing.GetTileSafely((int) this.position.X / 16, (int) this.position.Y / 16));
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          if (flag)
            Main.dust[index2].noLight = true;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
          if (flag)
            Main.dust[index3].noLight = true;
        }
        for (int index1 = 0; index1 < 1; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      else if (this.type == 636)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        int index1 = 0;
        while (index1 < 6)
        {
          hitbox.X = (int) this.oldPos[index1].X;
          hitbox.Y = (int) this.oldPos[index1].Y;
          for (int index2 = 0; index2 < 5; ++index2)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 259, 158 });
            int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, 2.5f * (float) this.direction, -2.5f, 0, new Color(), 1f);
            Main.dust[index3].alpha = 200;
            Dust dust1 = Main.dust[index3];
            dust1.velocity = dust1.velocity * 2.4f;
            Dust dust2 = Main.dust[index3];
            dust2.scale = dust2.scale + Main.rand.NextFloat();
          }
          index1 += 3;
        }
      }
      else if (this.type == 614)
      {
        for (int index = 0; index < 10; ++index)
        {
          Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust1.noGravity = true;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 3f;
        }
      }
      if (this.type == 644)
      {
        Vector2 spinningpoint = new Vector2(0.0f, -3f).RotatedByRandom(3.14159274101257);
        float num1 = (float) Main.rand.Next(7, 13);
        Vector2 vector2 = new Vector2(2.1f, 2f);
        Color rgb = Main.hslToRgb(this.ai[0], 1f, 0.5f);
        rgb.A = byte.MaxValue;
        for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
        {
          int dustIndex = Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 0, rgb, 1f);
          Main.dust[dustIndex].position = this.Center;
          Main.dust[dustIndex].velocity = spinningpoint.RotatedBy(6.28318548202515 * (double) num2 / (double) num1, new Vector2()) * vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
          Main.dust[dustIndex].noGravity = true;
          Main.dust[dustIndex].scale = 2f;
          Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 2f;
          Dust dust1 = Dust.CloneDust(dustIndex);
          Dust dust2 = dust1;
          dust2.scale = dust2.scale / 2f;
          Dust dust3 = dust1;
          dust3.fadeIn = dust3.fadeIn / 2f;
          dust1.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        }
        for (float num2 = 0.0f; (double) num2 < (double) num1; ++num2)
        {
          int dustIndex = Dust.NewDust(this.Center, 0, 0, 267, 0.0f, 0.0f, 0, rgb, 1f);
          Main.dust[dustIndex].position = this.Center;
          Main.dust[dustIndex].velocity = spinningpoint.RotatedBy(6.28318548202515 * (double) num2 / (double) num1, new Vector2()) * vector2 * (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.400000005960464);
          Dust dust1 = Main.dust[dustIndex];
          dust1.velocity = dust1.velocity * (Main.rand.NextFloat() * 0.8f);
          Main.dust[dustIndex].noGravity = true;
          Main.dust[dustIndex].scale = Main.rand.NextFloat() * 1f;
          Main.dust[dustIndex].fadeIn = Main.rand.NextFloat() * 2f;
          Dust dust2 = Dust.CloneDust(dustIndex);
          Dust dust3 = dust2;
          dust3.scale = dust3.scale / 2f;
          Dust dust4 = dust2;
          dust4.fadeIn = dust4.fadeIn / 2f;
          dust2.color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        }
        if (Main.myPlayer == this.owner)
        {
          this.friendly = true;
          int width = this.width;
          int height = this.height;
          int penetrate = this.penetrate;
          this.position = this.Center;
          this.width = this.height = 60;
          this.Center = this.position;
          this.penetrate = -1;
          this.maxPenetrate = -1;
          this.Damage();
          this.penetrate = penetrate;
          this.position = this.Center;
          this.width = width;
          this.height = height;
          this.Center = this.position;
        }
      }
      if (this.type == 608)
      {
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        Main.PlaySound(SoundID.Item14, this.position);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index1 = 0; index1 < 30; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 200, new Color(), 3.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].fadeIn = 2.5f;
          Main.dust[index3].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 2.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
          Main.dust[index2].shader = GameShaders.Armor.GetSecondaryShader(Main.player[this.owner].ArmorSetDye(), Main.player[this.owner]);
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      else if (this.type == 661)
      {
        this.position = this.Center;
        this.width = this.height = 160;
        this.Center = this.position;
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        Main.PlaySound(SoundID.Item14, this.position);
        Vector2 Position = this.Center + Vector2.One * -20f;
        int Width = 40;
        int Height = Width;
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(Position, Width, Height, 240, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) Width / 2f;
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(Position, Width, Height, 62, 0.0f, 0.0f, 200, new Color(), 3.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) Width / 2f;
          Main.dust[index2].noGravity = true;
          Main.dust[index2].noLight = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + this.DirectionTo(Main.dust[index2].position) * (float) (2.0 + (double) Main.rand.NextFloat() * 4.0);
          int index3 = Dust.NewDust(Position, Width, Height, 62, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) Width / 2f;
          Dust dust3 = Main.dust[index3];
          dust3.velocity = dust3.velocity * 2f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].fadeIn = 1f;
          Main.dust[index3].color = Color.Crimson * 0.5f;
          Main.dust[index3].noLight = true;
          Dust dust4 = Main.dust[index3];
          dust4.velocity = dust4.velocity + this.DirectionTo(Main.dust[index3].position) * 8f;
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(Position, Width, Height, 62, 0.0f, 0.0f, 0, new Color(), 2.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) Width / 2f;
          Main.dust[index2].noGravity = true;
          Main.dust[index2].noLight = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + this.DirectionTo(Main.dust[index2].position) * 2f;
        }
        for (int index1 = 0; index1 < 70; ++index1)
        {
          int index2 = Dust.NewDust(Position, Width, Height, 240, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) Width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + this.DirectionTo(Main.dust[index2].position) * 3f;
        }
      }
      else if (this.type == 617)
      {
        this.position = this.Center;
        this.width = this.height = 176;
        this.Center = this.position;
        this.maxPenetrate = -1;
        this.penetrate = -1;
        this.Damage();
        Main.PlaySound(SoundID.Item14, this.position);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index1 = 0; index1 < 30; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, 0.0f, 0.0f, 200, new Color(), 3.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 90, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].fadeIn = 1f;
          Main.dust[index3].color = Color.Crimson * 0.5f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 62, 0.0f, 0.0f, 0, new Color(), 2.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 240, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        if (Main.myPlayer == this.owner)
        {
          for (int index = 0; index < 1000; ++index)
          {
            if (Main.projectile[index].active && Main.projectile[index].type == 618 && (double) Main.projectile[index].ai[1] == (double) this.whoAmI)
              Main.projectile[index].Kill();
          }
          int num1 = Main.rand.Next(5, 9);
          int num2 = Main.rand.Next(5, 9);
          int num3 = Utils.SelectRandom<int>(Main.rand, new int[2]{ 86, 90 });
          int num4 = num3 == 86 ? 90 : 86;
          for (int index = 0; index < num1; ++index)
          {
            Vector2 vector2_1 = this.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
            Vector2 vector2_2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2_2.X == 0.0 && (double) vector2_2.Y == 0.0)
              vector2_2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2_2.Normalize();
            if ((double) vector2_2.Y > 0.200000002980232)
              vector2_2.Y *= -1f;
            vector2_2 *= (float) Main.rand.Next(70, 101) * 0.1f;
            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 620, (int) ((double) this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float) num3, 0.0f);
          }
          for (int index = 0; index < num2; ++index)
          {
            Vector2 vector2_1 = this.Center + Utils.RandomVector2(Main.rand, -30f, 30f);
            Vector2 vector2_2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2_2.X == 0.0 && (double) vector2_2.Y == 0.0)
              vector2_2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2_2.Normalize();
            if ((double) vector2_2.Y > 0.400000005960464)
              vector2_2.Y *= -1f;
            vector2_2 *= (float) Main.rand.Next(40, 81) * 0.1f;
            Projectile.NewProjectile(vector2_1.X, vector2_1.Y, vector2_2.X, vector2_2.Y, 620, (int) ((double) this.damage * 0.65), this.knockBack * 0.8f, this.owner, (float) num4, 0.0f);
          }
        }
      }
      else if (this.type == 658)
      {
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 269, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index2].fadeIn = (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
            Main.dust[index2].scale = (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.00499999988824129);
            Dust dust = Main.dust[index2];
            dust.type = dust.type + 1;
          }
          else
            Main.dust[index2].scale = (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.25f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity / 10f;
        }
      }
      else if (this.type == 620 || this.type == 618)
      {
        if (this.type == 618)
          this.ai[0] = 86f;
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index2].fadeIn = (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
            Main.dust[index2].scale = (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.00499999988824129);
            Dust dust = Main.dust[index2];
            dust.type = dust.type + 1;
          }
          else
            Main.dust[index2].scale = (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.25f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity / 10f;
        }
      }
      else if (this.type == 619)
      {
        Main.PlaySound(SoundID.Item50, this.position);
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, (int) this.ai[0], this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index2].fadeIn = (float) (1.10000002384186 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
            Main.dust[index2].scale = (float) (0.349999994039536 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
            Dust dust = Main.dust[index2];
            dust.type = dust.type + 1;
          }
          else
            Main.dust[index2].scale = (float) (1.20000004768372 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 2.5f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity / 10f;
        }
        if (Main.myPlayer == this.owner)
        {
          int num = Main.rand.Next(3, 6);
          for (int index = 0; index < num; ++index)
          {
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2.X == 0.0 && (double) vector2.Y == 0.0)
              vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2.Normalize();
            vector2 *= (float) Main.rand.Next(70, 101) * 0.1f;
            Projectile.NewProjectile(this.oldPosition.X + (float) (this.width / 2), this.oldPosition.Y + (float) (this.height / 2), vector2.X, vector2.Y, 620, (int) ((double) this.damage * 0.8), this.knockBack * 0.8f, this.owner, this.ai[0], 0.0f);
          }
        }
      }
      if (this.type == 601)
      {
        Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
        portalColor.A = byte.MaxValue;
        for (int index = 0; index < 6; ++index)
        {
          Vector2 vector2 = Vector2.UnitY.RotatedByRandom(6.28318548202515) * (3f * Main.rand.NextFloat());
          Dust dust = Main.dust[Dust.NewDust(this.Center, 0, 0, 263, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust.position = this.Center;
          dust.velocity = vector2 + this.velocity / 5f;
          dust.color = portalColor;
          dust.scale = 2f;
          dust.noLight = true;
          dust.noGravity = true;
        }
      }
      if (this.type == 596)
      {
        this.position = this.Center;
        this.width = this.height = 60;
        this.Center = this.position;
        int num = 40;
        if (Main.expertMode)
          num = 30;
        this.damage = num;
        this.Damage();
        Main.PlaySound(SoundID.Item14, this.position);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0.0f, 0.0f, 0, new Color(), 2.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
        }
      }
      if (this.type == 659)
      {
        if ((double) this.ai[0] >= 0.0)
        {
          this.position = this.Center;
          this.width = this.height = 40;
          this.Center = this.position;
          this.Damage();
          Main.PlaySound(SoundID.Item14, this.position);
          for (int index1 = 0; index1 < 2; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          }
          for (int index1 = 0; index1 < 10; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0.0f, 0.0f, 0, new Color(), 2.5f);
            Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 2f;
          }
          for (int index1 = 0; index1 < 5; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
            Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
            Main.dust[index2].noGravity = true;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 2f;
          }
        }
      }
      else if (this.type >= 625 && this.type <= 628)
      {
        for (int index1 = 0; index1 < 6; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 2f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].noLight = true;
        }
      }
      if (this.type == 631)
      {
        int num = Main.rand.Next(5, 10);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.6f;
          --Main.dust[index2].velocity.Y;
          Dust dust2 = Main.dust[index2];
          dust2.position = dust2.position - Vector2.One * 4f;
          Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 539)
      {
        this.position = this.Center;
        this.width = this.height = 80;
        this.Center = this.position;
        this.Damage();
        Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 7, 1f, 0.0f);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 176, 0.0f, 0.0f, 200, new Color(), 3.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 180, 0.0f, 0.0f, 0, new Color(), 2.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
      }
      else if (this.type == 585)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 26, 0.0f, 0.0f, 100, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.2f;
          Main.dust[index2].scale = 1.3f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 27, 0.0f, 0.0f, 100, new Color(), 2f);
          Main.dust[index3].noGravity = true;
          Dust dust3 = Main.dust[index3];
          dust3.velocity = dust3.velocity * 3f;
        }
      }
      else if (this.type == 590)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 165, 0.0f, 0.0f, 50, new Color(), 1.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
          Main.dust[index2].noGravity = true;
        }
        float Scale = (float) (0.600000023841858 + (double) Main.rand.NextFloat() * 0.400000005960464);
        int index3 = Gore.NewGore(this.position, Vector2.Zero, 375, Scale);
        Gore gore1 = Main.gore[index3];
        gore1.velocity = gore1.velocity * 0.3f;
        int index4 = Gore.NewGore(this.position, Vector2.Zero, 376, Scale);
        Gore gore2 = Main.gore[index4];
        gore2.velocity = gore2.velocity * 0.3f;
        int index5 = Gore.NewGore(this.position, Vector2.Zero, 377, Scale);
        Gore gore3 = Main.gore[index5];
        gore3.velocity = gore3.velocity * 0.3f;
      }
      else if (this.type == 587)
      {
        Color rgb = Main.hslToRgb(this.ai[1], 1f, 0.5f);
        rgb.A = (byte) 200;
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 76, 0.0f, 0.0f, 0, rgb, 1f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.2f;
          Main.dust[index2].scale = 0.9f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 76, 0.0f, 0.0f, 0, rgb, 1.1f);
          Main.dust[index3].noGravity = true;
          Dust dust3 = Main.dust[index3];
          dust3.velocity = dust3.velocity * 2f;
        }
      }
      else if (this.type == 572)
      {
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, new Color(), 1f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
          Main.dust[index2].noGravity = true;
          Main.dust[index2].scale = 1.25f;
          Main.dust[index2].position = (this.Center + this.position) / 2f;
        }
      }
      else if (this.type == 581)
      {
        for (int index = 0; index < 30; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 229, 229, 161 });
          Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust1.noGravity = true;
          dust1.scale = 1.25f + Main.rand.NextFloat();
          dust1.fadeIn = 0.25f;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 2f;
          dust1.noLight = true;
        }
      }
      else if (this.type == 671)
      {
        for (int index = 0; index < 30; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 27, 27, 62 });
          Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust1.noGravity = true;
          dust1.scale = 1.25f + Main.rand.NextFloat();
          dust1.fadeIn = 0.25f;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 2f;
          dust1.noLight = true;
        }
      }
      else if (this.type == 675)
      {
        for (int index = 0; index < 40; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, new int[8]{ 27, 242, 73, 72, 71, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue });
          Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust1.noGravity = true;
          dust1.scale = 1.25f + Main.rand.NextFloat();
          dust1.fadeIn = 0.25f;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 3f;
          dust1.noLight = true;
        }
      }
      else if (this.type == 676)
      {
        for (int index = 0; index < 120; ++index)
        {
          int Type = Utils.SelectRandom<int>(Main.rand, new int[2]{ 4, 256 });
          Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 100, new Color(), 1f)];
          dust1.scale = (float) (0.800000011920929 + (double) Main.rand.NextFloat() * 0.600000023841858);
          dust1.fadeIn = 0.5f;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 4.5f;
          dust1.noLight = true;
          if ((double) dust1.velocity.Y > 0.0)
          {
            Dust dust3 = dust1;
            dust3.velocity = dust3.velocity * -0.5f;
          }
          if (dust1.type == 4)
            dust1.color = new Color(80, 170, 40, 120);
        }
        for (int index = 0; index < 10; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 5.0)), 1024, 1f);
        for (int index = 0; index < 10; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 5.0)), 1025, 1f);
        for (int index = 0; index < 10; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-5f, 5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 5.0)), 1026, 1f);
        for (int index = 0; index < 20; ++index)
          Gore.NewGoreDirect(this.Center, new Vector2(MathHelper.Lerp(-0.5f, 0.5f, Main.rand.NextFloat()), (float) (-(double) Main.rand.NextFloat() * 2.0)), 1026, 1f);
        if (Main.netMode != 2)
        {
          Player player = Main.player[Main.myPlayer];
          if (!player.dead && player.active && (double) (player.Center - this.Center).Length() < 300.0)
            player.AddBuff(197, 900, false);
        }
      }
      else if (this.type == 686)
      {
        Microsoft.Xna.Framework.Rectangle hitbox = this.Hitbox;
        int index1 = 0;
        while (index1 < this.oldPos.Length / 2)
        {
          hitbox.X = (int) this.oldPos[index1].X;
          hitbox.Y = (int) this.oldPos[index1].Y;
          for (int index2 = 0; index2 < 3; ++index2)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 55, 158 });
            int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f, 0, new Color(), 1f);
            Main.dust[index3].alpha = 200;
            Dust dust1 = Main.dust[index3];
            dust1.velocity = dust1.velocity * 2.4f;
            Dust dust2 = Main.dust[index3];
            dust2.scale = dust2.scale + Main.rand.NextFloat();
            Dust dust3 = Main.dust[index3];
            dust3.scale = dust3.scale - 0.5f;
            if (Main.dust[index3].type == 55)
              Main.dust[index3].color = Color.Lerp(Color.Red, Color.Gold, Main.rand.NextFloat());
            Main.dust[index3].noLight = true;
          }
          index1 += 2;
        }
        int index4 = 10;
        while (index4 < this.oldPos.Length)
        {
          hitbox.X = (int) this.oldPos[index4].X;
          hitbox.Y = (int) this.oldPos[index4].Y;
          for (int index2 = 0; index2 < 2; ++index2)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[1]{ 55 });
            int index3 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f, 0, new Color(), 1f);
            Main.dust[index3].alpha = 120;
            Dust dust1 = Main.dust[index3];
            dust1.velocity = dust1.velocity * 2.4f;
            Dust dust2 = Main.dust[index3];
            dust2.scale = dust2.scale + Main.rand.NextFloat() * 0.7f;
            Dust dust3 = Main.dust[index3];
            dust3.scale = dust3.scale - 0.5f;
            if (Main.dust[index3].type == 55)
              Main.dust[index3].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
            Main.dust[index3].noLight = true;
          }
          index4 += 2;
        }
        for (int index2 = 5; index2 < this.oldPos.Length; ++index2)
        {
          hitbox.X = (int) this.oldPos[index2].X;
          hitbox.Y = (int) this.oldPos[index2].Y;
          for (int index3 = 0; index3 < 1; ++index3)
          {
            int Type = Utils.SelectRandom<int>(Main.rand, new int[1]{ 55 });
            int index5 = Dust.NewDust(hitbox.TopLeft(), this.width, this.height, Type, (float) this.direction, -2.5f, 0, new Color(), 1f);
            Main.dust[index5].alpha = 80;
            Dust dust1 = Main.dust[index5];
            dust1.velocity = dust1.velocity * 0.3f;
            Dust dust2 = Main.dust[index5];
            dust2.velocity = dust2.velocity + this.velocity * 0.5f;
            Dust dust3 = Main.dust[index5];
            dust3.scale = dust3.scale + Main.rand.NextFloat() * 0.7f;
            Dust dust4 = Main.dust[index5];
            dust4.scale = dust4.scale - 0.5f;
            if (Main.dust[index5].type == 55)
              Main.dust[index5].color = Color.Lerp(Color.Purple, Color.Black, Main.rand.NextFloat());
            Main.dust[index5].noLight = true;
          }
        }
        for (int index2 = 0; index2 < 30; ++index2)
        {
          int Type = 228;
          Dust dust1 = Main.dust[Dust.NewDust(this.position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f)];
          dust1.noGravity = true;
          dust1.scale = 1.25f + Main.rand.NextFloat();
          dust1.fadeIn = 1.5f;
          Dust dust2 = dust1;
          dust2.velocity = dust2.velocity * 6f;
          dust1.noLight = true;
        }
      }
      if (this.type == 405)
      {
        Main.PlaySound(SoundID.Item54, this.position);
        Vector2 center = this.Center;
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int num = 10;
          int index2 = Dust.NewDust(this.Center - Vector2.One * (float) num, num * 2, num * 2, 212, 0.0f, 0.0f, 0, new Color(), 1f);
          Dust dust = Main.dust[index2];
          Vector2 vector2 = Vector2.Normalize(dust.position - this.Center);
          dust.position = this.Center + vector2 * (float) num * this.scale;
          dust.velocity = index1 >= 30 ? vector2 * (float) Main.rand.Next(45, 91) / 10f : vector2 * dust.velocity.Length();
          dust.color = Main.hslToRgb((float) (0.400000005960464 + Main.rand.NextDouble() * 0.200000002980232), 0.9f, 0.5f);
          dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
          dust.noGravity = true;
          dust.scale = 0.7f;
        }
      }
      if (this.type == 501)
      {
        Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        int num1 = 20;
        this.position.X -= (float) num1;
        this.position.Y -= (float) num1;
        this.width = this.width + num1 * 2;
        this.height = this.height + num1 * 2;
        int num2 = num1 + 20;
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 188, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 0.5f;
        }
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int index2 = Gore.NewGore(new Vector2(this.position.X + (float) Main.rand.Next(this.width), this.position.Y + (float) Main.rand.Next(this.height)), new Vector2(), Main.rand.Next(435, 438), 1f);
          Gore gore1 = Main.gore[index2];
          gore1.velocity = gore1.velocity * 0.5f;
          if (index1 == 0)
          {
            ++Main.gore[index2].velocity.X;
            ++Main.gore[index2].velocity.Y;
          }
          else if (index1 == 1)
          {
            --Main.gore[index2].velocity.X;
            ++Main.gore[index2].velocity.Y;
          }
          else if (index1 == 2)
          {
            ++Main.gore[index2].velocity.X;
            --Main.gore[index2].velocity.Y;
          }
          else
          {
            --Main.gore[index2].velocity.X;
            --Main.gore[index2].velocity.Y;
          }
          Gore gore2 = Main.gore[index2];
          gore2.velocity = gore2.velocity * 0.5f;
        }
        this.position.X -= (float) num2;
        this.position.Y -= (float) num2;
        this.width = this.width + num2 * 2;
        this.height = this.height + num2 * 2;
        this.Damage();
      }
      if (this.type == 410)
      {
        Main.PlaySound(SoundID.Item54, this.position);
        Vector2 center = this.Center;
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int num = (int) (10.0 * (double) this.ai[1]);
          int index2 = Dust.NewDust(this.Center - Vector2.One * (float) num, num * 2, num * 2, 212, 0.0f, 0.0f, 0, new Color(), 1f);
          Dust dust = Main.dust[index2];
          Vector2 vector2 = Vector2.Normalize(dust.position - this.Center);
          dust.position = this.Center + vector2 * (float) num * this.scale;
          dust.velocity = index1 >= 30 ? vector2 * (float) Main.rand.Next(45, 91) / 10f : vector2 * dust.velocity.Length();
          dust.color = Main.hslToRgb((float) (0.400000005960464 + Main.rand.NextDouble() * 0.200000002980232), 0.9f, 0.5f);
          dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
          dust.noGravity = true;
          dust.scale = 0.7f;
        }
      }
      if (this.type == 629 && Main.netMode != 1)
      {
        switch (Main.npc[(int) this.ai[0]].type)
        {
          case 507:
            if (NPC.ShieldStrengthTowerNebula != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerNebula = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerNebula - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
          case 517:
            if (NPC.ShieldStrengthTowerSolar != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerSolar = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerSolar - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
          case 422:
            if (NPC.ShieldStrengthTowerVortex != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerVortex = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerVortex - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
          case 493:
            if (NPC.ShieldStrengthTowerStardust != 0)
              Main.npc[(int) this.ai[0]].ai[3] = 1f;
            NPC.ShieldStrengthTowerStardust = (int) MathHelper.Clamp((float) (NPC.ShieldStrengthTowerStardust - 1), 0.0f, (float) NPC.ShieldStrengthTowerMax);
            break;
        }
        Main.npc[(int) this.ai[0]].netUpdate = true;
        NetMessage.SendData(101, -1, -1, (NetworkText) null, 0, 0.0f, 0.0f, 0.0f, 0, 0, 0);
      }
      if (this.aiStyle == 105 && this.owner == Main.myPlayer && (double) this.ai[1] == 0.0)
      {
        Vector2 vector2_1 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
        vector2_1.Normalize();
        Vector2 vector2_2 = vector2_1 * 0.3f;
        Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, Main.rand.Next(569, 572), this.damage, 0.0f, this.owner, 0.0f, 0.0f);
      }
      if (this.type == 452)
      {
        Main.PlaySound(29, (int) this.position.X, (int) this.position.Y, 103, 1f, 0.0f);
        this.position = this.Center;
        this.width = this.height = 144;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
        for (int index1 = 0; index1 < 40; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
        }
        for (int index1 = 0; index1 < 1; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      if (this.type == 454)
      {
        Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 6, 1f, 0.0f);
        this.position = this.Center;
        this.width = this.height = 208;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index1 = 0; index1 < 7; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(), new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
        }
        for (int index1 = 0; index1 < 60; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 0, new Color(), 2.5f);
          Main.dust[index2].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(), new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index3].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(), new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 1f;
          Main.dust[index3].noGravity = true;
        }
        for (int index1 = 0; index1 < 3; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      if (this.type == 467)
      {
        this.position = this.Center;
        this.width = this.height = 176;
        this.Center = this.position;
        this.Damage();
        Main.PlaySound(SoundID.Item14, this.position);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index1 = 0; index1 < 30; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 200, new Color(), 3.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].fadeIn = 2.5f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 2.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      if (this.type == 468)
      {
        this.position = this.Center;
        this.width = this.height = 176;
        this.Center = this.position;
        this.Damage();
        Main.PlaySound(SoundID.Item14, this.position);
        for (int index1 = 0; index1 < 4; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0.0f, 0.0f, 200, new Color(), 3.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index3].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
          Main.dust[index3].fadeIn = 2.5f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, 0.0f, 0.0f, 0, new Color(), 2.7f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = this.Center + Vector2.UnitX.RotatedByRandom(3.14159274101257).RotatedBy((double) this.velocity.ToRotation(), new Vector2()) * (float) this.width / 2f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 3f;
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Main.gore[index2].position = this.Center + Vector2.UnitY.RotatedByRandom(3.14159274101257) * (float) Main.rand.NextDouble() * (float) this.width / 2f;
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
      }
      if (this.type == 485)
      {
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 6, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.oldVelocity * (float) Main.rand.Next(20, 60) * 0.01f;
        }
      }
      else if (this.type == 484)
      {
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 78, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.oldVelocity / 5f;
          Main.dust[index2].scale = 0.85f;
        }
      }
      else if (this.type == 483)
      {
        Main.PlaySound(SoundID.Item14, this.position);
        if (this.owner == Main.myPlayer)
        {
          int length = Main.rand.Next(4, 8);
          int[] numArray = new int[length];
          int maxValue = 0;
          for (int index = 0; index < 200; ++index)
          {
            if (Main.npc[index].CanBeChasedBy((object) this, true) && Collision.CanHitLine(this.position, this.width, this.height, Main.npc[index].position, Main.npc[index].width, Main.npc[index].height))
            {
              numArray[maxValue] = index;
              ++maxValue;
              if (maxValue == length)
                break;
            }
          }
          if (maxValue > 1)
          {
            for (int index1 = 0; index1 < 100; ++index1)
            {
              int index2 = Main.rand.Next(maxValue);
              int index3 = index2;
              while (index3 == index2)
                index3 = Main.rand.Next(maxValue);
              int num = numArray[index2];
              numArray[index2] = numArray[index3];
              numArray[index3] = num;
            }
          }
          Vector2 vector2_1 = new Vector2(-1f, -1f);
          for (int index = 0; index < maxValue; ++index)
          {
            Vector2 vector2_2 = Main.npc[numArray[index]].Center - this.Center;
            vector2_2.Normalize();
            vector2_1 += vector2_2;
          }
          vector2_1.Normalize();
          for (int index = 0; index < length; ++index)
          {
            float num = (float) Main.rand.Next(8, 15);
            Vector2 vector2_2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2_2.Normalize();
            if (maxValue > 0)
            {
              vector2_2 += vector2_1;
              vector2_2.Normalize();
            }
            vector2_2 *= num;
            if (maxValue > 0)
            {
              --maxValue;
              vector2_2 = Main.npc[numArray[maxValue]].Center - this.Center;
              vector2_2.Normalize();
              vector2_2 *= num;
            }
            Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, 484, (int) ((double) this.damage * 0.7), this.knockBack * 0.7f, this.owner, 0.0f, 0.0f);
          }
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 78, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 4f;
        }
        for (int index1 = 0; index1 < 7; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 0.9f;
          Main.dust[index2].scale = 0.9f;
        }
        for (int index1 = 0; index1 < 3; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
        }
        int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
        Gore gore = Main.gore[index4];
        gore.velocity = gore.velocity * 0.3f;
        Main.gore[index4].velocity.X += (float) Main.rand.Next(-1, 2);
        Main.gore[index4].velocity.Y += (float) Main.rand.Next(-1, 2);
        if (this.owner == Main.myPlayer)
        {
          int num = 100;
          this.position.X -= (float) (num / 2);
          this.position.Y -= (float) (num / 2);
          this.width = this.width + num;
          this.height = this.height + 1;
          this.penetrate = -1;
          this.Damage();
        }
      }
      if (this.type == 523)
      {
        Main.PlaySound(SoundID.Item54, this.position);
        for (int index1 = 0; index1 < 25; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 256, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].position = (Main.dust[index2].position + this.position) / 2f;
          Main.dust[index2].velocity = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
          Main.dust[index2].velocity.Normalize();
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * ((float) Main.rand.Next(1, 30) * 0.1f);
          Main.dust[index2].alpha = this.alpha;
        }
      }
      else if (this.type == 522)
      {
        Main.PlaySound(SoundID.Item118, this.position);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index2].fadeIn = (float) (0.75 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
            Main.dust[index2].scale = (float) (0.25 + (double) Main.rand.Next(-10, 11) * 0.00499999988824129);
            Dust dust = Main.dust[index2];
            dust.type = dust.type + 1;
          }
          else
            Main.dust[index2].scale = (float) (1.0 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.25f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity / 10f;
        }
      }
      else if (this.type == 521)
      {
        Main.PlaySound(SoundID.Item110, this.position);
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 254, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.5f);
          if (Main.rand.Next(3) == 0)
          {
            Main.dust[index2].fadeIn = (float) (1.10000002384186 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
            Main.dust[index2].scale = (float) (0.349999994039536 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
            Dust dust = Main.dust[index2];
            dust.type = dust.type + 1;
          }
          else
            Main.dust[index2].scale = (float) (1.20000004768372 + (double) Main.rand.Next(-10, 11) * 0.00999999977648258);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 2.5f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity / 10f;
        }
        if (Main.myPlayer == this.owner)
        {
          int num = Main.rand.Next(3, 6);
          for (int index = 0; index < num; ++index)
          {
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            while ((double) vector2.X == 0.0 && (double) vector2.Y == 0.0)
              vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2.Normalize();
            vector2 *= (float) Main.rand.Next(70, 101) * 0.1f;
            Projectile.NewProjectile(this.oldPosition.X + (float) (this.width / 2), this.oldPosition.Y + (float) (this.height / 2), vector2.X, vector2.Y, 522, (int) ((double) this.damage * 0.8), this.knockBack * 0.8f, this.owner, 0.0f, 0.0f);
          }
        }
      }
      if (this.type == 520)
      {
        Main.PlaySound(SoundID.Item50, this.position);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 252, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.75f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.oldVelocity / 3f;
        }
      }
      if (this.type == 459 || this.type == 709)
      {
        int num1 = 3;
        int num2 = 10;
        int num3 = 0;
        if ((double) this.scale >= 1.0)
        {
          this.position = this.Center;
          this.width = this.height = 144;
          this.Center = this.position;
          num1 = 7;
          num2 = 30;
          num3 = 2;
          this.Damage();
        }
        for (int index1 = 0; index1 < num1; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Main.dust[index2].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(), new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
        }
        for (int index1 = 0; index1 < num2; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 226, 0.0f, 0.0f, 0, new Color(), 1.5f);
          Main.dust[index2].position = new Vector2((float) (this.width / 2), 0.0f).RotatedBy(6.28318548202515 * Main.rand.NextDouble(), new Vector2()) * (float) Main.rand.NextDouble() + this.Center;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1f;
        }
        for (int index1 = 0; index1 < num3; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        if (this.type == 709 && Main.myPlayer == this.owner)
        {
          Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X - 40, (int) this.Center.Y - 40, 80, 80);
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI && Main.projectile[index].active && (Main.projectile[index].owner == this.owner && Main.projectile[index].type == 443) && Main.projectile[index].getRect().Intersects(rectangle))
            {
              Main.projectile[index].ai[1] = 1f;
              Main.projectile[index].velocity = (this.Center - Main.projectile[index].Center) / 5f;
              Main.projectile[index].netUpdate = true;
            }
          }
          int index1 = Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 443, this.damage, 0.0f, this.owner, 0.0f, 0.0f);
          Main.projectile[index1].timeLeft = 30 * Main.rand.Next(2, 6);
          float[] localAi = Main.projectile[index1].localAI;
          int index2 = 0;
          SlotId slotId = Main.PlayTrackedSound((SoundStyle) SoundID.DD2_SkyDragonsFuryCircle, this.Center);
          // ISSUE: explicit reference operation
          double num4 = (double) ((SlotId) @slotId).ToFloat();
          localAi[index2] = (float) num4;
        }
      }
      if (this.owner != Main.myPlayer && this.type == 453 && Main.player[this.owner].mount.AbilityActive)
        Main.player[this.owner].mount.UseAbility(Main.player[this.owner], this.position, false);
      if (this.type == 441)
        Main.player[this.owner].mount.StopAbilityCharge();
      if (this.type == 444)
      {
        Main.PlaySound(SoundID.Item96, this.position);
        int num = Main.rand.Next(5, 9);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 171, 0.0f, 0.0f, 100, new Color(), 1.4f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 0.8f;
          Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
          Main.dust[index2].noGravity = true;
        }
        if (this.owner == Main.myPlayer)
        {
          Vector2 vector2_1 = Main.screenPosition + new Vector2((float) Main.mouseX, (float) Main.mouseY);
          if ((double) Main.player[this.owner].gravDir == -1.0)
            vector2_1.Y = (float) (Main.screenHeight - Main.mouseY) + Main.screenPosition.Y;
          Vector2 vector2_2 = Vector2.Normalize(vector2_1 - this.Center) * this.localAI[1];
          Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2_2.X, vector2_2.Y, (int) this.localAI[0], this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
        }
      }
      if (this.type == 472)
      {
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 30, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 0.45f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + this.velocity * 0.9f;
        }
      }
      if (this.type == 639 || this.type == 640)
      {
        int num1 = Main.rand.Next(5, 10);
        for (int index1 = 0; index1 < num1; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 220, 0.0f, 0.0f, 100, new Color(), 0.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1.6f;
          --Main.dust[index2].velocity.Y;
          Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
          Main.dust[index2].noGravity = true;
        }
        if (this.owner == Main.myPlayer && this.type == 639)
        {
          int num2 = timeLeft + 1;
          int nextSlot = Projectile.GetNextSlot();
          if (Main.ProjectileUpdateLoopIndex < nextSlot && Main.ProjectileUpdateLoopIndex != -1)
            ++num2;
          Vector2 vector2 = new Vector2(this.ai[0], this.ai[1]);
          Projectile.NewProjectile(this.localAI[0], this.localAI[1], vector2.X, vector2.Y, 640, this.damage, this.knockBack, this.owner, 0.0f, (float) num2);
        }
      }
      if (this.type == 684)
      {
        int num = Main.rand.Next(15, 25);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 60, 0.0f, 0.0f, 100, new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0), 1.3f);
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * (float) (8.0 * (0.300000011920929 + 0.699999988079071 * (double) Main.rand.NextFloat()));
          Main.dust[index2].fadeIn = (float) (1.29999995231628 + (double) Main.rand.NextFloat() * 0.200000002980232);
          Main.dust[index2].noLight = true;
          Main.dust[index2].noGravity = true;
          Dust dust2 = Main.dust[index2];
          dust2.position = dust2.position + Main.dust[index2].velocity * 4f;
        }
      }
      if (this.type == 435)
      {
        int num = Main.rand.Next(5, 10);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 226, 0.0f, 0.0f, 100, new Color(), 0.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1.6f;
          --Main.dust[index2].velocity.Y;
          Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 682)
      {
        int num = 22;
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 272, 0.0f, 0.0f, 0, new Color(), 0.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1.6f;
          --Main.dust[index2].velocity.Y;
          Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
        }
      }
      if (this.type == 436)
      {
        int num = Main.rand.Next(5, 10);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 220, 0.0f, 0.0f, 100, new Color(), 0.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1.6f;
          --Main.dust[index2].velocity.Y;
          Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 462)
      {
        int num = Main.rand.Next(5, 10);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 0.5f);
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.6f;
          --Main.dust[index2].velocity.Y;
          Dust dust2 = Main.dust[index2];
          dust2.position = dust2.position - Vector2.One * 4f;
          Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 442)
      {
        Main.PlaySound(SoundID.Item94, this.position);
        int num = Main.rand.Next(3, 7);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 2.1f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
          Main.dust[index2].noGravity = true;
        }
        if (Main.myPlayer == this.owner)
        {
          Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int) this.Center.X - 40, (int) this.Center.Y - 40, 80, 80);
          for (int index = 0; index < 1000; ++index)
          {
            if (index != this.whoAmI && Main.projectile[index].active && (Main.projectile[index].owner == this.owner && Main.projectile[index].type == 443) && Main.projectile[index].getRect().Intersects(rectangle))
            {
              Main.projectile[index].ai[1] = 1f;
              Main.projectile[index].velocity = (this.Center - Main.projectile[index].Center) / 5f;
              Main.projectile[index].netUpdate = true;
            }
          }
          Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 443, this.damage, 0.0f, this.owner, 0.0f, 0.0f);
        }
      }
      if (this.type == 440)
      {
        int num = Main.rand.Next(3, 7);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 135, 0.0f, 0.0f, 100, new Color(), 2.1f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 606)
      {
        int num = Main.rand.Next(3, 7);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 182, 0.0f, 0.0f, 100, new Color(), 1.6f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1.5f;
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 449)
      {
        int num = Main.rand.Next(3, 7);
        for (int index1 = 0; index1 < num; ++index1)
        {
          int index2 = Dust.NewDust(this.Center - this.velocity / 2f, 0, 0, 228, 0.0f, 0.0f, 100, new Color(), 2.1f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 495)
      {
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 10, 10, 27, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.oldVelocity * 0.3f;
        }
      }
      if (this.type == 497)
      {
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(this.Center, 10, 10, 27, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 2f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
          Dust dust3 = Main.dust[index2];
          dust3.scale = dust3.scale + (float) Main.rand.Next(150) * (1f / 1000f);
        }
      }
      if (this.type == 448)
      {
        Main.PlaySound(SoundID.Item14, this.position);
        this.position = this.Center;
        this.width = this.height = 112;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
        for (int index1 = 0; index1 < 40; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0.0f, 0.0f, 0, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 228, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
        }
        for (int index1 = 0; index1 < 1; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      if (this.type == 616)
      {
        Main.PlaySound(SoundID.Item14, this.position);
        this.position = this.Center;
        this.width = this.height = 80;
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 4; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
        for (int index1 = 0; index1 < 40; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 200, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 2f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 229, 0.0f, 0.0f, 200, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 1.2f;
          Main.dust[index3].noGravity = true;
        }
        for (int index1 = 0; index1 < 1; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        this.Damage();
      }
      if (this.type == 502)
      {
        Vector2 vector2 = new Vector2((float) this.width, (float) this.height) / 2f;
        for (int index1 = 0; index1 < this.oldPos.Length; ++index1)
        {
          if (!(this.oldPos[index1] == Vector2.Zero))
          {
            int index2 = Dust.NewDust(this.oldPos[index1] + vector2, 0, 0, 66, 0.0f, 0.0f, 150, Color.Transparent, 0.7f);
            Main.dust[index2].color = Main.hslToRgb(Main.rand.NextFloat(), 1f, 0.5f);
            Main.dust[index2].noGravity = true;
          }
        }
      }
      if (this.type == 510)
      {
        Main.PlaySound(SoundID.Item107, this.position);
        Gore.NewGore(this.Center, -this.oldVelocity * 0.2f, 704, 1f);
        Gore.NewGore(this.Center, -this.oldVelocity * 0.2f, 705, 1f);
        if (this.owner == Main.myPlayer)
        {
          int num = Main.rand.Next(20, 31);
          for (int index = 0; index < num; ++index)
          {
            Vector2 vector2 = new Vector2((float) Main.rand.Next(-100, 101), (float) Main.rand.Next(-100, 101));
            vector2.Normalize();
            vector2 *= (float) Main.rand.Next(10, 201) * 0.01f;
            Projectile.NewProjectile(this.Center.X, this.Center.Y, vector2.X, vector2.Y, 511 + Main.rand.Next(3), this.damage, 1f, this.owner, 0.0f, (float) Main.rand.Next(-45, 1));
          }
        }
      }
      if (this.type == 408)
      {
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(this.Center - Vector2.One * 10f, 50, 50, 5, 0.0f, -2f, 0, new Color(), 1f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity / 2f;
        }
        int num = 10;
        int index3 = Gore.NewGore(this.Center, this.velocity * 0.8f, 584, 1f);
        Gore gore1 = Main.gore[index3];
        gore1.timeLeft = gore1.timeLeft / num;
        int index4 = Gore.NewGore(this.Center, this.velocity * 0.9f, 585, 1f);
        Gore gore2 = Main.gore[index4];
        gore2.timeLeft = gore2.timeLeft / num;
        int index5 = Gore.NewGore(this.Center, this.velocity * 1f, 586, 1f);
        Gore gore3 = Main.gore[index5];
        gore3.timeLeft = gore3.timeLeft / num;
      }
      if (this.type == 385)
      {
        Main.PlaySound(4, (int) this.Center.X, (int) this.Center.Y, 19, 1f, 0.0f);
        int num1 = 36;
        for (int index1 = 0; index1 < num1; ++index1)
        {
          Vector2 vector2_1 = (Vector2.Normalize(this.velocity) * new Vector2((float) this.width / 2f, (float) this.height) * 0.75f).RotatedBy((double) (index1 - (num1 / 2 - 1)) * 6.28318548202515 / (double) num1, new Vector2()) + this.Center;
          Vector2 vector2_2 = vector2_1 - this.Center;
          int index2 = Dust.NewDust(vector2_1 + vector2_2, 0, 0, 172, vector2_2.X * 2f, vector2_2.Y * 2f, 100, new Color(), 1.4f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].noLight = true;
          Main.dust[index2].velocity = vector2_2;
        }
        if (this.owner == Main.myPlayer)
        {
          if ((double) this.ai[1] < 1.0)
          {
            int index = Projectile.NewProjectile(this.Center.X - (float) (this.direction * 30), this.Center.Y - 4f, (float) -this.direction * 0.01f, 0.0f, 384, Main.expertMode ? 25 : 40, 4f, this.owner, 16f, 15f);
            Main.projectile[index].netUpdate = true;
          }
          else
          {
            int num2 = (int) ((double) this.Center.Y / 16.0);
            int index1 = (int) ((double) this.Center.X / 16.0);
            int num3 = 100;
            if (index1 < 10)
              index1 = 10;
            if (index1 > Main.maxTilesX - 10)
              index1 = Main.maxTilesX - 10;
            if (num2 < 10)
              num2 = 10;
            if (num2 > Main.maxTilesY - num3 - 10)
              num2 = Main.maxTilesY - num3 - 10;
            for (int index2 = num2; index2 < num2 + num3; ++index2)
            {
              Tile tile = Main.tile[index1, index2];
              if (tile.active() && (Main.tileSolid[(int) tile.type] || (int) tile.liquid != 0))
              {
                num2 = index2;
                break;
              }
            }
            int Damage = Main.expertMode ? 50 : 80;
            int index3 = Projectile.NewProjectile((float) (index1 * 16 + 8), (float) (num2 * 16 - 24), 0.0f, 0.0f, 386, Damage, 4f, Main.myPlayer, 16f, 24f);
            Main.projectile[index3].netUpdate = true;
          }
        }
      }
      else if (this.type >= 424 && this.type <= 426)
      {
        Main.PlaySound(SoundID.Item89, this.position);
        this.position.X += (float) (this.width / 2);
        this.position.Y += (float) (this.height / 2);
        this.width = (int) (128.0 * (double) this.scale);
        this.height = (int) (128.0 * (double) this.scale);
        this.position.X -= (float) (this.width / 2);
        this.position.Y -= (float) (this.height / 2);
        for (int index = 0; index < 8; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
        for (int index1 = 0; index1 < 32; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 3f;
          int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 2f;
          Main.dust[index3].noGravity = true;
        }
        for (int index1 = 0; index1 < 2; ++index1)
        {
          int index2 = Gore.NewGore(this.position + new Vector2((float) (this.width * Main.rand.Next(100)) / 100f, (float) (this.height * Main.rand.Next(100)) / 100f) - Vector2.One * 10f, new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore = Main.gore[index2];
          gore.velocity = gore.velocity * 0.3f;
          Main.gore[index2].velocity.X += (float) Main.rand.Next(-10, 11) * 0.05f;
          Main.gore[index2].velocity.Y += (float) Main.rand.Next(-10, 11) * 0.05f;
        }
        if (this.owner == Main.myPlayer)
        {
          this.localAI[1] = -1f;
          this.maxPenetrate = 0;
          this.Damage();
        }
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, Utils.SelectRandom<int>(Main.rand, new int[3]{ 6, 259, 158 }), 2.5f * (float) this.direction, -2.5f, 0, new Color(), 1f);
          Main.dust[index2].alpha = 200;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 2.4f;
          Dust dust2 = Main.dust[index2];
          dust2.scale = dust2.scale + Main.rand.NextFloat();
        }
      }
      if (this.type == 399)
      {
        Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        Vector2 vector2 = new Vector2(20f, 20f);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 12, 0.0f, 0.0f, 0, Color.Red, 1f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1.4f;
        }
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 5f;
          int index3 = Dust.NewDust(this.Center - vector2 / 2f, (int) vector2.X, (int) vector2.Y, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
          Dust dust2 = Main.dust[index3];
          dust2.velocity = dust2.velocity * 3f;
        }
        if (Main.myPlayer == this.owner)
        {
          for (int index = 0; index < 6; ++index)
          {
            float SpeedX = (float) (-(double) this.velocity.X * (double) Main.rand.Next(20, 50) * 0.00999999977648258 + (double) Main.rand.Next(-20, 21) * 0.400000005960464);
            float SpeedY = (float) (-(double) Math.Abs(this.velocity.Y) * (double) Main.rand.Next(30, 50) * 0.00999999977648258 + (double) Main.rand.Next(-20, 5) * 0.400000005960464);
            Projectile.NewProjectile(this.Center.X + SpeedX, this.Center.Y + SpeedY, SpeedX, SpeedY, 400 + Main.rand.Next(3), (int) ((double) this.damage * 0.5), 0.0f, this.owner, 0.0f, 0.0f);
          }
        }
      }
      if (this.type == 384 || this.type == 386)
      {
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 212, (float) (this.direction * 2), 0.0f, 100, new Color(), 1.4f);
          Dust dust = Main.dust[index2];
          dust.color = Color.CornflowerBlue;
          dust.color = Color.Lerp(dust.color, Color.White, 0.3f);
          dust.noGravity = true;
        }
      }
      if (this.type == 507 || this.type == 508)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        Vector2 position = this.position;
        Vector2 oldVelocity = this.oldVelocity;
        oldVelocity.Normalize();
        Vector2 Position = position + oldVelocity * 16f;
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(Position, this.width, this.height, 81, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity + this.oldVelocity * 0.4f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity * 0.5f;
          Main.dust[index2].noGravity = true;
          Position -= oldVelocity * 8f;
        }
      }
      if (this.type == 598)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        Vector2 position = this.position;
        Vector2 rotationVector2 = (this.rotation - 1.570796f).ToRotationVector2();
        Vector2 Position = position + rotationVector2 * 16f;
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(Position, this.width, this.height, 81, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].position = (Main.dust[index2].position + this.Center) / 2f;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity + rotationVector2 * 2f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity * 0.5f;
          Main.dust[index2].noGravity = true;
          Position -= rotationVector2 * 8f;
        }
      }
      if (this.type == 1 || this.type == 81 || this.type == 98)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index = 0; index < 10; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0.0f, 0.0f, 0, new Color(), 1f);
      }
      if (this.type == 336 || this.type == 345)
      {
        for (int index1 = 0; index1 < 6; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 196, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].scale = this.scale;
        }
      }
      if (this.type == 358)
      {
        this.velocity = this.oldVelocity * 0.2f;
        for (int index1 = 0; index1 < 100; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 211, 0.0f, 0.0f, 75, new Color(), 1.2f);
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Main.dust[index2];
            dust.alpha = dust.alpha + 25;
          }
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Main.dust[index2];
            dust.alpha = dust.alpha + 25;
          }
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Main.dust[index2];
            dust.alpha = dust.alpha + 25;
          }
          if (Main.rand.Next(2) == 0)
            Main.dust[index2].scale = 0.6f;
          else
            Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 0.3f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + this.velocity;
          Dust dust3 = Main.dust[index2];
          dust3.velocity = dust3.velocity * (float) (1.0 + (double) Main.rand.Next(-100, 101) * 0.00999999977648258);
          Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index2].position = this.Center;
        }
      }
      if (this.type == 406)
      {
        int Alpha = 175;
        Color newColor = new Color(0, 80, (int) byte.MaxValue, 100);
        this.velocity = this.oldVelocity * 0.2f;
        for (int index1 = 0; index1 < 40; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0.0f, 0.0f, Alpha, newColor, 1.6f);
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Main.dust[index2];
            dust.alpha = dust.alpha + 25;
          }
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Main.dust[index2];
            dust.alpha = dust.alpha + 25;
          }
          if (Main.rand.Next(2) == 0)
          {
            Dust dust = Main.dust[index2];
            dust.alpha = dust.alpha + 25;
          }
          if (Main.rand.Next(2) == 0)
            Main.dust[index2].scale = 0.6f;
          else
            Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 0.3f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity + this.velocity;
          Dust dust3 = Main.dust[index2];
          dust3.velocity = dust3.velocity * (float) (1.0 + (double) Main.rand.Next(-100, 101) * 0.00999999977648258);
          Main.dust[index2].velocity.X += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index2].velocity.Y += (float) Main.rand.Next(-50, 51) * 0.015f;
          Main.dust[index2].position = this.Center;
        }
      }
      if (this.type == 344)
      {
        for (int index1 = 0; index1 < 3; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].scale = this.scale;
        }
      }
      else if (this.type == 343)
      {
        Main.PlaySound(SoundID.Item27, this.position);
        for (int index1 = 4; index1 < 31; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.oldPosition.X - this.oldVelocity.X * (30f / (float) index1), this.oldPosition.Y - this.oldVelocity.Y * (30f / (float) index1)), 8, 8, 197, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.2f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 0.5f;
        }
      }
      else if (this.type == 349)
      {
        Main.PlaySound(SoundID.Item27, this.position);
        for (int index1 = 0; index1 < 3; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].noLight = true;
          Main.dust[index2].scale = 0.7f;
        }
      }
      if (this.type == 323)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 20; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0.0f, 0.0f, 0, new Color(), 1f);
          if (Main.rand.Next(2) == 0)
          {
            Main.dust[index2].noGravity = true;
            Main.dust[index2].scale = 1.3f;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 1.5f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity - this.oldVelocity * 0.5f;
            Dust dust3 = Main.dust[index2];
            dust3.velocity = dust3.velocity * 1.5f;
          }
          else
          {
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 0.75f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity - this.oldVelocity * 0.25f;
            Main.dust[index2].scale = 0.8f;
          }
        }
      }
      if (this.type == 589)
      {
        Main.PlaySound(SoundID.Item27, this.position);
        Color newColor = Color.Red;
        if ((double) this.ai[1] == 1.0)
          newColor = Color.Green;
        if ((double) this.ai[1] == 2.0)
          newColor = Color.Purple;
        if ((double) this.ai[1] == 3.0)
          newColor = Color.Gold;
        if ((double) this.ai[1] == 4.0)
          newColor = Color.White;
        newColor.A = (byte) 100;
        for (int index1 = 0; index1 < 30; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0.0f, 0.0f, 0, newColor, 1f);
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * (float) (1.0 + (double) Main.rand.NextFloat() * 1.0);
          if (index1 < 10)
          {
            Main.dust[index2].noGravity = true;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity * 0.5f;
          }
        }
      }
      if (this.type == 346)
      {
        Main.PlaySound(SoundID.Item27, this.position);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int Type = 10;
          if ((double) this.ai[1] == 1.0)
            Type = 4;
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 335)
      {
        Main.PlaySound(SoundID.Item27, this.position);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 90 - (int) this.ai[1], 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noLight = true;
          Main.dust[index2].scale = 0.8f;
        }
      }
      if (this.type == 318)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30, 0.0f, 0.0f, 0, new Color(), 1f);
          if (Main.rand.Next(2) == 0)
            Main.dust[index2].noGravity = true;
        }
      }
      if (this.type == 378)
      {
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 30, 0.0f, 0.0f, 0, new Color(), 1f);
          if (Main.rand.Next(2) == 0)
            Main.dust[index2].noGravity = true;
        }
      }
      else if (this.type == 311)
      {
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 189, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].scale = 0.85f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity + this.velocity * 0.5f;
        }
      }
      else if (this.type == 316)
      {
        for (int index1 = 0; index1 < 5; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 195, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].scale = 0.85f;
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity + this.velocity * 0.5f;
        }
      }
      else if (this.type == 184 || this.type == 195)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0.0f, 0.0f, 0, new Color(), 1f);
      }
      else if (this.type == 275 || this.type == 276)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 7, 0.0f, 0.0f, 0, new Color(), 1f);
      }
      else if (this.type == 291)
      {
        if (this.owner == Main.myPlayer)
          Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 292, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
      }
      else if (this.type == 295)
      {
        if (this.owner == Main.myPlayer)
          Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 296, (int) ((double) this.damage * 0.65), this.knockBack, this.owner, 0.0f, 0.0f);
      }
      else if (this.type == 270)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
        if ((double) this.ai[0] < 0.0)
        {
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 26, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 1.2f;
            Main.dust[index2].scale = 1.3f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
            int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 5, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Main.dust[index3].noGravity = true;
            Dust dust3 = Main.dust[index3];
            dust3.velocity = dust3.velocity * 3f;
          }
        }
        else
        {
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 26, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 1.2f;
            Main.dust[index2].scale = 1.3f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
            int index3 = Dust.NewDust(new Vector2(this.position.X + 4f, this.position.Y + 4f), this.width - 8, this.height - 8, 6, 0.0f, 0.0f, 100, new Color(), 2f);
            Main.dust[index3].noGravity = true;
            Dust dust3 = Main.dust[index3];
            dust3.velocity = dust3.velocity * 3f;
          }
        }
      }
      else if (this.type == 265)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 163, 0.0f, 0.0f, 100, new Color(), 1.2f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.2f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
        }
      }
      else if (this.type == 355)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 27, 1f, 0.0f);
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 205, 0.0f, 0.0f, 100, new Color(), 1.2f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.2f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
        }
      }
      else if (this.type == 304)
      {
        for (int index1 = 0; index1 < 3; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 182, 0.0f, 0.0f, 100, new Color(), 0.8f);
          Main.dust[index2].noGravity = true;
          Dust dust1 = Main.dust[index2];
          dust1.velocity = dust1.velocity * 1.2f;
          Dust dust2 = Main.dust[index2];
          dust2.velocity = dust2.velocity - this.oldVelocity * 0.3f;
        }
      }
      else if (this.type == 263)
      {
        Main.PlaySound(SoundID.Item27, this.position);
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, this.velocity.X, this.velocity.Y, Main.rand.Next(0, 101), new Color(), (float) (1.0 + (double) Main.rand.Next(40) * 0.00999999977648258));
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 2f;
        }
      }
      else if (this.type == 261)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 148, 0.0f, 0.0f, 0, new Color(), 1f);
      }
      else if (this.type == 229)
      {
        for (int index1 = 0; index1 < 25; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 1.5f;
          Main.dust[index2].scale = 1.5f;
        }
      }
      else if (this.type == 239)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2, 154, 0.0f, 0.0f, 0, new Color(), 1f);
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @Main.dust[index].position.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local - 2f;
        Main.dust[index].alpha = 38;
        Dust dust1 = Main.dust[index];
        dust1.velocity = dust1.velocity * 0.1f;
        Dust dust2 = Main.dust[index];
        dust2.velocity = dust2.velocity + -this.oldVelocity * 0.25f;
        Main.dust[index].scale = 0.95f;
      }
      else if (this.type == 245)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2, 114, 0.0f, 0.0f, 0, new Color(), 1f);
        Main.dust[index].noGravity = true;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @Main.dust[index].position.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local - 2f;
        Main.dust[index].alpha = 38;
        Dust dust1 = Main.dust[index];
        dust1.velocity = dust1.velocity * 0.1f;
        Dust dust2 = Main.dust[index];
        dust2.velocity = dust2.velocity + -this.oldVelocity * 0.25f;
        Main.dust[index].scale = 0.95f;
      }
      else if (this.type == 264)
      {
        int index = Dust.NewDust(new Vector2(this.position.X, (float) ((double) this.position.Y + (double) this.height - 2.0)), 2, 2, 54, 0.0f, 0.0f, 0, new Color(), 1f);
        Main.dust[index].noGravity = true;
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        float& local = @Main.dust[index].position.X;
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        ^local = ^local - 2f;
        Main.dust[index].alpha = 38;
        Dust dust1 = Main.dust[index];
        dust1.velocity = dust1.velocity * 0.1f;
        Dust dust2 = Main.dust[index];
        dust2.velocity = dust2.velocity + -this.oldVelocity * 0.25f;
        Main.dust[index].scale = 0.95f;
      }
      else if (this.type == 206 || this.type == 225)
      {
        Main.PlaySound(6, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index = 0; index < 5; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 40, 0.0f, 0.0f, 0, new Color(), 1f);
      }
      else if (this.type == 227)
      {
        Main.PlaySound(6, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 157, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity + this.oldVelocity;
          Main.dust[index2].scale = 1.5f;
        }
      }
      else if (this.type == 237 && this.owner == Main.myPlayer)
        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 238, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
      else if (this.type == 243 && this.owner == Main.myPlayer)
        Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 244, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
      else if (this.type == 120)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 67, this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
          if (index1 < 5)
            Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity * 0.2f;
        }
      }
      else if (this.type == 181 || this.type == 189 || this.type == 566)
      {
        for (int index1 = 0; index1 < 6; ++index1)
        {
          int index2 = Dust.NewDust(this.position, this.width, this.height, 150, this.velocity.X, this.velocity.Y, 50, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Main.dust[index2].scale = 1f;
        }
      }
      else if (this.type == 178)
      {
        for (int index1 = 0; index1 < 85; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Main.rand.Next(139, 143), this.velocity.X, this.velocity.Y, 0, new Color(), 1.2f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @Main.dust[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 + (float) Main.rand.Next(-50, 51) * 0.05f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 + (float) Main.rand.Next(-50, 51) * 0.05f;
          Dust dust = Main.dust[index2];
          dust.scale = dust.scale * (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
        }
        for (int index1 = 0; index1 < 40; ++index1)
        {
          int index2 = Gore.NewGore(this.position, this.velocity, Main.rand.Next(276, 283), 1f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.gore[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.gore[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.gore[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.gore[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          Gore gore = Main.gore[index2];
          gore.scale = gore.scale * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @Main.gore[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 + (float) Main.rand.Next(-50, 51) * 0.05f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @Main.gore[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 + (float) Main.rand.Next(-50, 51) * 0.05f;
        }
      }
      else if (this.type == 289)
      {
        for (int index1 = 0; index1 < 30; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Main.rand.Next(139, 143), this.velocity.X, this.velocity.Y, 0, new Color(), 1.2f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.dust[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.dust[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @Main.dust[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 + (float) Main.rand.Next(-50, 51) * 0.05f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @Main.dust[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 + (float) Main.rand.Next(-50, 51) * 0.05f;
          Dust dust = Main.dust[index2];
          dust.scale = dust.scale * (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
        }
        for (int index1 = 0; index1 < 15; ++index1)
        {
          int index2 = Gore.NewGore(this.position, this.velocity, Main.rand.Next(276, 283), 1f);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.gore[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.gore[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + (float) Main.rand.Next(-50, 51) * 0.01f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.gore[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.gore[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
          Gore gore = Main.gore[index2];
          gore.scale = gore.scale * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @Main.gore[index2].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 + (float) Main.rand.Next(-50, 51) * 0.05f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @Main.gore[index2].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 + (float) Main.rand.Next(-50, 51) * 0.05f;
        }
      }
      else if (this.type == 475 || this.type == 505 || this.type == 506)
      {
        if ((double) this.ai[1] == 0.0)
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        if ((double) this.ai[1] < 10.0)
        {
          Vector2 Position = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num1 = -this.velocity.X;
          float num2 = -this.velocity.Y;
          float num3 = 1f;
          if ((double) this.ai[0] <= 17.0)
            num3 = this.ai[0] / 17f;
          int num4 = (int) (30.0 * (double) num3);
          float num5 = 1f;
          if ((double) this.ai[0] <= 30.0)
            num5 = this.ai[0] / 30f;
          float num6 = 0.4f * num5;
          float num7 = num6;
          float num8 = num2 + num7;
          for (int index1 = 0; index1 < num4; ++index1)
          {
            float num9 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num8 * (double) num8);
            float num10 = 5.6f;
            if ((double) Math.Abs(num1) + (double) Math.Abs(num8) < 1.0)
              num10 *= Math.Abs(num1) + Math.Abs(num8) / 1f;
            float num11 = num10 / num9;
            float num12 = num1 * num11;
            float num13 = num8 * num11;
            Math.Atan2((double) num13, (double) num12);
            int Type = 3;
            if (this.type == 506)
              Type = 30;
            if (this.type == 505)
              Type = 239;
            if ((double) index1 > (double) this.ai[1])
            {
              for (int index2 = 0; index2 < 4; ++index2)
              {
                int index3 = Dust.NewDust(Position, this.width, this.height, Type, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index3].noGravity = true;
                Dust dust = Main.dust[index3];
                dust.velocity = dust.velocity * 0.3f;
              }
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + num12;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + num13;
            num1 = -this.velocity.X;
            float num14 = -this.velocity.Y;
            num7 += num6;
            num8 = num14 + num7;
          }
        }
      }
      else if (this.type == 171)
      {
        if ((double) this.ai[1] == 0.0)
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        if ((double) this.ai[1] < 10.0)
        {
          Vector2 Position = new Vector2(this.position.X + (float) this.width * 0.5f, this.position.Y + (float) this.height * 0.5f);
          float num1 = -this.velocity.X;
          float num2 = -this.velocity.Y;
          float num3 = 1f;
          if ((double) this.ai[0] <= 17.0)
            num3 = this.ai[0] / 17f;
          int num4 = (int) (30.0 * (double) num3);
          float num5 = 1f;
          if ((double) this.ai[0] <= 30.0)
            num5 = this.ai[0] / 30f;
          float num6 = 0.4f * num5;
          float num7 = num6;
          float num8 = num2 + num7;
          for (int index1 = 0; index1 < num4; ++index1)
          {
            float num9 = (float) Math.Sqrt((double) num1 * (double) num1 + (double) num8 * (double) num8);
            float num10 = 5.6f;
            if ((double) Math.Abs(num1) + (double) Math.Abs(num8) < 1.0)
              num10 *= Math.Abs(num1) + Math.Abs(num8) / 1f;
            float num11 = num10 / num9;
            float num12 = num1 * num11;
            float num13 = num8 * num11;
            Math.Atan2((double) num13, (double) num12);
            if ((double) index1 > (double) this.ai[1])
            {
              for (int index2 = 0; index2 < 4; ++index2)
              {
                int index3 = Dust.NewDust(Position, this.width, this.height, 129, 0.0f, 0.0f, 0, new Color(), 1f);
                Main.dust[index3].noGravity = true;
                Dust dust = Main.dust[index3];
                dust.velocity = dust.velocity * 0.3f;
              }
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + num12;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + num13;
            num1 = -this.velocity.X;
            float num14 = -this.velocity.Y;
            num7 += num6;
            num8 = num14 + num7;
          }
        }
      }
      else if (this.type == 117)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index = 0; index < 10; ++index)
          Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0.0f, 0.0f, 0, new Color(), 1f);
      }
      else if (this.type == 166)
      {
        Main.PlaySound(SoundID.Item51, this.position);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 76, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.oldVelocity * 0.25f;
        }
      }
      else if (this.type == 158)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 9, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.velocity * 0.5f;
        }
      }
      else if (this.type == 159)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.velocity * 0.5f;
        }
      }
      else if (this.type == 160)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 19, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.velocity * 0.5f;
        }
      }
      else if (this.type == 161)
      {
        Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
        for (int index1 = 0; index1 < 10; ++index1)
        {
          int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 11, 0.0f, 0.0f, 0, new Color(), 1f);
          Main.dust[index2].noGravity = true;
          Dust dust = Main.dust[index2];
          dust.velocity = dust.velocity - this.velocity * 0.5f;
        }
      }
      else if (this.type >= 191 && this.type <= 194)
      {
        int index = Gore.NewGore(new Vector2(this.position.X - (float) (this.width / 2), this.position.Y - (float) (this.height / 2)), new Vector2(0.0f, 0.0f), Main.rand.Next(61, 64), this.scale);
        Gore gore = Main.gore[index];
        gore.velocity = gore.velocity * 0.1f;
      }
      else if (!Main.projPet[this.type])
      {
        if (this.type == 93)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index1 = 0; index1 < 10; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 57, 0.0f, 0.0f, 100, new Color(), 0.5f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.dust[index2].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 * 2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.dust[index2].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 * 2f;
          }
        }
        else if (this.type == 99)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index1 = 0; index1 < 30; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 1, 0.0f, 0.0f, 0, new Color(), 1f);
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Main.dust[index2];
              dust.scale = dust.scale * 1.4f;
            }
            this.velocity = this.velocity * 1.9f;
          }
        }
        else if (this.type == 655)
        {
          Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index1 = 0; index1 < 30; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 147, 0.0f, 0.0f, 0, new Color(), 1f);
            if (Main.rand.Next(2) == 0)
            {
              Dust dust = Main.dust[index2];
              dust.scale = dust.scale * 1.4f;
            }
            this.velocity = this.velocity * 1.9f;
          }
          if (Main.netMode != 1 && !this.wet)
          {
            int num = 2;
            if (Main.rand.Next(3) == 0)
              ++num;
            if (Main.rand.Next(3) == 0)
              ++num;
            if (Main.rand.Next(3) == 0)
              ++num;
            for (int index1 = 0; index1 < num; ++index1)
            {
              int index2 = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, Main.rand.Next(210, 212), 1, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
              Main.npc[index2].velocity.X = (float) Main.rand.Next(-200, 201) * (1f / 500f);
              Main.npc[index2].velocity.Y = (float) Main.rand.Next(-200, 201) * (1f / 500f);
              Main.npc[index2].netUpdate = true;
            }
            if (Main.rand.Next(4) == 0)
            {
              int index = NPC.NewNPC((int) this.Center.X, (int) this.Center.Y, 42, 1, 0.0f, 0.0f, 0.0f, 0.0f, (int) byte.MaxValue);
              Main.npc[index].SetDefaults(-16, -1f);
              Main.npc[index].velocity.X = (float) Main.rand.Next(-200, 201) * (1f / 1000f);
              Main.npc[index].velocity.Y = (float) Main.rand.Next(-200, 201) * (1f / 1000f);
              Main.npc[index].netUpdate = true;
            }
          }
        }
        else if (this.type == 91 || this.type == 92)
        {
          Main.PlaySound(SoundID.Item10, this.position);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
          for (int index = 0; index < 3; ++index)
            Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
          if (this.type == 12 && this.damage < 500)
          {
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
            for (int index = 0; index < 3; ++index)
              Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
          }
          if ((this.type == 91 || this.type == 92 && (double) this.ai[0] > 0.0) && this.owner == Main.myPlayer)
          {
            float num1 = this.position.X + (float) Main.rand.Next(-400, 400);
            float num2 = this.position.Y - (float) Main.rand.Next(600, 900);
            Vector2 vector2 = new Vector2(num1, num2);
            float num3 = this.position.X + (float) (this.width / 2) - vector2.X;
            float num4 = this.position.Y + (float) (this.height / 2) - vector2.Y;
            float num5 = 22f / (float) Math.Sqrt((double) num3 * (double) num3 + (double) num4 * (double) num4);
            float SpeedX = num3 * num5;
            float SpeedY = num4 * num5;
            int damage = this.damage;
            int index = Projectile.NewProjectile(num1, num2, SpeedX, SpeedY, 92, damage, this.knockBack, this.owner, 0.0f, 0.0f);
            if (this.type == 91)
            {
              Main.projectile[index].ai[1] = this.position.Y;
              Main.projectile[index].ai[0] = 1f;
            }
            else
              Main.projectile[index].ai[1] = this.position.Y;
          }
        }
        else if (this.type == 89)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index1 = 0; index1 < 5; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 68, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 1.5f;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * 0.9f;
          }
          if (this.type == 89 && this.owner == Main.myPlayer)
          {
            for (int index = 0; index < 3; ++index)
            {
              float SpeedX = (float) (-(double) this.velocity.X * (double) Main.rand.Next(40, 70) * 0.00999999977648258 + (double) Main.rand.Next(-20, 21) * 0.400000005960464);
              float SpeedY = (float) (-(double) this.velocity.Y * (double) Main.rand.Next(40, 70) * 0.00999999977648258 + (double) Main.rand.Next(-20, 21) * 0.400000005960464);
              Projectile.NewProjectile(this.position.X + SpeedX, this.position.Y + SpeedY, SpeedX, SpeedY, 90, (int) ((double) this.damage * 0.5), 0.0f, this.owner, 0.0f, 0.0f);
            }
          }
        }
        else if (this.type == 177)
        {
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 137, 0.0f, 0.0f, Main.rand.Next(0, 101), new Color(), (float) (1.0 + (double) Main.rand.Next(-20, 40) * 0.00999999977648258));
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity - this.oldVelocity * 0.2f;
            if (Main.rand.Next(3) == 0)
            {
              Dust dust2 = Main.dust[index2];
              dust2.scale = dust2.scale * 0.8f;
              Dust dust3 = Main.dust[index2];
              dust3.velocity = dust3.velocity * 0.5f;
            }
            else
              Main.dust[index2].noGravity = true;
          }
        }
        else if (this.type == 119 || this.type == 118 || (this.type == 128 || this.type == 359))
        {
          int num = 10;
          if (this.type == 119 || this.type == 359)
            num = 20;
          Main.PlaySound(SoundID.Item27, this.position);
          for (int index1 = 0; index1 < num; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 92, 0.0f, 0.0f, 0, new Color(), 1f);
            if (Main.rand.Next(3) != 0)
            {
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2f;
              Main.dust[index2].noGravity = true;
              Dust dust2 = Main.dust[index2];
              dust2.scale = dust2.scale * 1.75f;
            }
            else
            {
              Dust dust = Main.dust[index2];
              dust.scale = dust.scale * 0.5f;
            }
          }
        }
        else if (this.type == 309)
        {
          int num = 10;
          Main.PlaySound(SoundID.Item27, this.position);
          for (int index1 = 0; index1 < num; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 185, 0.0f, 0.0f, 0, new Color(), 1f);
            if (Main.rand.Next(2) == 0)
            {
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2f;
              Main.dust[index2].noGravity = true;
              Dust dust2 = Main.dust[index2];
              dust2.scale = dust2.scale * 1.75f;
            }
          }
        }
        else if (this.type == 308)
        {
          int num = 80;
          Main.PlaySound(SoundID.Item27, this.position);
          for (int index1 = 0; index1 < num; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y + 16f), this.width, this.height - 16, 185, 0.0f, 0.0f, 0, new Color(), 1f);
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 2f;
            Main.dust[index2].noGravity = true;
            Dust dust2 = Main.dust[index2];
            dust2.scale = dust2.scale * 1.15f;
          }
        }
        else if (this.aiStyle == 29 && this.type <= 126)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          int Type = this.type - 121 + 86;
          for (int index1 = 0; index1 < 15; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, this.oldVelocity.X, this.oldVelocity.Y, 50, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.scale = dust1.scale * 1.25f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity * 0.5f;
          }
        }
        else if (this.type == 597)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index1 = 0; index1 < 15; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 262, this.oldVelocity.X, this.oldVelocity.Y, 50, new Color(), 1.2f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.scale = dust1.scale * 1.25f;
            Dust dust2 = Main.dust[index2];
            dust2.velocity = dust2.velocity * 0.5f;
          }
        }
        else if (this.type == 337)
        {
          Main.PlaySound(SoundID.Item27, this.position);
          for (int index1 = 0; index1 < 10; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 197, 0.0f, 0.0f, 0, new Color(), 1f);
            Main.dust[index2].noGravity = true;
          }
        }
        else if (this.type == 379 || this.type == 377)
        {
          for (int index1 = 0; index1 < 5; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100, new Color(), 1f);
            Main.dust[index2].scale = (float) Main.rand.Next(1, 10) * 0.1f;
            Main.dust[index2].noGravity = true;
            Main.dust[index2].fadeIn = 1.5f;
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 0.75f;
          }
        }
        else if (this.type == 80)
        {
          if ((double) this.ai[0] >= 0.0)
          {
            Main.PlaySound(SoundID.Item27, this.position);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 67, 0.0f, 0.0f, 0, new Color(), 1f);
          }
          int i = (int) this.position.X / 16;
          int j = (int) this.position.Y / 16;
          if (Main.tile[i, j] == null)
            Main.tile[i, j] = new Tile();
          if ((int) Main.tile[i, j].type == (int) sbyte.MaxValue && Main.tile[i, j].active())
            WorldGen.KillTile(i, j, false, false, false);
        }
        else if (this.type == 76 || this.type == 77 || this.type == 78)
        {
          for (int index1 = 0; index1 < 5; ++index1)
          {
            int index2 = Dust.NewDust(this.position, this.width, this.height, 27, 0.0f, 0.0f, 80, new Color(), 1.5f);
            Main.dust[index2].noGravity = true;
          }
        }
        else if (this.type == 55)
        {
          for (int index1 = 0; index1 < 5; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 18, 0.0f, 0.0f, 0, new Color(), 1.5f);
            Main.dust[index2].noGravity = true;
          }
        }
        else if (this.type == 51 || this.type == 267)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index = 0; index < 5; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0.0f, 0.0f, 0, new Color(), 0.7f);
        }
        else if (this.type == 478)
        {
          if (this.owner == Main.myPlayer)
            Projectile.NewProjectile(this.Center.X, this.Center.Y, 0.0f, 0.0f, 480, (int) ((double) this.damage * 0.8), this.knockBack * 0.5f, this.owner, 0.0f, 0.0f);
        }
        else if (this.type == 477 || this.type == 479)
        {
          int num = 0;
          while (num < 5)
            ++num;
          Collision.HitTiles(this.position, this.velocity, this.width, this.height);
        }
        else if (this.type == 2 || this.type == 82)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1f);
        }
        else if (this.type == 474)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index = 0; index < 20; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0.0f, 0.0f, 0, new Color(), 0.9f);
        }
        else if (this.type == 172)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index = 0; index < 20; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, 0.0f, 0.0f, 100, new Color(), 1f);
        }
        else if (this.type == 103)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, 0.0f, 0.0f, 100, new Color(), 1f);
            if (Main.rand.Next(2) == 0)
            {
              Dust dust1 = Main.dust[index2];
              dust1.scale = dust1.scale * 2.5f;
              Main.dust[index2].noGravity = true;
              Dust dust2 = Main.dust[index2];
              dust2.velocity = dust2.velocity * 5f;
            }
          }
        }
        else if (this.type == 278)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 169, 0.0f, 0.0f, 100, new Color(), 1f);
            if (Main.rand.Next(2) == 0)
            {
              Dust dust1 = Main.dust[index2];
              dust1.scale = dust1.scale * 1.5f;
              Main.dust[index2].noGravity = true;
              Dust dust2 = Main.dust[index2];
              dust2.velocity = dust2.velocity * 5f;
            }
          }
        }
        else if (this.type == 3 || this.type == 48 || (this.type == 54 || this.type == 599))
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.75f);
        }
        else if (this.type == 330)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, this.velocity.X * 0.4f, this.velocity.Y * 0.4f, 0, new Color(), 0.75f);
        }
        else if (this.type == 4)
        {
          Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          for (int index = 0; index < 10; ++index)
            Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 14, 0.0f, 0.0f, 150, new Color(), 1.1f);
        }
        else if (this.type == 5)
        {
          Main.PlaySound(SoundID.Item10, this.position);
          for (int index = 0; index < 60; ++index)
          {
            int Type;
            switch (Main.rand.Next(3))
            {
              case 0:
                Type = 15;
                break;
              case 1:
                Type = 57;
                break;
              default:
                Type = 58;
                break;
            }
            Dust.NewDust(this.position, this.width, this.height, Type, this.velocity.X * 0.5f, this.velocity.Y * 0.5f, 150, new Color(), 1.5f);
          }
        }
        else if (this.type == 9 || this.type == 12 || this.type == 503)
        {
          Main.PlaySound(SoundID.Item10, this.position);
          int num1 = 10;
          int num2 = 3;
          if (this.type == 503)
          {
            num1 = 40;
            num2 = 2;
            this.velocity = this.velocity / 2f;
          }
          for (int index = 0; index < num1; ++index)
            Dust.NewDust(this.position, this.width, this.height, 58, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
          for (int index = 0; index < num2; ++index)
          {
            int Type = Main.rand.Next(16, 18);
            if (this.type == 503)
              Type = 16;
            Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Type, 1f);
          }
          if (this.type == 12 && this.damage < 100)
          {
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(this.position, this.width, this.height, 57, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 150, new Color(), 1.2f);
            for (int index = 0; index < 3; ++index)
              Gore.NewGore(this.position, new Vector2(this.velocity.X * 0.05f, this.velocity.Y * 0.05f), Main.rand.Next(16, 18), 1f);
          }
        }
        else if (this.type == 281)
        {
          Main.PlaySound(4, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
          int index1 = Gore.NewGore(this.position, new Vector2((float) Main.rand.Next(-20, 21) * 0.2f, (float) Main.rand.Next(-20, 21) * 0.2f), 76, 1f);
          Gore gore1 = Main.gore[index1];
          gore1.velocity = gore1.velocity - this.velocity * 0.5f;
          int index2 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2((float) Main.rand.Next(-20, 21) * 0.2f, (float) Main.rand.Next(-20, 21) * 0.2f), 77, 1f);
          Gore gore2 = Main.gore[index2];
          gore2.velocity = gore2.velocity - this.velocity * 0.5f;
          Main.PlaySound(SoundID.Item14, this.position);
          for (int index3 = 0; index3 < 20; ++index3)
          {
            int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index4];
            dust.velocity = dust.velocity * 1.4f;
          }
          for (int index3 = 0; index3 < 10; ++index3)
          {
            int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
            Main.dust[index4].noGravity = true;
            Dust dust1 = Main.dust[index4];
            dust1.velocity = dust1.velocity * 5f;
            int index5 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust2 = Main.dust[index5];
            dust2.velocity = dust2.velocity * 3f;
          }
          int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore3 = Main.gore[index6];
          gore3.velocity = gore3.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.gore[index6].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.gore[index6].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 1f;
          int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore4 = Main.gore[index7];
          gore4.velocity = gore4.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.gore[index7].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.gore[index7].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 + 1f;
          int index8 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore5 = Main.gore[index8];
          gore5.velocity = gore5.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @Main.gore[index8].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 + 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @Main.gore[index8].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 - 1f;
          int index9 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore6 = Main.gore[index9];
          gore6.velocity = gore6.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local7 = @Main.gore[index9].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local7 = ^local7 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local8 = @Main.gore[index9].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local8 = ^local8 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local9 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local9 = ^local9 + (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local10 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local10 = ^local10 + (float) (this.height / 2);
          this.width = 128;
          this.height = 128;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local11 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local11 = ^local11 - (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local12 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local12 = ^local12 - (float) (this.height / 2);
          this.Damage();
        }
        else if (this.type == 162)
        {
          Main.PlaySound(SoundID.Item14, this.position);
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 1.4f;
          }
          for (int index1 = 0; index1 < 10; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 5f;
            int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust2 = Main.dust[index3];
            dust2.velocity = dust2.velocity * 3f;
          }
          int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore1 = Main.gore[index4];
          gore1.velocity = gore1.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.gore[index4].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.gore[index4].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 1f;
          int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore2 = Main.gore[index5];
          gore2.velocity = gore2.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.gore[index5].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.gore[index5].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 + 1f;
          int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore3 = Main.gore[index6];
          gore3.velocity = gore3.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @Main.gore[index6].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 + 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @Main.gore[index6].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 - 1f;
          int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore4 = Main.gore[index7];
          gore4.velocity = gore4.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local7 = @Main.gore[index7].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local7 = ^local7 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local8 = @Main.gore[index7].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local8 = ^local8 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local9 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local9 = ^local9 + (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local10 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local10 = ^local10 + (float) (this.height / 2);
          this.width = 128;
          this.height = 128;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local11 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local11 = ^local11 - (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local12 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local12 = ^local12 - (float) (this.height / 2);
          this.Damage();
        }
        else if (this.type == 240)
        {
          Main.PlaySound(SoundID.Item14, this.position);
          for (int index1 = 0; index1 < 20; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust = Main.dust[index2];
            dust.velocity = dust.velocity * 1.4f;
          }
          for (int index1 = 0; index1 < 10; ++index1)
          {
            int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
            Main.dust[index2].noGravity = true;
            Dust dust1 = Main.dust[index2];
            dust1.velocity = dust1.velocity * 5f;
            int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
            Dust dust2 = Main.dust[index3];
            dust2.velocity = dust2.velocity * 3f;
          }
          int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore1 = Main.gore[index4];
          gore1.velocity = gore1.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local1 = @Main.gore[index4].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local1 = ^local1 + 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local2 = @Main.gore[index4].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local2 = ^local2 + 1f;
          int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore2 = Main.gore[index5];
          gore2.velocity = gore2.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local3 = @Main.gore[index5].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local3 = ^local3 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local4 = @Main.gore[index5].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local4 = ^local4 + 1f;
          int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore3 = Main.gore[index6];
          gore3.velocity = gore3.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local5 = @Main.gore[index6].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local5 = ^local5 + 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local6 = @Main.gore[index6].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local6 = ^local6 - 1f;
          int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
          Gore gore4 = Main.gore[index7];
          gore4.velocity = gore4.velocity * 0.4f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local7 = @Main.gore[index7].velocity.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local7 = ^local7 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local8 = @Main.gore[index7].velocity.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local8 = ^local8 - 1f;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local9 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local9 = ^local9 + (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local10 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local10 = ^local10 + (float) (this.height / 2);
          this.width = 96;
          this.height = 96;
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local11 = @this.position.X;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local11 = ^local11 - (float) (this.width / 2);
          // ISSUE: explicit reference operation
          // ISSUE: variable of a reference type
          float& local12 = @this.position.Y;
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          ^local12 = ^local12 - (float) (this.height / 2);
          this.Damage();
        }
        else
        {
          int type = this.type;
          if (this.type == 283 || this.type == 282)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(this.position, this.width, this.height, 171, 0.0f, 0.0f, 100, new Color(), 1f);
              Main.dust[index2].scale = (float) Main.rand.Next(1, 10) * 0.1f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].fadeIn = 1.5f;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.75f;
            }
          }
          else if (this.type == 284)
          {
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Main.rand.Next(139, 143), (float) (-(double) this.velocity.X * 0.300000011920929), (float) (-(double) this.velocity.Y * 0.300000011920929), 0, new Color(), 1.2f);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.dust[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + (float) Main.rand.Next(-50, 51) * 0.01f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + (float) Main.rand.Next(-50, 51) * 0.01f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @Main.dust[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @Main.dust[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 + (float) Main.rand.Next(-50, 51) * 0.05f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 + (float) Main.rand.Next(-50, 51) * 0.05f;
              Dust dust = Main.dust[index2];
              dust.scale = dust.scale * (float) (1.0 + (double) Main.rand.Next(-30, 31) * 0.00999999977648258);
            }
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Gore.NewGore(this.position, -this.velocity * 0.3f, Main.rand.Next(276, 283), 1f);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.gore[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + (float) Main.rand.Next(-50, 51) * 0.01f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.gore[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + (float) Main.rand.Next(-50, 51) * 0.01f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @Main.gore[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @Main.gore[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 * (float) (1.0 + (double) Main.rand.Next(-50, 51) * 0.00999999977648258);
              Gore gore = Main.gore[index2];
              gore.scale = gore.scale * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @Main.gore[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 + (float) Main.rand.Next(-50, 51) * 0.05f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @Main.gore[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 + (float) Main.rand.Next(-50, 51) * 0.05f;
            }
          }
          else if (this.type == 286)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            for (int index = 0; index < 7; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            for (int index1 = 0; index1 < 3; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 3f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
            }
            int index4 = Gore.NewGore(new Vector2(this.position.X - 10f, this.position.Y - 10f), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore = Main.gore[index4];
            gore.velocity = gore.velocity * 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.gore[index4].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) Main.rand.Next(-10, 11) * 0.05f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.gore[index4].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) Main.rand.Next(-10, 11) * 0.05f;
            if (this.owner == Main.myPlayer)
            {
              this.localAI[1] = -1f;
              this.maxPenetrate = 0;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 + (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 + (float) (this.height / 2);
              this.width = 80;
              this.height = 80;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 - (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 - (float) (this.height / 2);
              this.Damage();
            }
          }
          else if (this.type == 14 || this.type == 20 || (this.type == 36 || this.type == 83) || (this.type == 84 || this.type == 389 || (this.type == 104 || this.type == 279)) || (this.type == 100 || this.type == 110 || (this.type == 180 || this.type == 207) || (this.type == 357 || this.type == 242 || (this.type == 302 || this.type == 257))) || (this.type == 259 || this.type == 285 || (this.type == 287 || this.type == 576) || this.type == 577))
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            Main.PlaySound(SoundID.Item10, this.position);
          }
          else if (this.type == 660)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            Main.PlaySound(SoundID.Item10, this.position);
            int num = Main.rand.Next(4, 10);
            for (int index1 = 0; index1 < num; ++index1)
            {
              int index2 = Dust.NewDust(this.Center, 0, 0, 180, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 1.6f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1f;
              Dust dust2 = Main.dust[index2];
              dust2.velocity = dust2.velocity + -this.velocity * (float) ((double) Main.rand.NextFloat() * 2.0 - 1.0) * 0.5f;
              Main.dust[index2].scale = 2f;
              Main.dust[index2].fadeIn = 0.5f;
              Main.dust[index2].noGravity = true;
            }
          }
          else if (this.type == 712)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            Main.PlaySound(SoundID.Item10, this.position);
            int num = Main.rand.Next(6, 12);
            for (int index1 = 0; index1 < num; ++index1)
            {
              int index2 = Dust.NewDust(this.Center, 0, 0, 15, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 1.6f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1f;
              Dust dust2 = Main.dust[index2];
              dust2.velocity = dust2.velocity + -this.velocity * (float) ((double) Main.rand.NextFloat() * 2.0 - 1.0) * 0.5f;
              Main.dust[index2].scale = 1f;
              Main.dust[index2].fadeIn = 1.5f;
              Main.dust[index2].noGravity = true;
              Main.dust[index2].color = new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * 0.3f;
              Dust dust3 = Main.dust[index2];
              dust3.velocity = dust3.velocity * 0.7f;
              Dust dust4 = Main.dust[index2];
              dust4.position = dust4.position + Main.dust[index2].velocity * 5f;
            }
            for (int index = 0; index < 3; ++index)
            {
              Gore gore = Gore.NewGoreDirect(this.position, Vector2.Zero, 1008, (float) (1.0 + (double) Main.rand.NextFloatDirection() * 0.200000002980232));
              gore.velocity = gore.velocity * 4f;
            }
          }
          else if (this.type == 638)
          {
            Collision.HitTiles(this.position, this.velocity, this.width, this.height);
            Main.PlaySound(SoundID.Item10, this.position);
            int num = Main.rand.Next(2, 5);
            for (int index1 = 0; index1 < num; ++index1)
            {
              int index2 = Dust.NewDust(this.Center, 0, 0, 229, 0.0f, 0.0f, 100, new Color(), 1f);
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 1.6f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local - 1f;
              Dust dust2 = Main.dust[index2];
              dust2.position = dust2.position - Vector2.One * 4f;
              Main.dust[index2].position = Vector2.Lerp(Main.dust[index2].position, this.Center, 0.5f);
              Main.dust[index2].noGravity = true;
            }
          }
          else if (this.type == 15 || this.type == 34 || this.type == 321)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, (float) (-(double) this.velocity.X * 0.200000002980232), (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 2f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, (float) (-(double) this.velocity.X * 0.200000002980232), (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 1f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
            }
          }
          else if (this.type == 253)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, (float) (-(double) this.velocity.X * 0.200000002980232), (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 2f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 135, (float) (-(double) this.velocity.X * 0.200000002980232), (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 1f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
            }
          }
          else if (this.type == 95 || this.type == 96)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, (float) (-(double) this.velocity.X * 0.200000002980232), (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 2f * this.scale);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 75, (float) (-(double) this.velocity.X * 0.200000002980232), (float) (-(double) this.velocity.Y * 0.200000002980232), 100, new Color(), 1f * this.scale);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
            }
          }
          else if (this.type == 79)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 66, 0.0f, 0.0f, 100, new Color(Main.DiscoR, Main.DiscoG, Main.DiscoB), 2f);
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 4f;
            }
          }
          else if (this.type == 16)
          {
            if (this.type == 16 && this.penetrate == 1)
            {
              this.maxPenetrate = -1;
              this.penetrate = -1;
              int num = 60;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 - (float) (num / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - (float) (num / 2);
              this.width = this.width + num;
              this.height = this.height + num;
              this.tileCollide = false;
              this.velocity = this.velocity * 0.01f;
              this.Damage();
              this.scale = 0.01f;
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + (float) (this.width / 2);
            this.width = 10;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 + (float) (this.height / 2);
            this.height = 10;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local6 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local6 = ^local6 - (float) (this.height / 2);
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 15, 0.0f, 0.0f, 100, new Color(), 2f);
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 2f;
              Dust.NewDust(new Vector2(this.position.X - this.velocity.X, this.position.Y - this.velocity.Y), this.width, this.height, 15, 0.0f, 0.0f, 100, new Color(), 1f);
            }
          }
          else if (this.type == 17)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 0, 0.0f, 0.0f, 0, new Color(), 1f);
          }
          else if (this.type == 31 || this.type == 42)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 32, 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.6f;
            }
          }
          else if (this.type >= 411 && this.type <= 414)
          {
            int Type = 9;
            if (this.type == 412 || this.type == 414)
              Type = 11;
            if (this.type == 413)
              Type = 19;
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, Type, 0.0f, this.velocity.Y / 2f, 0, new Color(), 1f);
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity - this.velocity * 0.5f;
            }
          }
          else if (this.type == 109)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 51, 0.0f, 0.0f, 0, new Color(), 0.6f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.6f;
            }
          }
          else if (this.type == 39)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 38, 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.6f;
            }
          }
          else if (this.type == 71)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 53, 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.6f;
            }
          }
          else if (this.type == 40)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 36, 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.6f;
            }
          }
          else if (this.type == 21 || this.type == 471 || this.type == 532)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 26, 0.0f, 0.0f, 0, new Color(), 0.8f);
          }
          else if (this.type == 583)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0.0f, 0.0f, 100, new Color(20, 250, 20, 240), 0.8f);
          }
          else if (this.type == 584)
          {
            Main.PlaySound(0, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 4, 0.0f, 0.0f, 100, new Color(250, 20, 120, 240), 0.8f);
          }
          else if (this.type == 24)
          {
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 1, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 0.75f);
          }
          else if (this.type == 27)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, new Color(), 1f);
              Main.dust[index2].noGravity = true;
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 172, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 100, new Color(), 0.5f);
            }
          }
          else if (this.type == 38)
          {
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 42, this.velocity.X * 0.1f, this.velocity.Y * 0.1f, 0, new Color(), 1f);
          }
          else if (this.type == 44 || this.type == 45)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, new Color(), 1.7f);
              Main.dust[index2].noGravity = true;
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 27, this.velocity.X, this.velocity.Y, 100, new Color(), 1f);
            }
          }
          else if (this.type == 41)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            for (int index = 0; index < 10; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 3f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
            }
            int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore1 = Main.gore[index4];
            gore1.velocity = gore1.velocity * 0.4f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.gore[index4].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) Main.rand.Next(-10, 11) * 0.1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.gore[index4].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) Main.rand.Next(-10, 11) * 0.1f;
            int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore2 = Main.gore[index5];
            gore2.velocity = gore2.velocity * 0.4f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @Main.gore[index5].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + (float) Main.rand.Next(-10, 11) * 0.1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @Main.gore[index5].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 + (float) Main.rand.Next(-10, 11) * 0.1f;
            if (this.owner == Main.myPlayer)
            {
              this.penetrate = -1;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 + (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 + (float) (this.height / 2);
              this.width = 64;
              this.height = 64;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local7 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local7 = ^local7 - (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local8 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local8 = ^local8 - (float) (this.height / 2);
              this.Damage();
            }
          }
          else if (this.type == 514)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.3f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.4f;
            }
            for (int index1 = 0; index1 < 6; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.1f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 4.6f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.3f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 3.3f;
              if (Main.rand.Next(2) == 0)
              {
                int index4 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.1f);
                Dust dust3 = Main.dust[index4];
                dust3.velocity = dust3.velocity * 2.7f;
              }
            }
            if (this.owner == Main.myPlayer)
            {
              this.penetrate = -1;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + (float) (this.height / 2);
              this.width = 112;
              this.height = 112;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 - (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 - (float) (this.height / 2);
              this.ai[0] = 2f;
              this.Damage();
            }
          }
          else if (this.type == 306)
          {
            Main.PlaySound(3, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184, 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust = Main.dust[index2];
              dust.scale = dust.scale * 1.1f;
              Main.dust[index2].noGravity = true;
            }
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 184, 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2.5f;
              Dust dust2 = Main.dust[index2];
              dust2.scale = dust2.scale * 0.8f;
              Main.dust[index2].noGravity = true;
            }
            if (this.owner == Main.myPlayer)
            {
              int num = 2;
              if (Main.rand.Next(10) == 0)
                ++num;
              if (Main.rand.Next(10) == 0)
                ++num;
              if (Main.rand.Next(10) == 0)
                ++num;
              for (int index = 0; index < num; ++index)
                Projectile.NewProjectile(this.position.X, this.position.Y, (float) Main.rand.Next(-35, 36) * 0.02f * 10f, (float) Main.rand.Next(-35, 36) * 0.02f * 10f, 307, (int) ((double) this.damage * 0.7), (float) (int) ((double) this.knockBack * 0.35), Main.myPlayer, 0.0f, 0.0f);
            }
          }
          else if (this.type == 469)
          {
            if (this.owner == Main.myPlayer)
            {
              int num1 = 6;
              for (int index1 = 0; index1 < num1; ++index1)
              {
                if (index1 % 2 != 1 || Main.rand.Next(3) == 0)
                {
                  Vector2 position = this.position;
                  Vector2 oldVelocity = this.oldVelocity;
                  oldVelocity.Normalize();
                  oldVelocity *= 8f;
                  float num2 = (float) Main.rand.Next(-35, 36) * 0.01f;
                  float num3 = (float) Main.rand.Next(-35, 36) * 0.01f;
                  Vector2 vector2 = position - oldVelocity * (float) index1;
                  float SpeedX = num2 + this.oldVelocity.X / 6f;
                  float SpeedY = num3 + this.oldVelocity.Y / 6f;
                  int index2 = Projectile.NewProjectile(vector2.X, vector2.Y, SpeedX, SpeedY, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage / 3), Main.player[this.owner].beeKB(0.0f), Main.myPlayer, 0.0f, 0.0f);
                  Main.projectile[index2].magic = false;
                  Main.projectile[index2].ranged = true;
                  Main.projectile[index2].penetrate = 2;
                }
              }
            }
          }
          else if (this.type == 183)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1f;
            }
            int index3 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.gore[index3].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.gore[index3].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + 1f;
            Gore gore1 = Main.gore[index3];
            gore1.velocity = gore1.velocity * 0.3f;
            int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @Main.gore[index4].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @Main.gore[index4].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 + 1f;
            Gore gore2 = Main.gore[index4];
            gore2.velocity = gore2.velocity * 0.3f;
            int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @Main.gore[index5].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 + 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local6 = @Main.gore[index5].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local6 = ^local6 - 1f;
            Gore gore3 = Main.gore[index5];
            gore3.velocity = gore3.velocity * 0.3f;
            int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local7 = @Main.gore[index6].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local7 = ^local7 - 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local8 = @Main.gore[index6].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local8 = ^local8 - 1f;
            Gore gore4 = Main.gore[index6];
            gore4.velocity = gore4.velocity * 0.3f;
            if (this.owner == Main.myPlayer)
            {
              int num = Main.rand.Next(15, 25);
              for (int index1 = 0; index1 < num; ++index1)
                Projectile.NewProjectile(this.position.X, this.position.Y, (float) Main.rand.Next(-35, 36) * 0.02f, (float) Main.rand.Next(-35, 36) * 0.02f, Main.player[this.owner].beeType(), Main.player[this.owner].beeDamage(this.damage), Main.player[this.owner].beeKB(0.0f), Main.myPlayer, 0.0f, 0.0f);
            }
          }
          else if (this.aiStyle == 34)
          {
            if (this.owner != Main.myPlayer)
              this.timeLeft = 60;
            Main.PlaySound(SoundID.Item14, this.position);
            if (this.type == 167)
            {
              for (int index1 = 0; index1 < 400; ++index1)
              {
                float num1 = 16f;
                if (index1 < 300)
                  num1 = 12f;
                if (index1 < 200)
                  num1 = 8f;
                if (index1 < 100)
                  num1 = 4f;
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, 0.0f, 0.0f, 100, new Color(), 1f);
                float num2 = Main.dust[index2].velocity.X;
                float y = Main.dust[index2].velocity.Y;
                if ((double) num2 == 0.0 && (double) y == 0.0)
                  num2 = 1f;
                float num3 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) y * (double) y);
                float num4 = num1 / num3;
                float num5 = num2 * num4;
                float num6 = y * num4;
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.5f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @Main.dust[index2].velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num5;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index2].velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + num6;
                Main.dust[index2].scale = 1.3f;
                Main.dust[index2].noGravity = true;
              }
            }
            if (this.type == 168)
            {
              for (int index1 = 0; index1 < 400; ++index1)
              {
                float num1 = (float) (2.0 * ((double) index1 / 100.0));
                if (index1 > 100)
                  num1 = 10f;
                if (index1 > 250)
                  num1 = 13f;
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 131, 0.0f, 0.0f, 100, new Color(), 1f);
                float num2 = Main.dust[index2].velocity.X;
                float y = Main.dust[index2].velocity.Y;
                if ((double) num2 == 0.0 && (double) y == 0.0)
                  num2 = 1f;
                float num3 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) y * (double) y);
                float num4 = num1 / num3;
                float num5;
                float num6;
                if (index1 <= 200)
                {
                  num5 = num2 * num4;
                  num6 = y * num4;
                }
                else
                {
                  num5 = (float) ((double) num2 * (double) num4 * 1.25);
                  num6 = (float) ((double) y * (double) num4 * 0.75);
                }
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.5f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @Main.dust[index2].velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num5;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index2].velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + num6;
                if (index1 > 100)
                {
                  Main.dust[index2].scale = 1.3f;
                  Main.dust[index2].noGravity = true;
                }
              }
            }
            if (this.type == 169)
            {
              Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
              float num1 = (float) Main.rand.Next(5, 9);
              float num2 = (float) Main.rand.Next(12, 17);
              float num3 = (float) Main.rand.Next(3, 7);
              float num4 = 20f;
              for (float num5 = 0.0f; (double) num5 < (double) num1; ++num5)
              {
                for (int index1 = 0; index1 < 2; ++index1)
                {
                  Vector2 vector2_1 = spinningpoint.RotatedBy((index1 == 0 ? 1.0 : -1.0) * 6.28318548202515 / ((double) num1 * 2.0), new Vector2());
                  for (float num6 = 0.0f; (double) num6 < (double) num4; ++num6)
                  {
                    Vector2 vector2_2 = Vector2.Lerp(spinningpoint, vector2_1, num6 / num4);
                    float num7 = MathHelper.Lerp(num2, num3, num6 / num4);
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, 0.0f, 0.0f, 100, new Color(), 1.3f);
                    Dust dust1 = Main.dust[index2];
                    dust1.velocity = dust1.velocity * 0.1f;
                    Main.dust[index2].noGravity = true;
                    Dust dust2 = Main.dust[index2];
                    dust2.velocity = dust2.velocity + vector2_2 * num7;
                  }
                }
                spinningpoint = spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
              }
              for (float num5 = 0.0f; (double) num5 < (double) num1; ++num5)
              {
                for (int index1 = 0; index1 < 2; ++index1)
                {
                  Vector2 vector2_1 = spinningpoint.RotatedBy((index1 == 0 ? 1.0 : -1.0) * 6.28318548202515 / ((double) num1 * 2.0), new Vector2());
                  for (float num6 = 0.0f; (double) num6 < (double) num4; ++num6)
                  {
                    Vector2 vector2_2 = Vector2.Lerp(spinningpoint, vector2_1, num6 / num4);
                    float num7 = MathHelper.Lerp(num2, num3, num6 / num4) / 2f;
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 133, 0.0f, 0.0f, 100, new Color(), 1.3f);
                    Dust dust1 = Main.dust[index2];
                    dust1.velocity = dust1.velocity * 0.1f;
                    Main.dust[index2].noGravity = true;
                    Dust dust2 = Main.dust[index2];
                    dust2.velocity = dust2.velocity + vector2_2 * num7;
                  }
                }
                spinningpoint = spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
              }
              for (int index1 = 0; index1 < 100; ++index1)
              {
                float num5 = num2;
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 132, 0.0f, 0.0f, 100, new Color(), 1f);
                float num6 = Main.dust[index2].velocity.X;
                float y = Main.dust[index2].velocity.Y;
                if ((double) num6 == 0.0 && (double) y == 0.0)
                  num6 = 1f;
                float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) y * (double) y);
                float num8 = num5 / num7;
                float num9 = num6 * num8;
                float num10 = y * num8;
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.5f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @Main.dust[index2].velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num9;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index2].velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + num10;
                Main.dust[index2].scale = 1.3f;
                Main.dust[index2].noGravity = true;
              }
            }
            if (this.type == 170)
            {
              for (int index1 = 0; index1 < 400; ++index1)
              {
                int Type = 133;
                float num1 = 16f;
                if (index1 > 100)
                  num1 = 11f;
                if (index1 > 100)
                  Type = 134;
                if (index1 > 200)
                  num1 = 8f;
                if (index1 > 200)
                  Type = 133;
                if (index1 > 300)
                  num1 = 5f;
                if (index1 > 300)
                  Type = 134;
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, 0.0f, 0.0f, 100, new Color(), 1f);
                float num2 = Main.dust[index2].velocity.X;
                float y = Main.dust[index2].velocity.Y;
                if ((double) num2 == 0.0 && (double) y == 0.0)
                  num2 = 1f;
                float num3 = (float) Math.Sqrt((double) num2 * (double) num2 + (double) y * (double) y);
                float num4 = num1 / num3;
                float num5;
                float num6;
                if (index1 > 300)
                {
                  num5 = (float) ((double) num2 * (double) num4 * 0.699999988079071);
                  num6 = y * num4;
                }
                else if (index1 > 200)
                {
                  num5 = num2 * num4;
                  num6 = (float) ((double) y * (double) num4 * 0.699999988079071);
                }
                else if (index1 > 100)
                {
                  num5 = (float) ((double) num2 * (double) num4 * 0.699999988079071);
                  num6 = y * num4;
                }
                else
                {
                  num5 = num2 * num4;
                  num6 = (float) ((double) y * (double) num4 * 0.699999988079071);
                }
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.5f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @Main.dust[index2].velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num5;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index2].velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + num6;
                if (Main.rand.Next(3) != 0)
                {
                  Main.dust[index2].scale = 1.3f;
                  Main.dust[index2].noGravity = true;
                }
              }
            }
            if (this.type == 415)
            {
              Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
              float num1 = (float) Main.rand.Next(5, 9);
              float num2 = (float) Main.rand.Next(10, 15) * 0.66f;
              float num3 = (float) Main.rand.Next(4, 7) / 2f;
              int num4 = 30;
              for (int index1 = 0; (double) index1 < (double) num4 * (double) num1; ++index1)
              {
                if (index1 % num4 == 0)
                  spinningpoint = spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
                float num5 = MathHelper.Lerp(num3, num2, (float) (index1 % num4) / (float) num4);
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, 0.0f, 0.0f, 100, new Color(), 1f);
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.1f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + spinningpoint * num5;
                Main.dust[index2].scale = 1.3f;
                Main.dust[index2].noGravity = true;
              }
              for (int index1 = 0; index1 < 100; ++index1)
              {
                float num5 = num2;
                if (index1 < 30)
                  num5 = (float) (((double) num3 + (double) num2) / 2.0);
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 130, 0.0f, 0.0f, 100, new Color(), 1f);
                float num6 = Main.dust[index2].velocity.X;
                float y = Main.dust[index2].velocity.Y;
                if ((double) num6 == 0.0 && (double) y == 0.0)
                  num6 = 1f;
                float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) y * (double) y);
                float num8 = num5 / num7;
                float num9 = num6 * num8;
                float num10 = y * num8;
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.5f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @Main.dust[index2].velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num9;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index2].velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + num10;
                Main.dust[index2].scale = 1.3f;
                Main.dust[index2].noGravity = true;
              }
            }
            if (this.type == 416)
            {
              Vector2 spinningpoint1 = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
              Vector2 spinningpoint2 = spinningpoint1;
              float num1 = (float) (Main.rand.Next(3, 6) * 2);
              int num2 = 20;
              float num3 = Main.rand.Next(2) == 0 ? 1f : -1f;
              bool flag = true;
              for (int index1 = 0; (double) index1 < (double) num2 * (double) num1; ++index1)
              {
                if (index1 % num2 == 0)
                {
                  spinningpoint2 = spinningpoint2.RotatedBy((double) num3 * (6.28318548202515 / (double) num1), new Vector2());
                  spinningpoint1 = spinningpoint2;
                  flag = !flag;
                }
                else
                {
                  float num4 = 6.283185f / ((float) num2 * num1);
                  spinningpoint1 = spinningpoint1.RotatedBy((double) num4 * (double) num3 * 3.0, new Vector2());
                }
                float num5 = MathHelper.Lerp(1f, 8f, (float) (index1 % num2) / (float) num2);
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 131, 0.0f, 0.0f, 100, new Color(), 1.4f);
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.1f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + spinningpoint1 * num5;
                if (flag)
                  Main.dust[index2].scale = 0.9f;
                Main.dust[index2].noGravity = true;
              }
            }
            if (this.type == 417)
            {
              float num1 = (float) Main.rand.NextDouble() * 6.283185f;
              float num2 = (float) Main.rand.NextDouble() * 6.283185f;
              float num3 = (float) (4.0 + Main.rand.NextDouble() * 3.0);
              float num4 = (float) (4.0 + Main.rand.NextDouble() * 3.0);
              float num5 = num3;
              if ((double) num4 > (double) num5)
                num5 = num4;
              for (int index1 = 0; index1 < 150; ++index1)
              {
                int Type = 132;
                float num6 = num5;
                if (index1 > 50)
                  num6 = num4;
                if (index1 > 50)
                  Type = 133;
                if (index1 > 100)
                  num6 = num3;
                if (index1 > 100)
                  Type = 132;
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, 0.0f, 0.0f, 100, new Color(), 1f);
                Vector2 velocity = Main.dust[index2].velocity;
                velocity.Normalize();
                Vector2 spinningpoint = velocity * num6;
                if (index1 > 100)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @spinningpoint.X;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local * 0.5f;
                  spinningpoint = spinningpoint.RotatedBy((double) num1, new Vector2());
                }
                else if (index1 > 50)
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: variable of a reference type
                  float& local = @spinningpoint.Y;
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  ^local = ^local * 0.5f;
                  spinningpoint = spinningpoint.RotatedBy((double) num2, new Vector2());
                }
                Dust dust1 = Main.dust[index2];
                dust1.velocity = dust1.velocity * 0.2f;
                Dust dust2 = Main.dust[index2];
                dust2.velocity = dust2.velocity + spinningpoint;
                if (index1 <= 200)
                {
                  Main.dust[index2].scale = 1.3f;
                  Main.dust[index2].noGravity = true;
                }
              }
            }
            if (this.type == 418)
            {
              Vector2 spinningpoint = ((float) Main.rand.NextDouble() * 6.283185f).ToRotationVector2();
              float num1 = (float) Main.rand.Next(5, 12);
              float num2 = (float) Main.rand.Next(9, 14) * 0.66f;
              float num3 = (float) Main.rand.Next(2, 4) * 0.66f;
              float num4 = 15f;
              for (float num5 = 0.0f; (double) num5 < (double) num1; ++num5)
              {
                for (int index1 = 0; index1 < 2; ++index1)
                {
                  Vector2 vector2_1 = spinningpoint.RotatedBy((index1 == 0 ? 1.0 : -1.0) * 6.28318548202515 / ((double) num1 * 2.0), new Vector2());
                  for (float num6 = 0.0f; (double) num6 < (double) num4; ++num6)
                  {
                    Vector2 vector2_2 = Vector2.SmoothStep(spinningpoint, vector2_1, num6 / num4);
                    float num7 = MathHelper.SmoothStep(num2, num3, num6 / num4);
                    int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, 134, 0.0f, 0.0f, 100, new Color(), 1.3f);
                    Dust dust1 = Main.dust[index2];
                    dust1.velocity = dust1.velocity * 0.1f;
                    Main.dust[index2].noGravity = true;
                    Dust dust2 = Main.dust[index2];
                    dust2.velocity = dust2.velocity + vector2_2 * num7;
                  }
                }
                spinningpoint = spinningpoint.RotatedBy(6.28318548202515 / (double) num1, new Vector2());
              }
              for (int index1 = 0; index1 < 120; ++index1)
              {
                float num5 = num2;
                int Type = 133;
                if (index1 < 80)
                  num5 = num3 - 0.5f;
                else
                  Type = 131;
                int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), 6, 6, Type, 0.0f, 0.0f, 100, new Color(), 1f);
                float num6 = Main.dust[index2].velocity.X;
                float y = Main.dust[index2].velocity.Y;
                if ((double) num6 == 0.0 && (double) y == 0.0)
                  num6 = 1f;
                float num7 = (float) Math.Sqrt((double) num6 * (double) num6 + (double) y * (double) y);
                float num8 = num5 / num7;
                float num9 = num6 * num8;
                float num10 = y * num8;
                Dust dust = Main.dust[index2];
                dust.velocity = dust.velocity * 0.2f;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local1 = @Main.dust[index2].velocity.X;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local1 = ^local1 + num9;
                // ISSUE: explicit reference operation
                // ISSUE: variable of a reference type
                float& local2 = @Main.dust[index2].velocity.Y;
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                ^local2 = ^local2 + num10;
                Main.dust[index2].scale = 1.3f;
                Main.dust[index2].noGravity = true;
              }
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 + (float) (this.height / 2);
            this.width = 192;
            this.height = 192;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local6 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local6 = ^local6 - (float) (this.height / 2);
            this.penetrate = -1;
            this.Damage();
          }
          else if (this.type == 312)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 22;
            this.height = 22;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.4f;
            }
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 3.5f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 7f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 3f;
            }
            for (int index1 = 0; index1 < 2; ++index1)
            {
              float num = 0.4f;
              if (index1 == 1)
                num = 0.8f;
              int index2 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore1 = Main.gore[index2];
              gore1.velocity = gore1.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @Main.gore[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @Main.gore[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 + 1f;
              int index3 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore2 = Main.gore[index3];
              gore2.velocity = gore2.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local7 = @Main.gore[index3].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local7 = ^local7 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local8 = @Main.gore[index3].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local8 = ^local8 + 1f;
              int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore3 = Main.gore[index4];
              gore3.velocity = gore3.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local9 = @Main.gore[index4].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local9 = ^local9 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local10 = @Main.gore[index4].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local10 = ^local10 - 1f;
              int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore4 = Main.gore[index5];
              gore4.velocity = gore4.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local11 = @Main.gore[index5].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local11 = ^local11 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local12 = @Main.gore[index5].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local12 = ^local12 - 1f;
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local13 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local13 = ^local13 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local14 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local14 = ^local14 + (float) (this.height / 2);
            this.width = 128;
            this.height = 128;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local15 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local15 = ^local15 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local16 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local16 = ^local16 - (float) (this.height / 2);
            this.Damage();
          }
          else if (this.type == 133 || this.type == 134 || (this.type == 135 || this.type == 136) || (this.type == 137 || this.type == 138 || (this.type == 303 || this.type == 338)) || this.type == 339)
          {
            if (this.type == 30 || this.type == 133 || (this.type == 136 || this.type == 139))
              Main.PlaySound(SoundID.Item62, this.position);
            else
              Main.PlaySound(SoundID.Item14, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 22;
            this.height = 22;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.4f;
            }
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 3.5f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 7f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 3f;
            }
            for (int index1 = 0; index1 < 2; ++index1)
            {
              float num = 0.4f;
              if (index1 == 1)
                num = 0.8f;
              int index2 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore1 = Main.gore[index2];
              gore1.velocity = gore1.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @Main.gore[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @Main.gore[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 + 1f;
              int index3 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore2 = Main.gore[index3];
              gore2.velocity = gore2.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local7 = @Main.gore[index3].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local7 = ^local7 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local8 = @Main.gore[index3].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local8 = ^local8 + 1f;
              int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore3 = Main.gore[index4];
              gore3.velocity = gore3.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local9 = @Main.gore[index4].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local9 = ^local9 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local10 = @Main.gore[index4].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local10 = ^local10 - 1f;
              int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore4 = Main.gore[index5];
              gore4.velocity = gore4.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local11 = @Main.gore[index5].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local11 = ^local11 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local12 = @Main.gore[index5].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local12 = ^local12 - 1f;
            }
          }
          else if (this.type == 139 || this.type == 140 || (this.type == 141 || this.type == 142) || (this.type == 143 || this.type == 144 || (this.type == 340 || this.type == 341)))
          {
            if (this.type == 30 || this.type == 133 || (this.type == 136 || this.type == 139))
              Main.PlaySound(SoundID.Item62, this.position);
            else
              Main.PlaySound(SoundID.Item14, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 80;
            this.height = 80;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            for (int index1 = 0; index1 < 40; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 3f;
              if (Main.rand.Next(2) == 0)
              {
                Main.dust[index2].scale = 0.5f;
                Main.dust[index2].fadeIn = (float) (1.0 + (double) Main.rand.Next(10) * 0.100000001490116);
              }
            }
            for (int index1 = 0; index1 < 70; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 3f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 5f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
            }
            for (int index1 = 0; index1 < 3; ++index1)
            {
              float num = 0.33f;
              if (index1 == 1)
                num = 0.66f;
              if (index1 == 2)
                num = 1f;
              int index2 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore1 = Main.gore[index2];
              gore1.velocity = gore1.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @Main.gore[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @Main.gore[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 + 1f;
              int index3 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore2 = Main.gore[index3];
              gore2.velocity = gore2.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local7 = @Main.gore[index3].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local7 = ^local7 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local8 = @Main.gore[index3].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local8 = ^local8 + 1f;
              int index4 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore3 = Main.gore[index4];
              gore3.velocity = gore3.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local9 = @Main.gore[index4].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local9 = ^local9 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local10 = @Main.gore[index4].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local10 = ^local10 - 1f;
              int index5 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Gore gore4 = Main.gore[index5];
              gore4.velocity = gore4.velocity * num;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local11 = @Main.gore[index5].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local11 = ^local11 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local12 = @Main.gore[index5].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local12 = ^local12 - 1f;
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local13 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local13 = ^local13 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local14 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local14 = ^local14 + (float) (this.height / 2);
            this.width = 10;
            this.height = 10;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local15 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local15 = ^local15 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local16 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local16 = ^local16 - (float) (this.height / 2);
          }
          else if (this.type == 246)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.9f;
            }
            for (int index1 = 0; index1 < 5; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 3f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 2f;
            }
            int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore = Main.gore[index4];
            gore.velocity = gore.velocity * 0.3f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.gore[index4].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) Main.rand.Next(-1, 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.gore[index4].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) Main.rand.Next(-1, 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 + (float) (this.height / 2);
            this.width = 150;
            this.height = 150;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local6 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local6 = ^local6 - (float) (this.height / 2);
            this.penetrate = -1;
            this.maxPenetrate = 0;
            this.Damage();
            if (this.owner == Main.myPlayer)
            {
              int num1 = Main.rand.Next(2, 6);
              for (int index1 = 0; index1 < num1; ++index1)
              {
                float num2 = (float) Main.rand.Next(-100, 101) + 0.01f;
                float num3 = (float) Main.rand.Next(-100, 101);
                float num4 = num2 - 0.01f;
                float num5 = 8f / (float) Math.Sqrt((double) num4 * (double) num4 + (double) num3 * (double) num3);
                int index2 = Projectile.NewProjectile(this.Center.X - this.oldVelocity.X, this.Center.Y - this.oldVelocity.Y, num4 * num5, num3 * num5, 249, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
                Main.projectile[index2].maxPenetrate = 0;
              }
            }
          }
          else if (this.type == 249)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            for (int index1 = 0; index1 < 7; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.8f;
            }
            for (int index1 = 0; index1 < 2; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 2.5f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 1.5f;
            }
            int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore = Main.gore[index];
            gore.velocity = gore.velocity * 0.2f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @Main.gore[index].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) Main.rand.Next(-1, 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @Main.gore[index].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) Main.rand.Next(-1, 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 + (float) (this.height / 2);
            this.width = 100;
            this.height = 100;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local6 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local6 = ^local6 - (float) (this.height / 2);
            this.penetrate = -1;
            this.Damage();
          }
          else if (this.type == 588)
          {
            Main.PlaySound(SoundID.Item14, this.position);
            this.position = this.Center;
            this.width = this.height = 22;
            this.Center = this.position;
            for (int index1 = 0; index1 < 8; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 219 + Main.rand.Next(5), 0.0f, 0.0f, 0, new Color(), 1f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.4f;
              Main.dust[index2].fadeIn = 1f;
              Main.dust[index2].noGravity = true;
            }
            for (int index1 = 0; index1 < 15; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), 0.0f, 0.0f, 0, new Color(), 1.6f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 5f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 139 + Main.rand.Next(4), 0.0f, 0.0f, 0, new Color(), 1.9f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 3f;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283), 1f);
              Gore gore = Main.gore[index];
              gore.velocity = gore.velocity * 0.4f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.gore[index].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.gore[index].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + 1f;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283), 1f);
              Gore gore = Main.gore[index];
              gore.velocity = gore.velocity * 0.4f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.gore[index].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.gore[index].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + 1f;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283), 1f);
              Gore gore = Main.gore[index];
              gore.velocity = gore.velocity * 0.4f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.gore[index].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.gore[index].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - 1f;
            }
            if (Main.rand.Next(2) == 0)
            {
              int index = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(276, 283), 1f);
              Gore gore = Main.gore[index];
              gore.velocity = gore.velocity * 0.4f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.gore[index].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 - 1f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.gore[index].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 - 1f;
            }
          }
          else if (this.type == 28 || this.type == 30 || (this.type == 37 || this.type == 75) || (this.type == 102 || this.type == 164 || (this.type == 397 || this.type == 517)) || (this.type == 516 || this.type == 519))
          {
            Main.PlaySound(SoundID.Item14, this.position);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local1 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local1 = ^local1 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local2 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local2 = ^local2 + (float) (this.height / 2);
            this.width = 22;
            this.height = 22;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local3 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local3 = ^local3 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local4 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local4 = ^local4 - (float) (this.height / 2);
            for (int index1 = 0; index1 < 20; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.4f;
            }
            for (int index1 = 0; index1 < 10; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2.5f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 5f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 1.5f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 3f;
            }
            int index4 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore1 = Main.gore[index4];
            gore1.velocity = gore1.velocity * 0.4f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local5 = @Main.gore[index4].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local5 = ^local5 + 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local6 = @Main.gore[index4].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local6 = ^local6 + 1f;
            int index5 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore2 = Main.gore[index5];
            gore2.velocity = gore2.velocity * 0.4f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local7 = @Main.gore[index5].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local7 = ^local7 - 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local8 = @Main.gore[index5].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local8 = ^local8 + 1f;
            int index6 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore3 = Main.gore[index6];
            gore3.velocity = gore3.velocity * 0.4f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local9 = @Main.gore[index6].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local9 = ^local9 + 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local10 = @Main.gore[index6].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local10 = ^local10 - 1f;
            int index7 = Gore.NewGore(new Vector2(this.position.X, this.position.Y), new Vector2(), Main.rand.Next(61, 64), 1f);
            Gore gore4 = Main.gore[index7];
            gore4.velocity = gore4.velocity * 0.4f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local11 = @Main.gore[index7].velocity.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local11 = ^local11 - 1f;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local12 = @Main.gore[index7].velocity.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local12 = ^local12 - 1f;
            if (this.type == 102)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local13 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local13 = ^local13 + (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local14 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local14 = ^local14 + (float) (this.height / 2);
              this.width = 128;
              this.height = 128;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local15 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local15 = ^local15 - (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local16 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local16 = ^local16 - (float) (this.height / 2);
              this.damage = 40;
              this.Damage();
            }
          }
          else if (this.type == 29 || this.type == 108 || (this.type == 470 || this.type == 637))
          {
            Main.PlaySound(SoundID.Item14, this.position);
            if (this.type == 29)
            {
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + (float) (this.height / 2);
              this.width = 200;
              this.height = 200;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @this.position.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 - (float) (this.width / 2);
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @this.position.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 - (float) (this.height / 2);
            }
            for (int index1 = 0; index1 < 50; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 31, 0.0f, 0.0f, 100, new Color(), 2f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.4f;
            }
            for (int index1 = 0; index1 < 80; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 3f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 5f;
              int index3 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 6, 0.0f, 0.0f, 100, new Color(), 2f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 3f;
            }
            for (int index1 = 0; index1 < 2; ++index1)
            {
              int index2 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Main.gore[index2].scale = 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local1 = @Main.gore[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local1 = ^local1 + 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local2 = @Main.gore[index2].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local2 = ^local2 + 1.5f;
              int index3 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Main.gore[index3].scale = 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local3 = @Main.gore[index3].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local3 = ^local3 - 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local4 = @Main.gore[index3].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local4 = ^local4 + 1.5f;
              int index4 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Main.gore[index4].scale = 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local5 = @Main.gore[index4].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local5 = ^local5 + 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local6 = @Main.gore[index4].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local6 = ^local6 - 1.5f;
              int index5 = Gore.NewGore(new Vector2((float) ((double) this.position.X + (double) (this.width / 2) - 24.0), (float) ((double) this.position.Y + (double) (this.height / 2) - 24.0)), new Vector2(), Main.rand.Next(61, 64), 1f);
              Main.gore[index5].scale = 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local7 = @Main.gore[index5].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local7 = ^local7 - 1.5f;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local8 = @Main.gore[index5].velocity.Y;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local8 = ^local8 - 1.5f;
            }
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local9 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local9 = ^local9 + (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local10 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local10 = ^local10 + (float) (this.height / 2);
            this.width = 10;
            this.height = 10;
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local11 = @this.position.X;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local11 = ^local11 - (float) (this.width / 2);
            // ISSUE: explicit reference operation
            // ISSUE: variable of a reference type
            float& local12 = @this.position.Y;
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            ^local12 = ^local12 - (float) (this.height / 2);
          }
          else if (this.type == 69)
          {
            Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f, 0.0f, 0, new Color(), 1f);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 33, 0.0f, -2f, 0, new Color(), 1.1f);
              Main.dust[index2].alpha = 100;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local * 1.5f;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 3f;
            }
          }
          else if (this.type == 70)
          {
            Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f, 0.0f, 0, new Color(), 1f);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 52, 0.0f, -2f, 0, new Color(), 1.1f);
              Main.dust[index2].alpha = 100;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local * 1.5f;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 3f;
            }
          }
          else if (this.type == 621)
          {
            Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f, 0.0f, 0, new Color(), 1f);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              int index2 = Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 266, 0.0f, -2f, 0, new Color(), 1.1f);
              Main.dust[index2].alpha = 100;
              // ISSUE: explicit reference operation
              // ISSUE: variable of a reference type
              float& local = @Main.dust[index2].velocity.X;
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              ^local = ^local * 1.5f;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 3f;
            }
          }
          else if (this.type == 114 || this.type == 115)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 4; index1 < 31; ++index1)
            {
              float num1 = this.oldVelocity.X * (30f / (float) index1);
              float num2 = this.oldVelocity.Y * (30f / (float) index1);
              int index2 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.4f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 0.5f;
              int index3 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 27, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 0.9f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 0.5f;
            }
          }
          else if (this.type == 116)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 4; index1 < 31; ++index1)
            {
              float num1 = this.oldVelocity.X * (30f / (float) index1);
              float num2 = this.oldVelocity.Y * (30f / (float) index1);
              int index2 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.8f);
              Main.dust[index2].noGravity = true;
              int index3 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, 64, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.4f);
              Main.dust[index3].noGravity = true;
            }
          }
          else if (this.type == 173)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 4; index1 < 24; ++index1)
            {
              float num1 = this.oldVelocity.X * (30f / (float) index1);
              float num2 = this.oldVelocity.Y * (30f / (float) index1);
              int Type;
              switch (Main.rand.Next(3))
              {
                case 0:
                  Type = 15;
                  break;
                case 1:
                  Type = 57;
                  break;
                default:
                  Type = 58;
                  break;
              }
              int index2 = Dust.NewDust(new Vector2(this.position.X - num1, this.position.Y - num2), 8, 8, Type, this.oldVelocity.X * 0.2f, this.oldVelocity.Y * 0.2f, 100, new Color(), 1.8f);
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 1.5f;
              Main.dust[index2].noGravity = true;
            }
          }
          else if (this.type == 132)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 4; index1 < 31; ++index1)
            {
              float num1 = this.oldVelocity.X * (30f / (float) index1);
              float num2 = this.oldVelocity.Y * (30f / (float) index1);
              int index2 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.8f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 0.5f;
              int index3 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8, 8, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.4f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 0.05f;
            }
          }
          else if (this.type == 156)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 4; index1 < 31; ++index1)
            {
              float num1 = this.oldVelocity.X * (30f / (float) index1);
              float num2 = this.oldVelocity.Y * (30f / (float) index1);
              int index2 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, (int) byte.MaxValue, new Color(), 1.8f);
              Main.dust[index2].noGravity = true;
              Dust dust1 = Main.dust[index2];
              dust1.velocity = dust1.velocity * 0.5f;
              int index3 = Dust.NewDust(new Vector2(this.oldPosition.X - num1, this.oldPosition.Y - num2), 8, 8, 73, this.oldVelocity.X, this.oldVelocity.Y, (int) byte.MaxValue, new Color(), 1.4f);
              Dust dust2 = Main.dust[index3];
              dust2.velocity = dust2.velocity * 0.05f;
              Main.dust[index3].noGravity = true;
            }
          }
          else if (this.type == 157)
          {
            Main.PlaySound(SoundID.Item10, this.position);
            for (int index1 = 4; index1 < 31; ++index1)
            {
              int index2 = Dust.NewDust(this.position, this.width, this.height, 107, this.oldVelocity.X, this.oldVelocity.Y, 100, new Color(), 1.8f);
              Main.dust[index2].noGravity = true;
              Dust dust = Main.dust[index2];
              dust.velocity = dust.velocity * 0.5f;
            }
          }
          else if (this.type == 370)
          {
            Main.PlaySound(SoundID.Item4, this.position);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f, 0.0f, 0, new Color(), 1f);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
              vector2.Normalize();
              int index2 = Gore.NewGore(this.Center + vector2 * 10f, vector2 * (float) Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, 331, (float) Main.rand.Next(40, 141) * 0.01f);
              Main.gore[index2].sticky = false;
            }
          }
          else if (this.type == 371)
          {
            Main.PlaySound(13, (int) this.position.X, (int) this.position.Y, 1, 1f, 0.0f);
            Main.PlaySound(SoundID.Item16, this.position);
            for (int index = 0; index < 5; ++index)
              Dust.NewDust(new Vector2(this.position.X, this.position.Y), this.width, this.height, 13, 0.0f, 0.0f, 0, new Color(), 1f);
            for (int index1 = 0; index1 < 30; ++index1)
            {
              Vector2 vector2 = new Vector2((float) Main.rand.Next(-10, 11), (float) Main.rand.Next(-10, 11));
              vector2.Normalize();
              vector2 *= 0.4f;
              int index2 = Gore.NewGore(this.Center + vector2 * 10f, vector2 * (float) Main.rand.Next(4, 9) * 0.66f + Vector2.UnitY * 1.5f, Main.rand.Next(435, 438), (float) Main.rand.Next(20, 100) * 0.01f);
              Main.gore[index2].sticky = false;
            }
          }
        }
      }
      if (this.owner == Main.myPlayer && (this.type == 370 || this.type == 371))
      {
        float num = 80f;
        int type = 119;
        if (this.type == 371)
          type = 120;
        for (int index = 0; index < (int) byte.MaxValue; ++index)
        {
          Player player = Main.player[index];
          if (player.active && !player.dead && (double) Vector2.Distance(this.Center, player.Center) < (double) num)
            player.AddBuff(type, 1800, false);
        }
        for (int index = 0; index < 200; ++index)
        {
          NPC npc = Main.npc[index];
          if (npc.active && npc.life > 0 && (double) Vector2.Distance(this.Center, npc.Center) < (double) num)
            npc.AddBuff(type, 1800, false);
        }
      }
      if (this.owner == Main.myPlayer)
      {
        if (this.type == 28 || this.type == 29 || (this.type == 37 || this.type == 108) || (this.type == 136 || this.type == 137 || (this.type == 138 || this.type == 142)) || (this.type == 143 || this.type == 144 || (this.type == 339 || this.type == 341) || (this.type == 470 || this.type == 516 || (this.type == 519 || this.type == 637))))
        {
          int num1 = 3;
          if (this.type == 28 || this.type == 37 || (this.type == 516 || this.type == 519))
            num1 = 4;
          if (this.type == 29 || this.type == 470 || this.type == 637)
            num1 = 7;
          if (this.type == 142 || this.type == 143 || (this.type == 144 || this.type == 341))
            num1 = 5;
          if (this.type == 108)
            num1 = 10;
          int num2 = (int) ((double) this.position.X / 16.0 - (double) num1);
          int num3 = (int) ((double) this.position.X / 16.0 + (double) num1);
          int num4 = (int) ((double) this.position.Y / 16.0 - (double) num1);
          int num5 = (int) ((double) this.position.Y / 16.0 + (double) num1);
          if (num2 < 0)
            num2 = 0;
          if (num3 > Main.maxTilesX)
            num3 = Main.maxTilesX;
          if (num4 < 0)
            num4 = 0;
          if (num5 > Main.maxTilesY)
            num5 = Main.maxTilesY;
          bool flag1 = false;
          for (int index1 = num2; index1 <= num3; ++index1)
          {
            for (int index2 = num4; index2 <= num5; ++index2)
            {
              float num6 = Math.Abs((float) index1 - this.position.X / 16f);
              float num7 = Math.Abs((float) index2 - this.position.Y / 16f);
              if (Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7) < (double) num1 && Main.tile[index1, index2] != null && (int) Main.tile[index1, index2].wall == 0)
              {
                flag1 = true;
                break;
              }
            }
          }
          AchievementsHelper.CurrentlyMining = true;
          for (int i1 = num2; i1 <= num3; ++i1)
          {
            for (int j1 = num4; j1 <= num5; ++j1)
            {
              float num6 = Math.Abs((float) i1 - this.position.X / 16f);
              float num7 = Math.Abs((float) j1 - this.position.Y / 16f);
              if (Math.Sqrt((double) num6 * (double) num6 + (double) num7 * (double) num7) < (double) num1)
              {
                bool flag2 = true;
                if (Main.tile[i1, j1] != null && Main.tile[i1, j1].active())
                {
                  flag2 = true;
                  if (Main.tileDungeon[(int) Main.tile[i1, j1].type] || (int) Main.tile[i1, j1].type == 88 || (TileID.Sets.BasicChest[(int) Main.tile[i1, j1].type] || (int) Main.tile[i1, j1].type == 26) || ((int) Main.tile[i1, j1].type == 107 || (int) Main.tile[i1, j1].type == 108 || ((int) Main.tile[i1, j1].type == 111 || (int) Main.tile[i1, j1].type == 226)) || ((int) Main.tile[i1, j1].type == 237 || (int) Main.tile[i1, j1].type == 221 || ((int) Main.tile[i1, j1].type == 222 || (int) Main.tile[i1, j1].type == 223) || ((int) Main.tile[i1, j1].type == 211 || (int) Main.tile[i1, j1].type == 404)))
                    flag2 = false;
                  if (!Main.hardMode && (int) Main.tile[i1, j1].type == 58)
                    flag2 = false;
                  if (flag2)
                  {
                    WorldGen.KillTile(i1, j1, false, false, false);
                    if (!Main.tile[i1, j1].active() && Main.netMode != 0)
                      NetMessage.SendData(17, -1, -1, (NetworkText) null, 0, (float) i1, (float) j1, 0.0f, 0, 0, 0);
                  }
                }
                if (flag2)
                {
                  for (int i2 = i1 - 1; i2 <= i1 + 1; ++i2)
                  {
                    for (int j2 = j1 - 1; j2 <= j1 + 1; ++j2)
                    {
                      if (Main.tile[i2, j2] != null && (int) Main.tile[i2, j2].wall > 0 && flag1)
                      {
                        WorldGen.KillWall(i2, j2, false);
                        if ((int) Main.tile[i2, j2].wall == 0 && Main.netMode != 0)
                          NetMessage.SendData(17, -1, -1, (NetworkText) null, 2, (float) i2, (float) j2, 0.0f, 0, 0, 0);
                      }
                    }
                  }
                }
              }
            }
          }
          AchievementsHelper.CurrentlyMining = false;
        }
        if (Main.netMode != 0)
          NetMessage.SendData(29, -1, -1, (NetworkText) null, this.identity, (float) this.owner, 0.0f, 0.0f, 0, 0, 0);
        if (!this.noDropItem)
        {
          int number = -1;
          if (this.aiStyle == 10)
          {
            int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
            int j = (int) ((double) this.position.Y + (double) (this.width / 2)) / 16;
            int type = 0;
            int Type = 2;
            if (this.type == 109)
            {
              type = 147;
              Type = 0;
            }
            if (this.type == 31)
            {
              type = 53;
              Type = 0;
            }
            if (this.type == 42)
            {
              type = 53;
              Type = 0;
            }
            if (this.type == 56)
            {
              type = 112;
              Type = 0;
            }
            if (this.type == 65)
            {
              type = 112;
              Type = 0;
            }
            if (this.type == 67)
            {
              type = 116;
              Type = 0;
            }
            if (this.type == 68)
            {
              type = 116;
              Type = 0;
            }
            if (this.type == 71)
            {
              type = 123;
              Type = 0;
            }
            if (this.type == 39)
            {
              type = 59;
              Type = 176;
            }
            if (this.type == 40)
            {
              type = 57;
              Type = 172;
            }
            if (this.type == 179)
            {
              type = 224;
              Type = 0;
            }
            if (this.type == 241)
            {
              type = 234;
              Type = 0;
            }
            if (this.type == 354)
            {
              type = 234;
              Type = 0;
            }
            if (this.type == 411)
            {
              type = 330;
              Type = 71;
            }
            if (this.type == 412)
            {
              type = 331;
              Type = 72;
            }
            if (this.type == 413)
            {
              type = 332;
              Type = 73;
            }
            if (this.type == 414)
            {
              type = 333;
              Type = 74;
            }
            if (this.type == 109)
            {
              int closest = (int) Player.FindClosest(this.position, this.width, this.height);
              if ((double) (this.Center - Main.player[closest].Center).Length() > (double) Main.LogicCheckScreenWidth * 0.75)
              {
                type = -1;
                Type = 593;
              }
            }
            if (Main.tile[i, j].halfBrick() && (double) this.velocity.Y > 0.0 && (double) Math.Abs(this.velocity.Y) > (double) Math.Abs(this.velocity.X))
              --j;
            if (!Main.tile[i, j].active() && type >= 0)
            {
              bool flag = false;
              if (j < Main.maxTilesY - 2 && Main.tile[i, j + 1] != null && (Main.tile[i, j + 1].active() && (int) Main.tile[i, j + 1].type == 314))
                flag = true;
              if (!flag)
                WorldGen.PlaceTile(i, j, type, false, true, -1, 0);
              if (!flag && Main.tile[i, j].active() && (int) Main.tile[i, j].type == type)
              {
                if (Main.tile[i, j + 1].halfBrick() || (int) Main.tile[i, j + 1].slope() != 0)
                {
                  WorldGen.SlopeTile(i, j + 1, 0);
                  if (Main.netMode == 2)
                    NetMessage.SendData(17, -1, -1, (NetworkText) null, 14, (float) i, (float) (j + 1), 0.0f, 0, 0, 0);
                }
                if (Main.netMode != 0)
                  NetMessage.SendData(17, -1, -1, (NetworkText) null, 1, (float) i, (float) j, (float) type, 0, 0, 0);
              }
              else if (Type > 0)
                number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type, 1, false, 0, false, false);
            }
            else if (Type > 0)
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, Type, 1, false, 0, false, false);
          }
          if (this.type == 1 && Main.rand.Next(3) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40, 1, false, 0, false, false);
          if (this.type == 474 && Main.rand.Next(3) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3003, 1, false, 0, false, false);
          if (this.type == 103 && Main.rand.Next(6) == 0)
            number = Main.rand.Next(3) != 0 ? Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40, 1, false, 0, false, false) : Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 545, 1, false, 0, false, false);
          if (this.type == 2 && Main.rand.Next(3) == 0)
            number = Main.rand.Next(3) != 0 ? Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40, 1, false, 0, false, false) : Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 41, 1, false, 0, false, false);
          if (this.type == 172 && Main.rand.Next(3) == 0)
            number = Main.rand.Next(3) != 0 ? Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 40, 1, false, 0, false, false) : Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 988, 1, false, 0, false, false);
          if (this.type == 171)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 985, 1, false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 965, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 475)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3005, 1, false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 2996, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 505)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3079, 1, false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3077, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 506)
          {
            if ((double) this.ai[1] == 0.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3080, 1, false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
            else if ((double) this.ai[1] < 10.0)
            {
              number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3078, (int) (10.0 - (double) this.ai[1]), false, 0, false, false);
              Main.item[number].noGrabDelay = 0;
            }
          }
          if (this.type == 91 && Main.rand.Next(6) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 516, 1, false, 0, false, false);
          if (this.type == 50 && Main.rand.Next(3) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 282, 1, false, 0, false, false);
          if (this.type == 515 && Main.rand.Next(3) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3112, 1, false, 0, false, false);
          if (this.type == 53 && Main.rand.Next(3) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 286, 1, false, 0, false, false);
          if (this.type == 48 && Main.rand.Next(2) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 279, 1, false, 0, false, false);
          if (this.type == 54 && Main.rand.Next(2) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 287, 1, false, 0, false, false);
          if (this.type == 3 && Main.rand.Next(2) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 42, 1, false, 0, false, false);
          if (this.type == 4 && Main.rand.Next(4) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 47, 1, false, 0, false, false);
          if (this.type == 12 && this.damage > 500)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 75, 1, false, 0, false, false);
          if (this.type == 155)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 859, 1, false, 0, false, false);
          if (this.type == 598 && Main.rand.Next(4) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3378, 1, false, 0, false, false);
          if (this.type == 599 && Main.rand.Next(4) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 3379, 1, false, 0, false, false);
          if (this.type == 21 && Main.rand.Next(2) == 0)
            number = Item.NewItem((int) this.position.X, (int) this.position.Y, this.width, this.height, 154, 1, false, 0, false, false);
          if (Main.netMode == 1 && number >= 0)
            NetMessage.SendData(21, -1, -1, (NetworkText) null, number, 1f, 0.0f, 0.0f, 0, 0, 0);
        }
        if (this.type == 69 || this.type == 70 || this.type == 621)
        {
          int i = (int) ((double) this.position.X + (double) (this.width / 2)) / 16;
          int j = (int) ((double) this.position.Y + (double) (this.height / 2)) / 16;
          if (this.type == 69)
            WorldGen.Convert(i, j, 2, 4);
          if (this.type == 70)
            WorldGen.Convert(i, j, 1, 4);
          if (this.type == 621)
            WorldGen.Convert(i, j, 4, 4);
        }
        if (this.type == 378)
        {
          int num = Main.rand.Next(2, 4);
          if (Main.rand.Next(5) == 0)
            ++num;
          for (int index = 0; index < num; ++index)
          {
            float x = this.velocity.X;
            float y = this.velocity.Y;
            Projectile.NewProjectile(this.Center.X, this.Center.Y, x * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258), y * (float) (1.0 + (double) Main.rand.Next(-20, 21) * 0.00999999977648258), 379, this.damage, this.knockBack, this.owner, 0.0f, 0.0f);
          }
        }
      }
      this.active = false;
    }

    public Color GetAlpha(Color newColor)
    {
      if (this.type == 270)
        return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, Main.rand.Next(0, (int) byte.MaxValue));
      int num1;
      int num2;
      int num3;
      if (this.type == 650)
      {
        int num4 = (int) ((double) newColor.R * 1.5);
        int num5 = (int) ((double) newColor.G * 1.5);
        int num6 = (int) ((double) newColor.B * 1.5);
        if (num4 > (int) byte.MaxValue)
          num1 = (int) byte.MaxValue;
        if (num5 > (int) byte.MaxValue)
          num2 = (int) byte.MaxValue;
        if (num6 > (int) byte.MaxValue)
          num3 = (int) byte.MaxValue;
      }
      else
      {
        if (this.type == 604 || this.type == 631)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
        if (this.type == 636)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 64 - this.alpha / 4);
        if (this.type == 673 || this.type == 706)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 180 - this.alpha / 2 - this.alpha / 4);
        if (this.type == 603 || this.type == 633)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 623 || this.type >= 625 && this.type <= 628 || this.type == 710)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 645 || this.type == 643)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) sbyte.MaxValue - this.alpha / 2);
        if (this.type == 611)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 640 || this.type == 644 || this.type == 658)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
        if (this.type == 612)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue);
        if (this.aiStyle == 105)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 554)
          return new Color(200, 200, 200, 200);
        if (this.type == 601)
          return PortalHelper.GetPortalColor(this.owner, (int) this.ai[0]);
        if (this.type == 602)
        {
          Color portalColor = PortalHelper.GetPortalColor(this.owner, (int) this.ai[1]);
          portalColor.A = (byte) 227;
          return portalColor;
        }
        if (this.type == 585)
        {
          byte a = newColor.A;
          newColor = Color.Lerp(newColor, Color.White, 0.5f);
          newColor.A = a;
          return newColor;
        }
        if (this.type == 573 || this.type == 578 || (this.type == 579 || this.type == 617) || (this.type == 641 || this.type == 707))
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 9 || this.type == 490)
          return Color.White;
        if (this.type == 575 || this.type == 596 || this.type == 659)
        {
          if (this.timeLeft < 30)
            this.alpha = (int) ((double) byte.MaxValue - (double) byte.MaxValue * (double) ((float) this.timeLeft / 30f));
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 128 - this.alpha / 2);
        }
        if (this.type == 546)
          return new Color((int) byte.MaxValue, 200, (int) byte.MaxValue, 200);
        if (this.type == 553)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, 200, 200);
        if (this.type == 540)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
        if (this.type == 498)
          return new Color((int) byte.MaxValue, 100, 20, 200);
        if (this.type == 538)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 518)
        {
          float num4 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          return new Color((int) (200.0 * (double) num4), (int) (200.0 * (double) num4), (int) (200.0 * (double) num4), (int) (100.0 * (double) num4));
        }
        if (this.type == 518 || this.type == 595)
        {
          Color color = Color.Lerp(newColor, Color.White, 0.85f);
          color.A = (byte) 128;
          return color * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        }
        if (this.type == 536 || this.type == 607)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 63 - this.alpha / 4);
        if (this.type == 591)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 63 - this.alpha / 4);
        if (this.type == 493 || this.type == 494)
          return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
        if (this.type == 492)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 491)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 485 || this.type == 502)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 488)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 477 || this.type == 478 || this.type == 479)
        {
          if (this.alpha == 0)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
          return new Color(0, 0, 0, 0);
        }
        if (this.type == 473)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        if (this.type == 50 || this.type == 53 || this.type == 515)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
        if (this.type == 92)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
        if (this.type == 91)
          return new Color(200, 200, 200, 0);
        if (this.type == 34 || this.type == 15 || (this.type == 93 || this.type == 94) || (this.type == 95 || this.type == 96 || (this.type == 253 || this.type == 258)) || this.type == 102 && this.alpha < (int) byte.MaxValue)
          return new Color(200, 200, 200, 25);
        if (this.type == 465)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 503)
        {
          Color color1 = Color.Lerp(newColor, Color.White, 0.5f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          Color color2 = Color.Lerp(Color.Purple, Color.White, 0.33f);
          float num4 = (float) (0.25 + Math.Cos((double) this.localAI[0]) * 0.25);
          Color color3 = color2;
          double num5 = (double) num4;
          return Color.Lerp(color1, color3, (float) num5);
        }
        if (this.type == 467)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 694 || this.type == 695 || this.type == 696)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 634 || this.type == 635)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) sbyte.MaxValue) * this.Opacity;
        if (this.type == 671)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * this.Opacity;
        if (this.type == 664 || this.type == 666 || this.type == 668)
        {
          newColor = Color.Lerp(newColor, Color.White, 0.5f);
          return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 200) * this.Opacity;
        }
        if (this.type == 451)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200) * (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        if (this.type == 684)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200) * (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        if (this.type == 454 || this.type == 452)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 464)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue) * (float) (((double) byte.MaxValue - (double) this.alpha) / (double) byte.MaxValue);
        if (this.type == 450)
          return new Color(200, 200, 200, (int) byte.MaxValue - this.alpha);
        if (this.type == 459 || this.type == 709)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 447)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
        if (this.type == 446)
          return Color.Lerp(newColor, Color.White, 0.8f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 691 || this.type == 692 || this.type == 693)
          return Color.Lerp(newColor, Color.White, 0.4f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type >= 646 && this.type <= 649)
          return Color.Lerp(newColor, Color.White, 0.8f) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 445)
          return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
        if (this.type == 440 || this.type == 449 || this.type == 606)
        {
          num1 = (int) byte.MaxValue - this.alpha;
          num2 = (int) byte.MaxValue - this.alpha;
          num3 = (int) byte.MaxValue - this.alpha;
        }
        else
        {
          if (this.type == 444)
            return newColor * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 443 || this.type == 675 || (this.type == 686 || this.type == 711))
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 676)
            return newColor * this.Opacity;
          if (this.type == 438)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 592)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 437 || this.type == 700)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 462)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 128) * (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
          if (this.type == 352)
            return new Color(250, 250, 250, this.alpha);
          if (this.type == 435)
          {
            newColor = Color.Lerp(newColor, Color.White, 0.8f);
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 25);
          }
          if (this.type == 682)
          {
            newColor = Color.Lerp(newColor, Color.White, 0.8f);
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, (int) sbyte.MaxValue);
          }
          if (this.type == 436)
          {
            newColor = Color.Lerp(newColor, Color.White, 0.8f);
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, 25);
          }
          if (this.type == 409)
            return new Color(250, 250, 250, 200);
          if (this.type == 348 || this.type == 349)
            return new Color(200, 200, 200, this.alpha);
          if (this.type == 337)
            return new Color(250, 250, 250, 150);
          if (this.type >= 424 && this.type <= 426)
          {
            byte num4 = 150;
            if ((int) newColor.R < (int) num4)
              newColor.R = num4;
            if ((int) newColor.G < (int) num4)
              newColor.G = num4;
            if ((int) newColor.B < (int) num4)
              newColor.B = num4;
            return new Color((int) newColor.R, (int) newColor.G, (int) newColor.B, (int) byte.MaxValue);
          }
          if (this.type == 431 || this.type == 432)
            return new Color(250, 250, 250, (int) byte.MaxValue - this.alpha);
          if (this.type == 343 || this.type == 344)
          {
            float num4 = (float) (1.0 - (double) this.alpha / (double) byte.MaxValue);
            return new Color((int) (250.0 * (double) num4), (int) (250.0 * (double) num4), (int) (250.0 * (double) num4), (int) (100.0 * (double) num4));
          }
          if (this.type == 332)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          if (this.type == 329)
            return new Color(200, 200, 200, 50);
          if (this.type >= 326 && this.type <= 328 || this.type >= 400 && this.type <= 402)
            return Color.Transparent;
          if (this.type == 324 && this.frame >= 6 && this.frame <= 9)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          if (this.type == 16)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 321)
            return new Color(200, 200, 200, 0);
          if (this.type == 76 || this.type == 77 || this.type == 78)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 308)
            return new Color(200, 200, (int) byte.MaxValue, 125);
          if (this.type == 263)
          {
            if (this.timeLeft < (int) byte.MaxValue)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) (byte) this.timeLeft);
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
          }
          if (this.type == 274)
          {
            if (this.timeLeft >= 85)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100);
            byte num4 = (byte) (this.timeLeft * 3);
            byte num5 = (byte) (100.0 * ((double) num4 / (double) byte.MaxValue));
            return new Color((int) num4, (int) num4, (int) num4, (int) num5);
          }
          if (this.type == 5)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 300 || this.type == 301)
            return new Color(250, 250, 250, 50);
          if (this.type == 712)
            return Color.Lerp(newColor, Color.White, 0.4f) * this.Opacity;
          if (this.type == 304)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) (byte) ((double) ((int) byte.MaxValue - this.alpha) / 3.0));
          if (this.type == 116 || this.type == 132 || (this.type == 156 || this.type == 157) || (this.type == 157 || this.type == 173))
          {
            if ((double) this.localAI[1] >= 15.0)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, this.alpha);
            if ((double) this.localAI[1] < 5.0)
              return Color.Transparent;
            int num4 = (int) (((double) this.localAI[1] - 5.0) / 10.0 * (double) byte.MaxValue);
            return new Color(num4, num4, num4, num4);
          }
          if (this.type == 254)
          {
            if (this.timeLeft < 30)
              this.alpha = (int) ((double) byte.MaxValue - (double) byte.MaxValue * (double) ((float) this.timeLeft / 30f));
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          }
          if (this.type == 265 || this.type == 355)
          {
            if (this.alpha > 0)
              return Color.Transparent;
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          }
          if (this.type == 270 && (double) this.ai[0] >= 0.0)
          {
            if (this.alpha > 0)
              return Color.Transparent;
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
          }
          if (this.type == 257)
          {
            if (this.alpha > 200)
              return Color.Transparent;
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          }
          if (this.type == 259)
          {
            if (this.alpha > 200)
              return Color.Transparent;
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          }
          if (this.type >= 150 && this.type <= 152)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha);
          if (this.type == 250)
            return Color.Transparent;
          if (this.type == 251)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          if (this.type == 131)
            return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
          if (this.type == 211)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
          if (this.type == 229)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 50);
          if (this.type == 221)
            return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
          if (this.type == 20)
          {
            if (this.alpha <= 150)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 0);
            return new Color(0, 0, 0, 0);
          }
          if (this.type == 207)
          {
            num1 = (int) byte.MaxValue - this.alpha;
            num2 = (int) byte.MaxValue - this.alpha;
            num3 = (int) byte.MaxValue - this.alpha;
          }
          else
          {
            if (this.type == 242)
            {
              if (this.alpha < 140)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100);
              return Color.Transparent;
            }
            if (this.type == 638)
              return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 100) * this.Opacity;
            if (this.type == 660)
              return new Color(150, (int) byte.MaxValue, (int) byte.MaxValue, 0) * this.Opacity;
            if (this.type == 209)
            {
              num1 = (int) newColor.R - this.alpha;
              num2 = (int) newColor.G - this.alpha;
              num3 = (int) newColor.B - this.alpha / 2;
            }
            else
            {
              if (this.type == 130)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 175);
              if (this.type == 182)
                return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 200);
              if (this.type == 226)
              {
                int maxValue1 = (int) byte.MaxValue;
                int maxValue2 = (int) byte.MaxValue;
                int maxValue3 = (int) byte.MaxValue;
                float num4 = (float) ((double) Main.mouseTextColor / 200.0 - 0.300000011920929);
                int num5 = (int) ((double) maxValue1 * (double) num4);
                int num6 = (int) ((double) maxValue2 * (double) num4);
                int num7 = (int) ((double) maxValue3 * (double) num4);
                int r = num5 + 50;
                if (r > (int) byte.MaxValue)
                  r = (int) byte.MaxValue;
                int g = num6 + 50;
                if (g > (int) byte.MaxValue)
                  g = (int) byte.MaxValue;
                int b = num7 + 50;
                if (b > (int) byte.MaxValue)
                  b = (int) byte.MaxValue;
                return new Color(r, g, b, 200);
              }
              if (this.type == 227)
              {
                int maxValue;
                int num4 = maxValue = (int) byte.MaxValue;
                int num5 = maxValue;
                int num6 = maxValue;
                float num7 = (float) ((double) Main.mouseTextColor / 100.0 - 1.60000002384186);
                int num8 = (int) ((double) num6 * (double) num7);
                int num9 = (int) ((double) num5 * (double) num7);
                int num10 = (int) ((double) num4 * (double) num7);
                int a = (int) (100.0 * (double) num7);
                int r = num8 + 50;
                if (r > (int) byte.MaxValue)
                  r = (int) byte.MaxValue;
                int g = num9 + 50;
                if (g > (int) byte.MaxValue)
                  g = (int) byte.MaxValue;
                int b = num10 + 50;
                if (b > (int) byte.MaxValue)
                  b = (int) byte.MaxValue;
                return new Color(r, g, b, a);
              }
              if (this.type == 114 || this.type == 115)
              {
                if ((double) this.localAI[1] >= 15.0)
                  return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, this.alpha);
                if ((double) this.localAI[1] < 5.0)
                  return Color.Transparent;
                int num4 = (int) (((double) this.localAI[1] - 5.0) / 10.0 * (double) byte.MaxValue);
                return new Color(num4, num4, num4, num4);
              }
              if (this.type == 83 || this.type == 88 || (this.type == 89 || this.type == 90) || (this.type == 100 || this.type == 104 || this.type == 279) || this.type >= 283 && this.type <= 287)
              {
                if (this.alpha < 200)
                  return new Color((int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, (int) byte.MaxValue - this.alpha, 0);
                return Color.Transparent;
              }
              if (this.type == 34 || this.type == 35 || (this.type == 15 || this.type == 19) || (this.type == 44 || this.type == 45))
                return Color.White;
              if (this.type == 79)
              {
                num1 = Main.DiscoR;
                num2 = Main.DiscoG;
                num3 = Main.DiscoB;
                return new Color();
              }
              if (this.type == 9 || this.type == 15 || (this.type == 34 || this.type == 50) || (this.type == 53 || this.type == 76 || (this.type == 77 || this.type == 78)) || (this.type == 92 || this.type == 91))
              {
                num1 = (int) newColor.R - this.alpha / 3;
                num2 = (int) newColor.G - this.alpha / 3;
                num3 = (int) newColor.B - this.alpha / 3;
              }
              else
              {
                if (this.type == 18)
                  return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, 50);
                if (this.type == 16 || this.type == 44 || this.type == 45)
                {
                  num1 = (int) newColor.R;
                  num2 = (int) newColor.G;
                  num3 = (int) newColor.B;
                }
                else if (this.type == 12 || this.type == 72 || (this.type == 86 || this.type == 87))
                  return new Color((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue, (int) newColor.A - this.alpha);
              }
            }
          }
        }
      }
      float num11 = (float) ((int) byte.MaxValue - this.alpha) / (float) byte.MaxValue;
      int r1 = (int) ((double) newColor.R * (double) num11);
      int g1 = (int) ((double) newColor.G * (double) num11);
      int b1 = (int) ((double) newColor.B * (double) num11);
      int a1 = (int) newColor.A - this.alpha;
      if (a1 < 0)
        a1 = 0;
      if (a1 > (int) byte.MaxValue)
        a1 = (int) byte.MaxValue;
      return new Color(r1, g1, b1, a1);
    }

    public override string ToString()
    {
      return "type:" + (object) this.type + "name:" + this.Name + ", active:" + this.active.ToString() + ", whoAmI:" + (object) this.whoAmI + ", identity:" + (object) this.identity + ", ai0:" + (object) this.ai[0] + " , uuid:" + (object) this.projUUID;
    }
  }
}
